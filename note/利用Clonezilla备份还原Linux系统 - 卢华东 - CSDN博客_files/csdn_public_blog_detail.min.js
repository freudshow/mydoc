function editor_change_ask_o(e){var t=$(document).data("editor_all");window.cmDrawImageUp(t,e),""!=editor_change_ask_o_domain&&(document.domain=editor_change_ask_o_domain,editor_change_ask_o_domain="")}function getCookie(e){for(var t=document.cookie.split("; "),n=0;n<t.length;n++){var r=t[n].split("=");if(e==r[0])return r[1]}return null}var __hasProp={}.hasOwnProperty;!function(e){var t,n,r,i;r=this,t=r.jQuery,n={},e(r,n,t),void 0===r.csdn&&(r.csdn=n);for(i in n)__hasProp.call(n,i)&&(r[i]=r.csdn[i]=n[i])}(function(e,t,n){var r,i,o,s,a;if(!(e.CNick instanceof Function&&e.cnick instanceof Function&&(null!=(a=e.csdn)?a.cnick:void 0)instanceof Function))return void 0===String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),s={},i=function(t,n){var r,i;return arguments.length>1?(s[t]=n,null!=(r=e.localStorage)?r["cnick_"+t]=+new Date+","+n:void 0):null!=t?s[t]||function(e){var t,n,r,i;if(null!=e)return r=e.split(","),t=r[0],n=r[1],0<(i=new Date-new Date(parseInt(t,10)))&&1728e5>i?n:void 0}(null!=(i=e.localStorage)?i["cnick_"+t]:void 0):void 0},t.cnick=o=function(t,r,o){var s,a,l,c,u,d,f,h,p,m;for(null==t&&(t="a.user_name"),null==r&&(r=e.document),null==o&&(o=!1),a=n(t,r).filter(function(){return o||null==n(this).data("orig_username")}).data("orig_username",""),u={},p=0,m=a.length;m>p;p++)s=a[p],f=s.innerHTML.trim(),null!=(d=i(f))?n(s).data("orig_username",f).text(d):(c=u.hasOwnProperty(f)?u[f]:u[f]=[],c.push(s));for(h=function(){var e;e=[];for(l in u)__hasProp.call(u,l)&&e.push(l);return e}();h.length>0;)n.getJSON("https://passport.csdn.net/get/nick?callback=?",{users:h.splice(0,100).join()},function(e){var t,r,o,s,a;if(r=e.status,t=e.data,r&&t)for(o=0,s=t.length;s>o;o++)a=t[o],f=a.u,l=a.n,"null"===l&&(l=f),n(u[f]).data("orig_username",f).text(function(e,t){return l||t}),i(f,l)})},n(function(){return o()}),e.CNick=r=function(){function e(e){this.selector=e}return e.prototype.showNickname=function(){return o(this.selector)},e}()}),function(){var e,t,n,r;e={SERVER_PV_URL:window.location.protocol+"//pv.csdn.net/csdnbi",SERVER_RE_URL:window.location.protocol+"//re.csdn.net/csdnbi"},r={headers:{component:"enter",datatype:"pv",version:"v1"},body:{}},n={buildReqParam:function(e,t){var n={re:t};return"["+JSON.stringify($.extend(r,{headers:{component:"enterprise",datatype:e,version:"v1"},body:JSON.stringify(n)}))+"]"},serverUrl:function(t){return"track"==t?e.SERVER_PV_URL:e.SERVER_RE_URL}},t={trackReport:function(e,t){var r=n.buildReqParam(e,t);$.ajax({url:n.serverUrl(e),type:"POST",async:!0,crossDomain:!0,xhrFields:{withCredentials:!0},contentType:"text/plain;charset=UTF-8",data:r,success:function(){},error:function(){}})}},void 0===window.csdn&&(window.csdn={});for(i in t)window.csdn[i]=t[i]}(),function(){var e=[].slice;!function(e,t){var n,r,i,o,s;i=this,n=i.jQuery,r={},e(i,r,n),i.csdn===t&&(i.csdn=r);for(o in r)i[o]=i.csdn[o]=r[o];(s=r.tracking)({"":[s.baseParams,s.tos,s.sessionId],"bbs.csdn.net":s.tags("/topics/","div.tag span"),"blog.csdn.net":s.tags("/article/details/","div.tag2box a"),"ask.csdn.net":s.tags("/questions/","div.tag_data a.tag span"),"download.csdn.net":s.tags("/detail/",'div.info a[href^="/tag/"]'),"www.csdn.net":[s.tags("/article/","div.tag a"),s.cmsPid],"www.csto.com":s.tags("/p/","span.tech a"),"www.iteye.com":s.tags("/topic/","#topic_tags a")})}(function(t,n,r){var i,o,s,a,l,c,u,d,f,h,p,m,g;return o=t.document,d=t.location,f="http"===d.protocol.substr(0,4)?"":"http:",l=[],p=o.documentElement,c=p.doScroll,u=(c?/^loaded|^c/:/^loaded|c/).test(o.readyState),a=function(){var e;for(u=1;e=l.shift();)e()},"function"==typeof o.addEventListener&&o.addEventListener("DOMContentLoaded",function(){o.removeEventListener("DOMContentLoaded",arguments.callee,!1),a()}),c&&o.attachEvent("onreadystatechange",function(){/^c/.test(o.readyState)&&(o.detachEvent("onreadystatechange",arguments.callee),a())}),s=c?function(e){if(t.self!==t.top)return u?e():l.push(e);try{p.doScroll("left")}catch(n){return void t.setTimeout(function(){s(e)},50)}e()}:function(e){u?e():l.push(e)},m=function(e){return/\.?([a-z0-9\-]+\.[a-z0-9\-]+)(:\d+)?$/.exec(e)[1]},n.tracking=g=function(e){s(function(){var t,n,r,o,s,a,l,c;for(t={},c=[e[d.host],e[""]],r=0,s=c.length;r<s;r++)if(l=c[r])if("function"==typeof l)l(t);else for(o=0,a=l.length;o<a;o++)n=l[o],"function"==typeof n&&n(t);i(t)})},g.baseParams=function(e){function n(){var e,t,n=document.referrer,r=n.indexOf("?");n=n.substr(r+1);for(var i=n.split("&"),o=0;o<i.length;o++)r=i[o].indexOf("="),r>0&&(e=i[o].substring(0,r),t=i[o].substr(r+1),this[e]=t)}var r,i,s,a,l;e.user_name=/iteye.com$/.test(d.host)?(null!=(r=/>欢迎([^<]+)<\/a>/.exec(null!=(i=o.getElementById("user_nav"))?i.innerHTML:void 0))?r[1]:void 0)||"":(null!=(s=/(; )?(UserName)=([^;]+)/.exec(o.cookie))?s[3]:void 0)||"",e["x-acl-token"]="status_js_dkuyqthzbajmncbsb_token",e.pid||(e.pid=/iteye.com$/.test(d.host)?"iteye":o.body.getAttribute("data-pid")||(null!=(a=/(\w+)\.\w+\.\w+$/.exec(d.host))?a[1]:void 0)),e.oid=(null!=(l=h(".h-entry .p-author")[0])?l.innerHTML.replace(/^\s+|\s+$/g,""):void 0)||"";var c=new n,u=c.project_id,f=t.document.referrer;if("http://huiyi.csdn.net/api/activity_api/get_goods_list?"===f.substr(0,54)){var p="http://huiyi.csdn.net/activity/product/goods_list?";return e.referrer=p+"project_id="+u}return e.referrer=o.referrer},g.sessionId=function(e){var t,n;return n=null!=(t=/\bdc_session_id=([^;]*)(?:$|;)/.exec(o.cookie))?t[1]:void 0,void 0===n&&(n=(new Date).getTime()+"_"+Math.random()),o.cookie="dc_session_id="+n+" ; path=/ ; domain=."+m(d.host),e.session_id=""+n},g.tos=function(e){var t,n,r,i,s;n=+new Date/1e3|0,i=null!=(r=/\bdc_tos=([^;]*)(?:$|;)/.exec(o.cookie))?r[1]:void 0;try{s=n-parseInt(i,36)}catch(a){t=a,s=-1}return o.cookie="dc_tos="+n.toString(36)+" ; expires="+new Date(1e3*(n+14400)).toGMTString()+" ; max-age=14400 ; path=/ ; domain=."+m(d.host),e.tos=s},g.tags=function(){var t,n;return t=arguments[0],n=2<=arguments.length?e.call(arguments,1):[],function(e){var r,i,o,s,a,l,c,u,f,p,m,g,v;if(!("string"==typeof t&&!~d.pathname.indexOf(t)||t instanceof RegExp&&!t.test(d.pathname))){for(i=[],s=0,c=n.length;s<c;s++)for(g=n[s],p="string"==typeof g?h(g):("function"==typeof g?g():void 0)||[],a=0,u=p.length;a<u;a++)o=p[a],i.push(o);for(m={},l=0,f=i.length;l<f;l++)r=i[l],m[r.innerHTML.replace(/^\s+|\s+$/g,"")]=1;e.tag=function(){var e;e=[];for(v in m)e.push(v);return e}().join()}}},g.cmsPid=function(e){if(d.pathname.indexOf("/article/")!==-1)try{return e.pid=h(".brea_nav > a")[1].hostname.match(/(\w+)\.\w+\.\w+$/)[1]}catch(t){}},g.querySelectorAll=h=function(e){return("function"==typeof o.querySelectorAll?o.querySelectorAll(e):void 0)||("function"==typeof r?r(e):void 0)||t.Prototype&&("function"==typeof t.$$?t.$$(e):void 0)||[]},g.crossdomainGet=i=function(e){csdn.trackReport("track",r.param(e))}})}.call(this),function(){!function(e){var t,n=!1,r=function(){return document.activeElement};return t=function(e){this.opts=e,this.Doms={},this.Curr=null,this.init.apply(this,[e])},t.prototype={init:function(e){e=e||this.opts,this.getDoms(e).bindEvent(),this.initFavor(),this.initNotify(),this.initProfile()},getDoms:function(e){return e=e||this.opts,this.Doms.wraper=e.wraper,this.folded=!0,this.Doms.listBtns=$(e.wraper+" ul.btns>li"),this.Doms.profile=$(e.wraper+" .profile"),this},bindEvent:function(e){var t=this;$(this.Doms.wraper+" .login-wrap");return e=e||this.opts,this.Doms.listBtns.bind("mouseover",function(r){t.Curr=$(this).parent().children().filter(".on")[0],($(r.target).hasClass("notify")||$(r.target).parents().filter(".notify").length)&&(n&&!e.notifyInst.isHasNewMsg()||($("#header_notice_num").trigger("click"),n=!0)),t.Curr!=this&&($(t.Curr).removeClass("on"),$(this).addClass("on"),t.folded=!1)}),$(this.Doms.wraper).bind("mouseleave",function(e){$(r()).parents().filter(t.Doms.wraper).length>0||($(document.body).trigger("toolbar-fold"),$(t.Doms.wraper).find(".on").removeClass("on"))}),$(document).bind("click",function(e){$(e.target).parents().filter(t.Doms.wraper).length<=0&&($(document.body).trigger("toolbar-fold"),$(t.Doms.wraper).find(".on").removeClass("on"))}),$(document.body).bind("toolbar-fold",function(e){t.Doms.listBtns.filter(".on").removeClass("on")}),$(this.Doms.wraper+" .search form").bind("keyup",function(e){13==e.keycode&&this.submit()}),this},initLogo:function(e){},initFavor:function(){var t=this.Doms.wraper+" .favor",n=document.title,r=document.location.href,i=$(t+" .title"),o=$(t+" .url"),s=$(t+" #input-tag"),a=$(t+" #input-description"),l=$(t+" .share"),c=$(t+" .cancel"),u=$(t+" .submit"),d=$(t+" .ok");i.val(n),o.val(r),l.attr("checked",!0),c.bind("click",function(e){$(document.body).trigger("toolbar-fold"),$(this).closest(".on").removeClass("on")}),d.bind("click",function(e){$(t+" .favor-failed").hide(),$(t+" .favor-success").hide(),$(t+" .favor-form").show(),$(document.body).trigger("toolbar-fold")}),$.ajax({dataType:"jsonp",jsonp:"callback",url:"http://lib.csdn.net/public/api/getUserStructList",type:"GET",success:function(e){e.data.length<=0?$("#toolbar_Design_knowledge").html("<li>选择知识图谱</li>"):$.each(e.data,function(t,n){var r=e.data[t].name;$("#toolbar_Design_knowledge").append("<li>"+r+"</li>")})},error:function(e){console.log(e)}});var f=$("#toolbar_Design_knowledge");$(".save_lib_map").attr({checked:!0}),$(f).bind("mouseup",function(t){var n=e.event||t,r=n.target||n.srcElement,i=$(r).text();$("#toolbar_sele_map").focus().html(i+' <i class="fa fa-chevron-down"></i>'),$(r).parents(".dropdown").removeClass("open")}),u.bind("click",function(n){function r(){$(t+" .title").val(i.val()),$(t+" .url").val(e.location.href),$(t+" .tag").val(""),$(t+" .description").val("")}function c(){$(t+" .favor-failed").show(),$(t+" .favor-success").hide(),$(t+" .favor-form").hide()}function u(){$(t+" .favor-failed").hide(),$(t+" .favor-success").show(),$(t+" .favor-form").hide()}var d=$.trim($("#toolbar_sele_map").text()),f="选择知识图谱",h=null,p=$(".save_lib_map").is(":checked");if(p&&d!==f)var m=d;else var m=h;var g={title:i.val(),url:o.val(),description:a.val(),tag:s.val(),share:l[0].checked?1:0,map_name:m};return $.ajax({data:g,jsonp:"jsonpcallback",dataType:"jsonp",url:"http://my.csdn.net/service/favorite/add_favorite",success:function(e){"-1"==e.success&&(c(),r()),"1"==e.success&&(u(),r())}}),!1})},initNotify:function(e){var t=this,e=e||this.opts;if(!e.notifyInst)throw $(e.wraper+" .notify").hide(),"notify.js not loaded!";$(document).bind("toolbar-setNotesNum",function(e,n){var r=($(t.Doms.wraper+" .number"),$(t.Doms.wraper+" .icon-hasnotes-sm"));return n<=0?void r.hide():void(n>0&&r.show())}),e.notifyInst&&(e.notifyInst.on("receive_unreads",function(t,n){var r=e.notifyInst.getlocalUnread().length;$(document).trigger("toolbar-setNotesNum",r)}),e.notifyInst.on("receive_setreaded",function(t,n){var r=e.notifyInst.getlocalUnread().length;$(document).trigger("toolbar-setNotesNum",r)}))},initProfile:function(e){}},e.Toolbar=t}(window);var e=($("#csdn-toolbar-id"),"undefined"==typeof csdn_note?null:csdn_note);new Toolbar({wraper:".csdn-toolbar",notifyInst:e}),$(".icon-enter-sm").on("click",function(){$("#toolbar_search").submit()})}.call(this),function(){function e(e){this.tokens=[],this.tokens.links={},this.options=e||a.defaults,this.rules=l.normal,this.options.gfm&&(this.options.tables?this.rules=l.tables:this.rules=l.gfm)}function t(e,t){if(this.options=t||a.defaults,this.links=e,this.rules=c.normal,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.gfm?this.options.breaks?this.rules=c.breaks:this.rules=c.gfm:this.options.pedantic&&(this.rules=c.pedantic)}function n(e){this.tokens=[],this.token=null,this.options=e||a.defaults}function r(e,t){return e.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function i(e,t){return e=e.source,t=t||"",function n(r,i){return r?(i=i.source||i,i=i.replace(/(^|[^\[])\^/g,"$1"),e=e.replace(r,i),n):new RegExp(e,t)}}function o(){}function s(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function a(t,i,o){if(o||"function"==typeof i){o||(o=i,i=null),i=s({},a.defaults,i||{});var l,c,u=i.highlight,d=0;try{l=e.lex(t,i)}catch(f){return o(f)}c=l.length;var h=function(){var e,t;try{e=n.parse(l,i)}catch(r){t=r}return i.highlight=u,t?o(t):o(null,e)};if(!u||u.length<3)return h();if(delete i.highlight,!c)return h();for(;d<l.length;d++)!function(e){return"code"!==e.type?--c||h():u(e.text,e.lang,function(t,n){return null==n||n===e.text?--c||h():(e.text=n,e.escaped=!0,void(--c||h()))})}(l[d])}else try{return i&&(i=s({},a.defaults,i)),n.parse(e.lex(t,i),i)}catch(f){if(f.message+="\nPlease report this to https://github.com/chjj/marked.",(i||a.defaults).silent)return"<p>An error occured:</p><pre>"+r(f.message+"",!0)+"</pre>";throw f}}var l={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:o,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:o,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:o,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};l.bullet=/(?:[*+-]|\d+\.)/,l.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,l.item=i(l.item,"gm")(/bull/g,l.bullet)(),l.list=i(l.list)(/bull/g,l.bullet)("hr",/\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)(),l._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b",l.html=i(l.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,l._tag)(),l.paragraph=i(l.paragraph)("hr",l.hr)("heading",l.heading)("lheading",l.lheading)("blockquote",l.blockquote)("tag","<"+l._tag)("def",l.def)(),l.normal=s({},l),l.gfm=s({},l.normal,{fences:/^ *(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,paragraph:/^/}),l.gfm.paragraph=i(l.paragraph)("(?!","(?!"+l.gfm.fences.source.replace("\\1","\\2")+"|"+l.list.source.replace("\\1","\\3")+"|")(),l.tables=s({},l.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),e.rules=l,e.lex=function(t,n){var r=new e(n);return r.lex(t)},e.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},e.prototype.token=function(e,t){for(var n,r,i,o,s,a,c,u,d,e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?i:i.replace(/\n+$/,"")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2],text:i[3]});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/\n$/,"").split("\n")},u=0;u<a.align.length;u++)/^ *-+: *$/.test(a.align[u])?a.align[u]="right":/^ *:-+: *$/.test(a.align[u])?a.align[u]="center":/^ *:-+ *$/.test(a.align[u])?a.align[u]="left":a.align[u]=null;for(u=0;u<a.cells.length;u++)a.cells[u]=a.cells[u].split(/ *\| */);this.tokens.push(a)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2]?1:2,text:i[1]});else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,t),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],this.tokens.push({type:"list_start",ordered:o.length>1}),i=i[0].match(this.rules.item),n=!1,d=i.length,u=0;u<d;u++)a=i[u],c=a.length,a=a.replace(/^ *([*+-]|\d+\.) +/,""),~a.indexOf("\n ")&&(c-=a.length,a=this.options.pedantic?a.replace(/^ {1,4}/gm,""):a.replace(new RegExp("^ {1,"+c+"}","gm"),"")),this.options.smartLists&&u!==d-1&&(s=l.bullet.exec(i[u+1])[0],o===s||o.length>1&&s.length>1||(e=i.slice(u+1).join("\n")+e,u=d-1)),r=n||/\n\n(?!\s*$)/.test(a),u!==d-1&&(n="\n"===a.charAt(a.length-1),r||(r=n)),this.tokens.push({type:r?"loose_item_start":"list_item_start"}),this.token(a,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:"pre"===i[1]||"script"===i[1]||"style"===i[1],text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),this.tokens.links[i[1].toLowerCase()]={href:i[2],title:i[3]};else if(t&&(i=this.rules.table.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/(?: *\| *)?\n$/,"").split("\n")},u=0;u<a.align.length;u++)/^ *-+: *$/.test(a.align[u])?a.align[u]="right":/^ *:-+: *$/.test(a.align[u])?a.align[u]="center":/^ *:-+ *$/.test(a.align[u])?a.align[u]="left":a.align[u]=null;for(u=0;u<a.cells.length;u++)a.cells[u]=a.cells[u].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(a)}else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var c={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:o,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:o,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};c._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/,c._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,c.link=i(c.link)("inside",c._inside)("href",c._href)(),c.reflink=i(c.reflink)("inside",c._inside)(),c.normal=s({},c),c.pedantic=s({},c.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),c.gfm=s({},c.normal,{escape:i(c.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:i(c.text)("]|","~]|")("|","|https?://|")()}),c.breaks=s({},c.gfm,{br:i(c.br)("{2,}","*")(),text:i(c.gfm.text)("{2,}","*")()}),t.rules=c,t.output=function(e,n,r){var i=new t(n,r);return i.output(e)},t.prototype.output=function(e){for(var t,n,i,o,s="";e;)if(o=this.rules.escape.exec(e))e=e.substring(o[0].length),s+=o[1];else if(o=this.rules.autolink.exec(e))e=e.substring(o[0].length),"@"===o[2]?(n=":"===o[1].charAt(6)?this.mangle(o[1].substring(7)):this.mangle(o[1]),i=this.mangle("mailto:")+n):(n=r(o[1]),i=n),s+='<a href="'+i+'">'+n+"</a>";else if(o=this.rules.url.exec(e))e=e.substring(o[0].length),n=r(o[1]),i=n,s+='<a href="'+i+'">'+n+"</a>";else if(o=this.rules.tag.exec(e))e=e.substring(o[0].length),s+=this.options.sanitize?r(o[0]):o[0];else if(o=this.rules.link.exec(e))e=e.substring(o[0].length),s+=this.outputLink(o,{href:o[2],title:o[3]});else if((o=this.rules.reflink.exec(e))||(o=this.rules.nolink.exec(e))){if(e=e.substring(o[0].length),t=(o[2]||o[1]).replace(/\s+/g," "),t=this.links[t.toLowerCase()],!t||!t.href){s+=o[0].charAt(0),e=o[0].substring(1)+e;continue}s+=this.outputLink(o,t)}else if(o=this.rules.strong.exec(e))e=e.substring(o[0].length),s+="<strong>"+this.output(o[2]||o[1])+"</strong>";else if(o=this.rules.em.exec(e))e=e.substring(o[0].length),s+="<em>"+this.output(o[2]||o[1])+"</em>";else if(o=this.rules.code.exec(e))e=e.substring(o[0].length),s+="<code>"+r(o[2],!0)+"</code>";else if(o=this.rules.br.exec(e))e=e.substring(o[0].length),s+="<br>";else if(o=this.rules.del.exec(e))e=e.substring(o[0].length),s+="<del>"+this.output(o[1])+"</del>";else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),s+=r(this.smartypants(o[0]));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return s},t.prototype.outputLink=function(e,t){return"!"!==e[0].charAt(0)?'<a href="'+r(t.href)+'"'+(t.title?' title="'+r(t.title)+'"':"")+">"+this.output(e[1])+"</a>":'<img src="'+r(t.href)+'" alt="'+r(e[1])+'"'+(t.title?' title="'+r(t.title)+'"':"")+">"},t.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/--/g,"—").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},t.prototype.mangle=function(e){for(var t,n="",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},n.parse=function(e,t){var r=new n(t);return r.parse(e)},n.prototype.parse=function(e){this.inline=new t(e.links,this.options),this.tokens=e.reverse();for(var n="";this.next();)n+=this.tok();return n},n.prototype.next=function(){return this.token=this.tokens.pop()},n.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},n.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},n.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return"<hr>\n";case"heading":return"<h"+this.token.depth+' id="'+this.token.text.toLowerCase().replace(/[^\w]+/g,"-")+'">'+this.inline.output(this.token.text)+"</h"+this.token.depth+">\n";case"code":if(this.options.highlight){var e=this.options.highlight(this.token.text,this.token.lang);null!=e&&e!==this.token.text&&(this.token.escaped=!0,this.token.text=e)}return this.token.escaped||(this.token.text=r(this.token.text,!0)),"<pre><code"+(this.token.lang?' class="'+this.options.langPrefix+this.token.lang+'"':"")+">"+this.token.text+"</code></pre>\n";case"table":var t,n,i,o,s,a="";for(a+="<thead>\n<tr>\n",n=0;n<this.token.header.length;n++)t=this.inline.output(this.token.header[n]),a+="<th",this.token.align[n]&&(a+=' style="text-align:'+this.token.align[n]+'"'),a+=">"+t+"</th>\n";for(a+="</tr>\n</thead>\n",a+="<tbody>\n",n=0;n<this.token.cells.length;n++){for(i=this.token.cells[n],a+="<tr>\n",s=0;s<i.length;s++)o=this.inline.output(i[s]),a+="<td",this.token.align[s]&&(a+=' style="text-align:'+this.token.align[s]+'"'),a+=">"+o+"</td>\n";a+="</tr>\n"}return a+="</tbody>\n","<table>\n"+a+"</table>\n";case"blockquote_start":for(var a="";"blockquote_end"!==this.next().type;)a+=this.tok();return"<blockquote>\n"+a+"</blockquote>\n";case"list_start":for(var l=this.token.ordered?"ol":"ul",a="";"list_end"!==this.next().type;)a+=this.tok();return"<"+l+">\n"+a+"</"+l+">\n";case"list_item_start":for(var a="";"list_item_end"!==this.next().type;)a+="text"===this.token.type?this.parseText():this.tok();return"<li>"+a+"</li>\n";case"loose_item_start":for(var a="";"list_item_end"!==this.next().type;)a+=this.tok();return"<li>"+a+"</li>\n";case"html":return this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);case"paragraph":return"<p>"+this.inline.output(this.token.text)+"</p>\n";case"text":return"<p>"+this.parseText()+"</p>\n"}},o.exec=o,a.options=a.setOptions=function(e){return s(a.defaults,e),a},a.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1},a.Parser=n,a.parser=n.parse,a.Lexer=e,a.lexer=e.lex,a.InlineLexer=t,a.inlineLexer=t.output,a.parse=a,"object"==typeof exports?module.exports=a:"function"==typeof define&&define.amd?define(function(){return a}):this.marked=a}.call(function(){return this||("undefined"!=typeof window?window:global)}()),function(e){function t(e){return e=D?e.replace("Ctrl","Cmd"):e.replace("Cmd","Ctrl")}function n(e,n){n=n||{};var r=document.createElement("a"),i=n.shortcut||H[e];return i&&(i=t(i),r.title=i,r.title=r.title.replace("Cmd","⌘"),D&&(r.title=r.title.replace("Alt","⌥"))),r.className=n.className||"icon-"+e,r}function r(){var e=document.createElement("i");return e.className="separator",e.innerHTML="|",e}function i(e,t){t=t||e.getCursor("start");var n=e.getTokenAt(t);if(!n.type)return{};for(var r,i,o=n.type.split(" "),s={},a=0;a<o.length;a++)r=o[a],"strong"===r?s.bold=!0:"variable-2"===r?(i=e.getLine(t.line),/^\s*\d+\.\s/.test(i)?s["list-ol"]=!0:s["list-ul"]=!0):"atom"===r?s.quote=!0:"em"===r?s.italic=!0:"header"===r&&(i=e.getLine(t.line),/^\s*\##\s/.test(i)?s.heading=!0:s.headline=!0);return s}function o(e){var t=e.codemirror.getWrapperElement(),n=document,r=n.fullScreen||n.mozFullScreen||n.webkitFullScreen,i=function(){t.requestFullScreen?t.requestFullScreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullScreen&&t.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)},o=function(){n.cancelFullScreen?n.cancelFullScreen():n.mozCancelFullScreen?n.mozCancelFullScreen():n.webkitCancelFullScreen&&n.webkitCancelFullScreen()};r?o&&o():i()}function s(e){var t=e.codemirror;C(t,"headline")}function a(e){var t=e.codemirror;C(t,"heading")}function l(e){var t,n=e.codemirror,r=i(n),o="**",s="**",a=n.getCursor("start"),l=n.getCursor("end");r.bold?(t=n.getLine(a.line),o=t.slice(0,a.ch),s=t.slice(a.ch),o=o.replace(/^(.*)?(\*|\_){2}(\S+.*)?$/,"$1$3"),s=s.replace(/^(.*\S+)?(\*|\_){2}(\s+.*)?$/,"$1$3"),a.ch-=2,l.ch-=2,n.setLine(a.line,o+s)):(t=n.getSelection(),n.replaceSelection(o+t+s),a.ch+=2,l.ch+=2),n.setSelection(a,l),n.focus()}function c(e){var t,n=e.codemirror,r=i(n),o="_",s="_",a=n.getCursor("start"),l=n.getCursor("end");r.italic?(t=n.getLine(a.line),o=t.slice(0,a.ch),s=t.slice(a.ch),o=o.replace(/^(._)?(\*|\_)(\S+._)?$/,"$1$3"),s=s.replace(/^(._\S+)?(\*|\_)(\s+._)?$/,"$1$3"),a.ch-=1,l.ch-=1,n.setLine(a.line,o+s)):(t=n.getSelection(),n.replaceSelection(o+t+s),a.ch+=1,l.ch+=1),n.setSelection(a,l),n.focus()}function u(e){var t=e.codemirror;C(t,"quote")}function d(e){var t=e.codemirror,n=i(t);w(t,n.code,"\n\n```\n ","在这里书写代码片  \n```\n\n")}function f(e){var t=e.codemirror;C(t,"list-ul")}function h(e){var t=e.codemirror;C(t,"list-ol")}function p(e){$(".cm_dialog").fadeIn(300),$(".cm_add_link").slideDown(300),$(".cm_add_img").slideUp(300)}function m(e,t){var n=e.codemirror,r=i(n),o=$("#"+t+"cm_link_txt").val(),s=$("#"+t+"cm_link_url").val(),a=$("#"+t+"cm_link_tit").val();""==o&&""==s&&""==a||w(n,r.link,"[",o+"]("+s+' "'+a+'")'),$(".cm_add_link").slideUp(300),$(".cm_dialog").fadeOut(300)}function g(e){$(".cm_dialog").fadeIn(300),$(".cm_add_link").slideUp(300),$(".cm_add_img").slideDown(300)}function v(e,t){var n=e.codemirror,r=i(n),o=$("#"+t+"cm_img_url").val(),s=$("#"+t+"cm_img_alt").val();""==o&&""==s||w(n,r.image,"![",s+"]("+o+")"),$(".cm_add_img").slideUp(300),$(".cm_dialog").fadeOut(300)}function y(e,t){var n=e.codemirror,r=i(n);w(n,r.image,"![","图片说明]("+t+")"),$(".cm_add_img").slideUp(300),$(".cm_dialog").fadeOut(300)}function b(e){var t=e.codemirror;t.undo(),t.focus()}function k(e){var t=e.codemirror;t.redo(),t.focus()}function x(e){var t=e.toolbar.preview,n=e.constructor.markdown,r=e.codemirror,i=r.getWrapperElement(),o=i.lastChild;/editor-preview/.test(o.className)||(o=document.createElement("div"),o.className="editor-preview",i.appendChild(o)),/editor-preview-active/.test(o.className)?(o.className=o.className.replace(/\s*editor-preview-active\s*/g,""),t.className=t.className.replace(/\s*active\s*/g,"")):(setTimeout(function(){o.className+=" editor-preview-active"},1),t.className+=" active");var s=r.getValue();o.innerHTML=n(s)}function w(e,t,n,r){var i,o=e.getCursor("start"),s=e.getCursor("end");t?(i=e.getLine(o.line),n=i.slice(0,o.ch),r=i.slice(o.ch),e.setLine(o.line,n+r)):(i=e.getSelection(),e.replaceSelection(n+i+r),o.ch+=n.length,s.ch+=n.length),e.setSelection(o,s),e.focus()}function C(e,t){for(var n=i(e),r=e.getCursor("start"),o=e.getCursor("end"),s={headline:/^(\s*)\#\s+/,heading:/^(\s*)\##\s+/,quote:/^(\s*)\>\s+/,"list-ul":/^(\s*)(\*|\-|\+)\s+/,"list-ol":/^(\s*)\d+\.\s+/},a={headline:"# ",heading:"## ",quote:"> ","list-ul":"* ","list-ol":"1. "},l=r.line;l<=o.line;l++)!function(r){var i=e.getLine(r);i=n[t]?i.replace(s[t],"$1"):a[t]+i,e.setLine(r,i)}(l);e.focus()}function _(e){var t=/[a-zA-Z0-9_\u0392-\u03c9]+|[\u4E00-\u9FFF\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/g,n=e.match(t),r=0;if(null===n)return r;for(var i=0;i<n.length;i++)r+=n[i].charCodeAt(0)>=19968?n[i].length:1;return r}function L(e){e=e||{},e.element&&(this.element=e.element),e.toolbar=e.toolbar||L.toolbar,e.hasOwnProperty("status")||(e.status=["lines","words","cursor"]),this.options=e,this.element&&this.render()}var S=function(){"use strict";function e(n,r){if(!(this instanceof e))return new e(n,r);this.options=r=r||{};for(var i in ri)!r.hasOwnProperty(i)&&ri.hasOwnProperty(i)&&(r[i]=ri[i]);f(r);var o="string"==typeof r.value?0:r.value.first,s=this.display=t(n,o);s.wrapper.CodeMirror=this,c(this),r.autofocus&&!Wr&&he(this),this.state={keyMaps:[],overlays:[],modeGen:0,overwrite:!1,focused:!1,suppressEdits:!1,pasteIncoming:!1,draggingText:!1,highlight:new Un},a(this),r.lineWrapping&&(this.display.wrapper.className+=" CodeMirror-wrap");var l=r.value;"string"==typeof l&&(l=new vi(r.value,r.mode)),oe(this,un)(this,l),_r&&setTimeout(er(fe,this,!0),20),me(this);var u;try{u=document.activeElement==s.input}catch(d){}u||r.autofocus&&!Wr?setTimeout(er(Ne,this),20):Ee(this),oe(this,function(){for(var e in ni)ni.propertyIsEnumerable(e)&&ni[e](this,r[e],ii);for(var t=0;t<li.length;++t)li[t](this)})()}function t(e,t){var n={},r=n.input=rr("textarea",null,null,"position: absolute; padding: 0; width: 1px; height: 1em; outline: none; font-size: 4px;");return $r?r.style.width="1000px":r.setAttribute("wrap","off"),Ir&&(r.style.border="1px solid black"),r.setAttribute("autocorrect","off"),r.setAttribute("autocapitalize","off"),r.setAttribute("spellcheck","false"),n.inputDiv=rr("div",[r],null,"overflow: hidden; position: relative; width: 3px; height: 0px;"),n.scrollbarH=rr("div",[rr("div",null,null,"height: 1px")],"CodeMirror-hscrollbar"),n.scrollbarV=rr("div",[rr("div",null,null,"width: 1px")],"CodeMirror-vscrollbar"),n.scrollbarFiller=rr("div",null,"CodeMirror-scrollbar-filler"),n.gutterFiller=rr("div",null,"CodeMirror-gutter-filler"),n.lineDiv=rr("div",null,"CodeMirror-code"),n.selectionDiv=rr("div",null,null,"position: relative; z-index: 1"),n.cursor=rr("div"," ","CodeMirror-cursor"),n.otherCursor=rr("div"," ","CodeMirror-cursor CodeMirror-secondarycursor"),n.measure=rr("div",null,"CodeMirror-measure"),n.lineSpace=rr("div",[n.measure,n.selectionDiv,n.lineDiv,n.cursor,n.otherCursor],null,"position: relative; outline: none"),n.mover=rr("div",[rr("div",[n.lineSpace],"CodeMirror-lines")],null,"position: relative"),n.sizer=rr("div",[n.mover],"CodeMirror-sizer"),n.heightForcer=rr("div",null,null,"position: absolute; height: "+wi+"px; width: 1px;"),n.gutters=rr("div",null,"CodeMirror-gutters"),n.lineGutter=null,n.scroller=rr("div",[n.sizer,n.heightForcer,n.gutters],"CodeMirror-scroll"),n.scroller.setAttribute("tabIndex","-1"),n.wrapper=rr("div",[n.inputDiv,n.scrollbarH,n.scrollbarV,n.scrollbarFiller,n.gutterFiller,n.scroller],"CodeMirror"),Lr&&(n.gutters.style.zIndex=-1,
n.scroller.style.paddingRight=0),e.appendChild?e.appendChild(n.wrapper):e(n.wrapper),Ir&&(r.style.width="0px"),$r||(n.scroller.draggable=!0),Er?(n.inputDiv.style.height="1px",n.inputDiv.style.position="absolute"):Lr&&(n.scrollbarH.style.minWidth=n.scrollbarV.style.minWidth="18px"),n.viewOffset=n.lastSizeC=0,n.showingFrom=n.showingTo=t,n.lineNumWidth=n.lineNumInnerWidth=n.lineNumChars=null,n.prevInput="",n.alignWidgets=!1,n.pollingFast=!1,n.poll=new Un,n.cachedCharWidth=n.cachedTextHeight=null,n.measureLineCache=[],n.measureLineCachePos=0,n.inaccurateSelection=!1,n.maxLine=null,n.maxLineLength=0,n.maxLineChanged=!1,n.wheelDX=n.wheelDY=n.wheelStartX=n.wheelStartY=null,n}function n(t){t.doc.mode=e.getMode(t.options,t.doc.modeOption),t.doc.iter(function(e){e.stateAfter&&(e.stateAfter=null),e.styles&&(e.styles=null)}),t.doc.frontier=t.doc.first,E(t,100),t.state.modeGen++,t.curOp&&le(t)}function r(e){e.options.lineWrapping?(e.display.wrapper.className+=" CodeMirror-wrap",e.display.sizer.style.minWidth=""):(e.display.wrapper.className=e.display.wrapper.className.replace(" CodeMirror-wrap",""),d(e)),o(e),le(e),U(e),setTimeout(function(){h(e)},100)}function i(e){var t=te(e.display),n=e.options.lineWrapping,r=n&&Math.max(5,e.display.scroller.clientWidth/ne(e.display)-3);return function(i){return Pt(e.doc,i)?0:n?(Math.ceil(i.text.length/r)||1)*t:t}}function o(e){var t=e.doc,n=i(e);t.iter(function(e){var t=n(e);t!=e.height&&pn(e,t)})}function s(e){var t=di[e.options.keyMap],n=t.style;e.display.wrapper.className=e.display.wrapper.className.replace(/\s*cm-keymap-\S+/g,"")+(n?" cm-keymap-"+n:""),e.state.disableInput=t.disableInput}function a(e){e.display.wrapper.className=e.display.wrapper.className.replace(/\s*cm-s-\S+/g,"")+e.options.theme.replace(/(^|\s)\s*/g," cm-s-"),U(e)}function l(e){c(e),le(e),setTimeout(function(){m(e)},20)}function c(e){var t=e.display.gutters,n=e.options.gutters;ir(t);for(var r=0;r<n.length;++r){var i=n[r],o=t.appendChild(rr("div",null,"CodeMirror-gutter "+i));"CodeMirror-linenumbers"==i&&(e.display.lineGutter=o,o.style.width=(e.display.lineNumWidth||1)+"px")}t.style.display=r?"":"none"}function u(e,t){if(0==t.height)return 0;for(var n,r=t.text.length,i=t;n=It(i);){var o=n.find();i=dn(e,o.from.line),r+=o.from.ch-o.to.ch}for(i=t;n=Wt(i);){var o=n.find();r-=i.text.length-o.from.ch,i=dn(e,o.to.line),r+=i.text.length-o.to.ch}return r}function d(e){var t=e.display,n=e.doc;t.maxLine=dn(n,n.first),t.maxLineLength=u(n,t.maxLine),t.maxLineChanged=!0,n.iter(function(e){var r=u(n,e);r>t.maxLineLength&&(t.maxLineLength=r,t.maxLine=e)})}function f(e){for(var t=!1,n=0;n<e.gutters.length;++n)"CodeMirror-linenumbers"==e.gutters[n]&&(e.lineNumbers?t=!0:e.gutters.splice(n--,1));!t&&e.lineNumbers&&e.gutters.push("CodeMirror-linenumbers")}function h(e){var t=e.display,n=e.doc.height,r=n+W(t);t.sizer.style.minHeight=t.heightForcer.style.top=r+"px",t.gutters.style.height=Math.max(r,t.scroller.clientHeight-wi)+"px";var i=Math.max(r,t.scroller.scrollHeight),o=t.scroller.scrollWidth>t.scroller.clientWidth+1,s=i>t.scroller.clientHeight+1;s?(t.scrollbarV.style.display="block",t.scrollbarV.style.bottom=o?cr(t.measure)+"px":"0",t.scrollbarV.firstChild.style.height=i-t.scroller.clientHeight+t.scrollbarV.clientHeight+"px"):t.scrollbarV.style.display="",o?(t.scrollbarH.style.display="block",t.scrollbarH.style.right=s?cr(t.measure)+"px":"0",t.scrollbarH.firstChild.style.width=t.scroller.scrollWidth-t.scroller.clientWidth+t.scrollbarH.clientWidth+"px"):t.scrollbarH.style.display="",o&&s?(t.scrollbarFiller.style.display="block",t.scrollbarFiller.style.height=t.scrollbarFiller.style.width=cr(t.measure)+"px"):t.scrollbarFiller.style.display="",o&&e.options.coverGutterNextToScrollbar&&e.options.fixedGutter?(t.gutterFiller.style.display="block",t.gutterFiller.style.height=cr(t.measure)+"px",t.gutterFiller.style.width=t.gutters.offsetWidth+"px"):t.gutterFiller.style.display="",Dr&&0===cr(t.measure)&&(t.scrollbarV.style.minWidth=t.scrollbarH.style.minHeight=Hr?"18px":"12px")}function p(e,t,n){var r=e.scroller.scrollTop,i=e.wrapper.clientHeight;"number"==typeof n?r=n:n&&(r=n.top,i=n.bottom-n.top),r=Math.floor(r-I(e));var o=Math.ceil(r+i);return{from:gn(t,r),to:gn(t,o)}}function m(e){var t=e.display;if(t.alignWidgets||t.gutters.firstChild&&e.options.fixedGutter){for(var n=y(t)-t.scroller.scrollLeft+e.doc.scrollLeft,r=t.gutters.offsetWidth,i=n+"px",o=t.lineDiv.firstChild;o;o=o.nextSibling)if(o.alignable)for(var s=0,a=o.alignable;s<a.length;++s)a[s].style.left=i;e.options.fixedGutter&&(t.gutters.style.left=n+r+"px")}}function g(e){if(!e.options.lineNumbers)return!1;var t=e.doc,n=v(e.options,t.first+t.size-1),r=e.display;if(n.length!=r.lineNumChars){var i=r.measure.appendChild(rr("div",[rr("div",n)],"CodeMirror-linenumber CodeMirror-gutter-elt")),o=i.firstChild.offsetWidth,s=i.offsetWidth-o;return r.lineGutter.style.width="",r.lineNumInnerWidth=Math.max(o,r.lineGutter.offsetWidth-s),r.lineNumWidth=r.lineNumInnerWidth+s,r.lineNumChars=r.lineNumInnerWidth?n.length:-1,r.lineGutter.style.width=r.lineNumWidth+"px",!0}return!1}function v(e,t){return String(e.lineNumberFormatter(t+e.firstLineNumber))}function y(e){return ar(e.scroller).left-ar(e.sizer).left}function b(e,t,n,r){for(var i,o=e.display.showingFrom,s=e.display.showingTo,a=p(e.display,e.doc,n);k(e,t,a,r)&&(r=!1,i=!0,T(e),h(e),n&&(n=Math.min(e.display.scroller.scrollHeight-e.display.scroller.clientHeight,"number"==typeof n?n:n.top)),a=p(e.display,e.doc,n),!(a.from>=e.display.showingFrom&&a.to<=e.display.showingTo));)t=[];return i&&(zn(e,"update",e),e.display.showingFrom==o&&e.display.showingTo==s||zn(e,"viewportChange",e,e.display.showingFrom,e.display.showingTo)),i}function k(e,t,n,r){var i=e.display,o=e.doc;if(!i.wrapper.clientWidth)return i.showingFrom=i.showingTo=o.first,void(i.viewOffset=0);if(!(!r&&0==t.length&&n.from>i.showingFrom&&n.to<i.showingTo)){g(e)&&(t=[{from:o.first,to:o.first+o.size}]);var s=i.sizer.style.marginLeft=i.gutters.offsetWidth+"px";i.scrollbarH.style.left=e.options.fixedGutter?s:"0";var a=1/0;if(e.options.lineNumbers)for(var l=0;l<t.length;++l)if(t[l].diff){a=t[l].from;break}var c=o.first+o.size,u=Math.max(n.from-e.options.viewportMargin,o.first),d=Math.min(c,n.to+e.options.viewportMargin);if(i.showingFrom<u&&u-i.showingFrom<20&&(u=Math.max(o.first,i.showingFrom)),i.showingTo>d&&i.showingTo-d<20&&(d=Math.min(c,i.showingTo)),Gr)for(u=mn(Rt(o,dn(o,u)));d<c&&Pt(o,dn(o,d));)++d;var f=[{from:Math.max(i.showingFrom,o.first),to:Math.min(i.showingTo,c)}];if(f=f[0].from>=f[0].to?[]:C(f,t),Gr)for(var l=0;l<f.length;++l)for(var h,p=f[l];h=Wt(dn(o,p.to-1));){var m=h.find().from.line;if(!(m>p.from)){f.splice(l--,1);break}p.to=m}for(var v=0,l=0;l<f.length;++l){var p=f[l];p.from<u&&(p.from=u),p.to>d&&(p.to=d),p.from>=p.to?f.splice(l--,1):v+=p.to-p.from}if(!r&&v==d-u&&u==i.showingFrom&&d==i.showingTo)return void w(e);f.sort(function(e,t){return e.from-t.from});try{var y=document.activeElement}catch(b){}v<.7*(d-u)&&(i.lineDiv.style.display="none"),L(e,u,d,f,a),i.lineDiv.style.display="",y&&document.activeElement!=y&&y.offsetHeight&&y.focus();var k=u!=i.showingFrom||d!=i.showingTo||i.lastSizeC!=i.wrapper.clientHeight;return k&&(i.lastSizeC=i.wrapper.clientHeight,E(e,400)),i.showingFrom=u,i.showingTo=d,x(e),w(e),!0}}function x(e){for(var t,n=e.display,r=n.lineDiv.offsetTop,i=n.lineDiv.firstChild;i;i=i.nextSibling)if(i.lineObj){if(Lr){var o=i.offsetTop+i.offsetHeight;t=o-r,r=o}else{var s=ar(i);t=s.bottom-s.top}var a=i.lineObj.height-t;if(t<2&&(t=te(n)),a>.001||a<-.001){pn(i.lineObj,t);var l=i.lineObj.widgets;if(l)for(var c=0;c<l.length;++c)l[c].height=l[c].node.offsetHeight}}}function w(e){var t=e.display.viewOffset=vn(e,dn(e.doc,e.display.showingFrom));e.display.mover.style.top=t+"px"}function C(e,t){for(var n=0,r=t.length||0;n<r;++n){for(var i=t[n],o=[],s=i.diff||0,a=0,l=e.length;a<l;++a){var c=e[a];i.to<=c.from&&i.diff?o.push({from:c.from+s,to:c.to+s}):i.to<=c.from||i.from>=c.to?o.push(c):(i.from>c.from&&o.push({from:c.from,to:i.from}),i.to<c.to&&o.push({from:i.to+s,to:c.to+s}))}e=o}return e}function _(e){for(var t=e.display,n={},r={},i=t.gutters.firstChild,o=0;i;i=i.nextSibling,++o)n[e.options.gutters[o]]=i.offsetLeft,r[e.options.gutters[o]]=i.offsetWidth;return{fixedPos:y(t),gutterTotalWidth:t.gutters.offsetWidth,gutterLeft:n,gutterWidth:r,wrapperWidth:t.wrapper.clientWidth}}function L(e,t,n,r,i){function o(t){var n=t.nextSibling;return $r&&Rr&&e.display.currentWheelTarget==t?(t.style.display="none",t.lineObj=null):t.parentNode.removeChild(t),n}var s=_(e),a=e.display,l=e.options.lineNumbers;r.length||$r&&e.display.currentWheelTarget||ir(a.lineDiv);var c=a.lineDiv,u=c.firstChild,d=r.shift(),f=t;for(e.doc.iter(t,n,function(t){if(d&&d.to==f&&(d=r.shift()),Pt(e.doc,t)){if(0!=t.height&&pn(t,0),t.widgets&&u.previousSibling)for(var n=0;n<t.widgets.length;++n){var a=t.widgets[n];if(a.showIfHidden){var h=u.previousSibling;if(/pre/i.test(h.nodeName)){var p=rr("div",null,null,"position: relative");h.parentNode.replaceChild(p,h),p.appendChild(h),h=p}var m=h.appendChild(rr("div",[a.node],"CodeMirror-linewidget"));a.handleMouseEvents||(m.ignoreEvents=!0),$(a,m,h,s)}}}else if(d&&d.from<=f&&d.to>f){for(;u.lineObj!=t;)u=o(u);l&&i<=f&&u.lineNumber&&sr(u.lineNumber,v(e.options,f)),u=u.nextSibling}else{if(t.widgets)for(var g,y=0,b=u;b&&y<20;++y,b=b.nextSibling)if(b.lineObj==t&&/div/i.test(b.nodeName)){g=b;break}var k=S(e,t,f,s,g);if(k!=g)c.insertBefore(k,u);else{for(;u!=g;)u=o(u);u=u.nextSibling}k.lineObj=t}++f});u;)u=o(u)}function S(e,t,n,r,i){var o,s=Jt(e,t),a=t.gutterMarkers,l=e.display;if(!(e.options.lineNumbers||a||t.bgClass||t.wrapClass||t.widgets))return s;if(i){i.alignable=null;for(var c,u=!0,d=0,f=null,h=i.firstChild;h;h=c)if(c=h.nextSibling,/\bCodeMirror-linewidget\b/.test(h.className)){for(var p=0;p<t.widgets.length;++p){var m=t.widgets[p];if(m.node==h.firstChild){m.above||f||(f=h),$(m,h,i,r),++d;break}}if(p==t.widgets.length){u=!1;break}}else i.removeChild(h);i.insertBefore(s,f),u&&d==t.widgets.length&&(o=i,i.className=t.wrapClass||"")}if(o||(o=rr("div",null,t.wrapClass,"position: relative"),o.appendChild(s)),t.bgClass&&o.insertBefore(rr("div",null,t.bgClass+" CodeMirror-linebackground"),o.firstChild),e.options.lineNumbers||a){var g=o.insertBefore(rr("div",null,null,"position: absolute; left: "+(e.options.fixedGutter?r.fixedPos:-r.gutterTotalWidth)+"px"),o.firstChild);if(e.options.fixedGutter&&(o.alignable||(o.alignable=[])).push(g),!e.options.lineNumbers||a&&a["CodeMirror-linenumbers"]||(o.lineNumber=g.appendChild(rr("div",v(e.options,n),"CodeMirror-linenumber CodeMirror-gutter-elt","left: "+r.gutterLeft["CodeMirror-linenumbers"]+"px; width: "+l.lineNumInnerWidth+"px"))),a)for(var y=0;y<e.options.gutters.length;++y){var b=e.options.gutters[y],k=a.hasOwnProperty(b)&&a[b];k&&g.appendChild(rr("div",[k],"CodeMirror-gutter-elt","left: "+r.gutterLeft[b]+"px; width: "+r.gutterWidth[b]+"px"))}}if(Lr&&(o.style.zIndex=2),t.widgets&&o!=i)for(var p=0,x=t.widgets;p<x.length;++p){var m=x[p],w=rr("div",[m.node],"CodeMirror-linewidget");m.handleMouseEvents||(w.ignoreEvents=!0),$(m,w,o,r),m.above?o.insertBefore(w,e.options.lineNumbers&&0!=t.height?g:s):o.appendChild(w),zn(m,"redraw")}return o}function $(e,t,n,r){if(e.noHScroll){(n.alignable||(n.alignable=[])).push(t);var i=r.wrapperWidth;t.style.left=r.fixedPos+"px",e.coverGutter||(i-=r.gutterTotalWidth,t.style.paddingLeft=r.gutterTotalWidth+"px"),t.style.width=i+"px"}e.coverGutter&&(t.style.zIndex=5,t.style.position="relative",e.noHScroll||(t.style.marginLeft=-r.gutterTotalWidth+"px"))}function T(e){var t=e.display,n=Ue(e.doc.sel.from,e.doc.sel.to);if(n||e.options.showCursorWhenSelecting?M(e):t.cursor.style.display=t.otherCursor.style.display="none",n?t.selectionDiv.style.display="none":A(e),e.options.moveInputWithCursor){var r=Q(e,e.doc.sel.head,"div"),i=ar(t.wrapper),o=ar(t.lineDiv);t.inputDiv.style.top=Math.max(0,Math.min(t.wrapper.clientHeight-10,r.top+o.top-i.top))+"px",t.inputDiv.style.left=Math.max(0,Math.min(t.wrapper.clientWidth-10,r.left+o.left-i.left))+"px"}}function M(e){var t=e.display,n=Q(e,e.doc.sel.head,"div");t.cursor.style.left=n.left+"px",t.cursor.style.top=n.top+"px",t.cursor.style.height=Math.max(0,n.bottom-n.top)*e.options.cursorHeight+"px",t.cursor.style.display="",n.other?(t.otherCursor.style.display="",t.otherCursor.style.left=n.other.left+"px",t.otherCursor.style.top=n.other.top+"px",t.otherCursor.style.height=.85*(n.other.bottom-n.other.top)+"px"):t.otherCursor.style.display="none"}function A(e){function t(e,t,n,r){t<0&&(t=0),s.appendChild(rr("div",null,"CodeMirror-selected","position: absolute; left: "+e+"px; top: "+t+"px; width: "+(null==n?a-e:n)+"px; height: "+(r-t)+"px"))}function n(n,r,o){function s(t,r){return Y(e,Be(n,t),"div",d,r)}var c,u,d=dn(i,n),f=d.text.length;return dr(yn(d),r||0,null==o?f:o,function(e,n,i){var d,h,p,m=s(e,"left");if(e==n)d=m,h=p=m.left;else{if(d=s(n-1,"right"),"rtl"==i){var g=m;m=d,d=g}h=m.left,p=d.right}null==r&&0==e&&(h=l),d.top-m.top>3&&(t(h,m.top,null,m.bottom),h=l,m.bottom<d.top&&t(h,m.bottom,null,d.top)),null==o&&n==f&&(p=a),(!c||m.top<c.top||m.top==c.top&&m.left<c.left)&&(c=m),(!u||d.bottom>u.bottom||d.bottom==u.bottom&&d.right>u.right)&&(u=d),h<l+1&&(h=l),t(h,d.top,p-h,d.bottom)}),{start:c,end:u}}var r=e.display,i=e.doc,o=e.doc.sel,s=document.createDocumentFragment(),a=r.lineSpace.offsetWidth,l=R(e.display);if(o.from.line==o.to.line)n(o.from.line,o.from.ch,o.to.ch);else{var c=dn(i,o.from.line),u=dn(i,o.to.line),d=Rt(i,c)==Rt(i,u),f=n(o.from.line,o.from.ch,d?c.text.length:null).end,h=n(o.to.line,d?0:null,o.to.ch).start;d&&(f.top<h.top-2?(t(f.right,f.top,null,f.bottom),t(l,h.top,h.left,h.bottom)):t(f.right,f.top,h.left-f.right,f.bottom)),f.bottom<h.top&&t(l,f.bottom,null,h.top)}or(r.selectionDiv,s),r.selectionDiv.style.display=""}function N(e){if(e.state.focused){var t=e.display;clearInterval(t.blinker);var n=!0;t.cursor.style.visibility=t.otherCursor.style.visibility="",t.blinker=setInterval(function(){t.cursor.style.visibility=t.otherCursor.style.visibility=(n=!n)?"":"hidden"},e.options.cursorBlinkRate)}}function E(e,t){e.doc.mode.startState&&e.doc.frontier<e.display.showingTo&&e.state.highlight.set(t,er(D,e))}function D(e){var t=e.doc;if(t.frontier<t.first&&(t.frontier=t.first),!(t.frontier>=e.display.showingTo)){var n,r=+new Date+e.options.workTime,i=gt(t.mode,O(e,t.frontier)),o=[];t.iter(t.frontier,Math.min(t.first+t.size,e.display.showingTo+500),function(s){if(t.frontier>=e.display.showingFrom){var a=s.styles;s.styles=Xt(e,s,i);for(var l=!a||a.length!=s.styles.length,c=0;!l&&c<a.length;++c)l=a[c]!=s.styles[c];l&&(n&&n.end==t.frontier?n.end++:o.push(n={start:t.frontier,end:t.frontier+1})),s.stateAfter=gt(t.mode,i)}else Qt(e,s,i),s.stateAfter=t.frontier%5==0?gt(t.mode,i):null;if(++t.frontier,+new Date>r)return E(e,e.options.workDelay),!0}),o.length&&oe(e,function(){for(var e=0;e<o.length;++e)le(this,o[e].start,o[e].end)})()}}function H(e,t,n){for(var r,i,o=e.doc,s=t,a=t-100;s>a;--s){if(s<=o.first)return o.first;var l=dn(o,s-1);if(l.stateAfter&&(!n||s<=o.frontier))return s;var c=Vn(l.text,null,e.options.tabSize);(null==i||r>c)&&(i=s-1,r=c)}return i}function O(e,t,n){var r=e.doc,i=e.display;if(!r.mode.startState)return!0;var o=H(e,t,n),s=o>r.first&&dn(r,o-1).stateAfter;return s=s?gt(r.mode,s):vt(r.mode),r.iter(o,t,function(n){Qt(e,n,s);var a=o==t-1||o%5==0||o>=i.showingFrom&&o<i.showingTo;n.stateAfter=a?gt(r.mode,s):null,++o}),s}function I(e){return e.lineSpace.offsetTop}function W(e){return e.mover.offsetHeight-e.lineSpace.offsetHeight}function R(e){var t=or(e.measure,rr("pre",null,null,"text-align: left")).appendChild(rr("span","x"));return t.offsetLeft}function P(e,t,n,r,i){var o=-1;r=r||F(e,t);for(var s=n;;s+=o){var a=r[s];if(a)break;o<0&&0==s&&(o=1)}return i=s>n?"left":s<n?"right":i,"left"==i&&a.leftSide?a=a.leftSide:"right"==i&&a.rightSide&&(a=a.rightSide),{left:s<n?a.right:a.left,right:s>n?a.left:a.right,top:a.top,bottom:a.bottom}}function z(e,t){for(var n=e.display.measureLineCache,r=0;r<n.length;++r){var i=n[r];if(i.text==t.text&&i.markedSpans==t.markedSpans&&e.display.scroller.clientWidth==i.width&&i.classes==t.textClass+"|"+t.bgClass+"|"+t.wrapClass)return i}}function j(e,t){var n=z(e,t);n&&(n.text=n.measure=n.markedSpans=null)}function F(e,t){var n=z(e,t);if(n)return n.measure;var r=q(e,t),i=e.display.measureLineCache,o={text:t.text,width:e.display.scroller.clientWidth,markedSpans:t.markedSpans,measure:r,classes:t.textClass+"|"+t.bgClass+"|"+t.wrapClass};return 16==i.length?i[++e.display.measureLineCachePos%16]=o:i.push(o),r}function q(e,t){function n(e){var t=e.top-p.top,n=e.bottom-p.top;n>v&&(n=v),t<0&&(t=0);for(var r=m.length-2;r>=0;r-=2){var i=m[r],o=m[r+1];if(!(i>n||o<t)&&(i<=t&&o>=n||t<=i&&n>=o||Math.min(n,o)-Math.max(t,i)>=n-t>>1)){m[r]=Math.min(t,i),m[r+1]=Math.max(n,o);break}}return r<0&&(r=m.length,m.push(t,n)),{left:e.left-p.left,right:e.right-p.left,top:r,bottom:null}}function r(e){e.bottom=m[e.top+1],e.top=m[e.top]}var i=e.display,o=Jn(t.text.length),s=Jt(e,t,o,!0);if(_r&&!Lr&&!e.options.lineWrapping&&s.childNodes.length>100){for(var a=document.createDocumentFragment(),l=10,c=s.childNodes.length,u=0,d=Math.ceil(c/l);u<d;++u){for(var f=rr("div",null,null,"display: inline-block"),h=0;h<l&&c;++h)f.appendChild(s.firstChild),--c;a.appendChild(f)}s.appendChild(a)}or(i.measure,s);var p=ar(i.lineDiv),m=[],g=Jn(t.text.length),v=s.offsetHeight;Sr&&i.measure.first!=s&&or(i.measure,s);for(var y,u=0;u<o.length;++u)if(y=o[u]){var b=y,k=null;if(/\bCodeMirror-widget\b/.test(y.className)&&y.getClientRects){1==y.firstChild.nodeType&&(b=y.firstChild);var x=b.getClientRects();x.length>1&&(k=g[u]=n(x[0]),k.rightSide=n(x[x.length-1]))}k||(k=g[u]=n(ar(b))),y.measureRight&&(k.right=ar(y.measureRight).left),y.leftSide&&(k.leftSide=n(ar(y.leftSide)))}for(var y,u=0;u<g.length;++u)(y=g[u])&&(r(y),y.leftSide&&r(y.leftSide),y.rightSide&&r(y.rightSide));return g}function B(e,t){var n=!1;if(t.markedSpans)for(var r=0;r<t.markedSpans;++r){var i=t.markedSpans[r];!i.collapsed||null!=i.to&&i.to!=t.text.length||(n=!0)}var o=!n&&z(e,t);if(o)return P(e,t,t.text.length,o.measure,"right").right;var s=Jt(e,t,null,!0),a=s.appendChild(ur(e.display.measure));return or(e.display.measure,s),ar(a).right-ar(e.display.lineDiv).left}function U(e){e.display.measureLineCache.length=e.display.measureLineCachePos=0,e.display.cachedCharWidth=e.display.cachedTextHeight=null,e.options.lineWrapping||(e.display.maxLineChanged=!0),e.display.lineNumChars=null}function V(){return window.pageXOffset||(document.documentElement||document.body).scrollLeft}function G(){return window.pageYOffset||(document.documentElement||document.body).scrollTop}function K(e,t,n,r){if(t.widgets)for(var i=0;i<t.widgets.length;++i)if(t.widgets[i].above){var o=Bt(t.widgets[i]);n.top+=o,n.bottom+=o}if("line"==r)return n;r||(r="local");var s=vn(e,t);if("local"==r?s+=I(e.display):s-=e.display.viewOffset,"page"==r||"window"==r){var a=ar(e.display.lineSpace);s+=a.top+("window"==r?0:G());var l=a.left+("window"==r?0:V());n.left+=l,n.right+=l}return n.top+=s,n.bottom+=s,n}function X(e,t,n){if("div"==n)return t;var r=t.left,i=t.top;if("page"==n)r-=V(),i-=G();else if("local"==n||!n){var o=ar(e.display.sizer);r+=o.left,i+=o.top}var s=ar(e.display.lineSpace);return{left:r-s.left,top:i-s.top}}function Y(e,t,n,r,i){return r||(r=dn(e.doc,t.line)),K(e,r,P(e,r,t.ch,null,i),n)}function Q(e,t,n,r,i){function o(t,o){var s=P(e,r,t,i,o?"right":"left");return o?s.left=s.right:s.right=s.left,K(e,r,s,n)}function s(e,t){var n=a[t],r=n.level%2;return e==fr(n)&&t&&n.level<a[t-1].level?(n=a[--t],e=hr(n)-(n.level%2?0:1),r=!0):e==hr(n)&&t<a.length-1&&n.level<a[t+1].level&&(n=a[++t],e=fr(n)-n.level%2,r=!1),r&&e==n.to&&e>n.from?o(e-1):o(e,r)}r=r||dn(e.doc,t.line),i||(i=F(e,r));var a=yn(r),l=t.ch;if(!a)return o(l);var c=br(a,l),u=s(l,c);return null!=Hi&&(u.other=s(l,Hi)),u}function Z(e,t,n,r){var i=new Be(e,t);return i.xRel=r,n&&(i.outside=!0),i}function J(e,t,n){var r=e.doc;if(n+=e.display.viewOffset,n<0)return Z(r.first,0,!0,-1);var i=gn(r,n),o=r.first+r.size-1;if(i>o)return Z(r.first+r.size-1,dn(r,o).text.length,!0,1);for(t<0&&(t=0);;){var s=dn(r,i),a=ee(e,s,i,t,n),l=Wt(s),c=l&&l.find();if(!l||!(a.ch>c.from.ch||a.ch==c.from.ch&&a.xRel>0))return a;i=c.to.line}}function ee(e,t,n,r,i){function o(r){var i=Q(e,Be(n,r),"line",t,c);return a=!0,s>i.bottom?i.left-l:s<i.top?i.left+l:(a=!1,i.left)}var s=i-vn(e,t),a=!1,l=2*e.display.wrapper.clientWidth,c=F(e,t),u=yn(t),d=t.text.length,f=pr(t),h=mr(t),p=o(f),m=a,g=o(h),v=a;if(r>g)return Z(n,h,v,1);for(;;){if(u?h==f||h==xr(t,f,1):h-f<=1){for(var y=r<p||r-p<=g-r?f:h,b=r-(y==f?p:g);Si.test(t.text.charAt(y));)++y;var k=Z(n,y,y==f?m:v,b<0?-1:b?1:0);return k}var x=Math.ceil(d/2),w=f+x;if(u){w=f;for(var C=0;C<x;++C)w=xr(t,w,1)}var _=o(w);_>r?(h=w,g=_,(v=a)&&(g+=1e3),d=x):(f=w,p=_,m=a,d-=x)}}function te(e){if(null!=e.cachedTextHeight)return e.cachedTextHeight;if(null==jr){jr=rr("pre");for(var t=0;t<49;++t)jr.appendChild(document.createTextNode("x")),jr.appendChild(rr("br"));jr.appendChild(document.createTextNode("x"))}or(e.measure,jr);var n=jr.offsetHeight/50;return n>3&&(e.cachedTextHeight=n),ir(e.measure),n||1}function ne(e){if(null!=e.cachedCharWidth)return e.cachedCharWidth;var t=rr("span","x"),n=rr("pre",[t]);or(e.measure,n);var r=t.offsetWidth;return r>2&&(e.cachedCharWidth=r),r||10}function re(e){e.curOp={changes:[],forceUpdate:!1,updateInput:null,userSelChange:null,textChanged:null,selectionChanged:!1,cursorActivity:!1,updateMaxLine:!1,updateScrollPos:!1,id:++Kr},xi++||(ki=[])}function ie(e){var t=e.curOp,n=e.doc,r=e.display;if(e.curOp=null,t.updateMaxLine&&d(e),r.maxLineChanged&&!e.options.lineWrapping&&r.maxLine){var i=B(e,r.maxLine);r.sizer.style.minWidth=Math.max(0,i+3+wi)+"px",r.maxLineChanged=!1;var o=Math.max(0,r.sizer.offsetLeft+r.sizer.offsetWidth-r.scroller.clientWidth);o<n.scrollLeft&&!t.updateScrollPos&&Ce(e,Math.min(r.scroller.scrollLeft,o),!0)}var s,a;if(t.updateScrollPos)s=t.updateScrollPos;else if(t.selectionChanged&&r.scroller.clientHeight){var l=Q(e,n.sel.head);s=st(e,l.left,l.top,l.left,l.bottom)}(t.changes.length||t.forceUpdate||s&&null!=s.scrollTop)&&(a=b(e,t.changes,s&&s.scrollTop,t.forceUpdate),e.display.scroller.offsetHeight&&(e.doc.scrollTop=e.display.scroller.scrollTop)),!a&&t.selectionChanged&&T(e),t.updateScrollPos?(r.scroller.scrollTop=r.scrollbarV.scrollTop=n.scrollTop=s.scrollTop,r.scroller.scrollLeft=r.scrollbarH.scrollLeft=n.scrollLeft=s.scrollLeft,m(e),t.scrollToPos&&it(e,Xe(e.doc,t.scrollToPos),t.scrollToPosMargin)):s&&rt(e),t.selectionChanged&&N(e),e.state.focused&&t.updateInput&&fe(e,t.userSelChange);var c=t.maybeHiddenMarkers,u=t.maybeUnhiddenMarkers;if(c)for(var f=0;f<c.length;++f)c[f].lines.length||Pn(c[f],"hide");if(u)for(var f=0;f<u.length;++f)u[f].lines.length&&Pn(u[f],"unhide");var h;if(--xi||(h=ki,ki=null),t.textChanged&&Pn(e,"change",e,t.textChanged),t.cursorActivity&&Pn(e,"cursorActivity",e),h)for(var f=0;f<h.length;++f)h[f]()}function oe(e,t){return function(){var n=e||this,r=!n.curOp;r&&re(n);try{var i=t.apply(n,arguments)}finally{r&&ie(n)}return i}}function se(e){return function(){var t,n=this.cm&&!this.cm.curOp;n&&re(this.cm);try{t=e.apply(this,arguments)}finally{n&&ie(this.cm)}return t}}function ae(e,t){var n,r=!e.curOp;r&&re(e);try{n=t()}finally{r&&ie(e)}return n}function le(e,t,n,r){null==t&&(t=e.doc.first),null==n&&(n=e.doc.first+e.doc.size),e.curOp.changes.push({from:t,to:n,diff:r})}function ce(e){e.display.pollingFast||e.display.poll.set(e.options.pollInterval,function(){de(e),e.state.focused&&ce(e)})}function ue(e){function t(){var r=de(e);r||n?(e.display.pollingFast=!1,ce(e)):(n=!0,e.display.poll.set(60,t))}var n=!1;e.display.pollingFast=!0,e.display.poll.set(20,t)}function de(e){var t=e.display.input,n=e.display.prevInput,r=e.doc,i=r.sel;if(!e.state.focused||Ni(t)||pe(e)||e.state.disableInput)return!1;var o=t.value;if(o==n&&Ue(i.from,i.to))return!1;if(_r&&!Sr&&e.display.inputHasSelection===o)return fe(e,!0),!1;var s=!e.curOp;s&&re(e),i.shift=!1;for(var a=0,l=Math.min(n.length,o.length);a<l&&n.charCodeAt(a)==o.charCodeAt(a);)++a;var c=i.from,u=i.to;a<n.length?c=Be(c.line,c.ch-(n.length-a)):e.state.overwrite&&Ue(c,u)&&!e.state.pasteIncoming&&(u=Be(u.line,Math.min(dn(r,u.line).text.length,u.ch+(o.length-a))));var d=e.curOp.updateInput,f={from:c,to:u,text:Ai(o.slice(a)),origin:e.state.pasteIncoming?"paste":"+input"};return We(e.doc,f,"end"),e.curOp.updateInput=d,zn(e,"inputRead",e,f),o.length>1e3||o.indexOf("\n")>-1?t.value=e.display.prevInput="":e.display.prevInput=o,s&&ie(e),e.state.pasteIncoming=!1,!0}function fe(e,t){var n,r,i=e.doc;if(Ue(i.sel.from,i.sel.to))t&&(e.display.prevInput=e.display.input.value="",_r&&!Sr&&(e.display.inputHasSelection=null));else{e.display.prevInput="",n=Ei&&(i.sel.to.line-i.sel.from.line>100||(r=e.getSelection()).length>1e3);var o=n?"-":r||e.getSelection();e.display.input.value=o,e.state.focused&&Xn(e.display.input),_r&&!Sr&&(e.display.inputHasSelection=o)}e.display.inaccurateSelection=n}function he(e){if("nocursor"!=e.options.readOnly&&(!Wr||document.activeElement!=e.display.input))try{e.display.input.focus()}catch(t){}}function pe(e){return e.options.readOnly||e.doc.cantEdit}function me(e){function t(){e.state.focused&&setTimeout(er(he,e),0)}function n(){null==a&&(a=setTimeout(function(){a=null,s.cachedCharWidth=s.cachedTextHeight=Ti=null,U(e),ae(e,er(le,e))},100))}function r(){for(var e=s.wrapper.parentNode;e&&e!=document.body;e=e.parentNode);e?setTimeout(r,5e3):Rn(window,"resize",n)}function i(t){jn(e,t)||e.options.onDragEvent&&e.options.onDragEvent(e,An(t))||Hn(t)}function o(){s.inaccurateSelection&&(s.prevInput="",s.inaccurateSelection=!1,s.input.value=e.getSelection(),Xn(s.input))}var s=e.display;Wn(s.scroller,"mousedown",oe(e,ye)),_r?Wn(s.scroller,"dblclick",oe(e,function(t){if(!jn(e,t)){var n=ve(e,t);if(n&&!be(e,t)&&!ge(e.display,t)){Nn(t);var r=ht(dn(e.doc,n.line).text,n);Ze(e.doc,r.from,r.to)}}})):Wn(s.scroller,"dblclick",function(t){jn(e,t)||Nn(t)}),Wn(s.lineSpace,"selectstart",function(e){ge(s,e)||Nn(e)}),Ur||Wn(s.scroller,"contextmenu",function(t){De(e,t)}),Wn(s.scroller,"scroll",function(){s.scroller.clientHeight&&(we(e,s.scroller.scrollTop),Ce(e,s.scroller.scrollLeft,!0),Pn(e,"scroll",e))}),Wn(s.scrollbarV,"scroll",function(){s.scroller.clientHeight&&we(e,s.scrollbarV.scrollTop)}),Wn(s.scrollbarH,"scroll",function(){s.scroller.clientHeight&&Ce(e,s.scrollbarH.scrollLeft)}),Wn(s.scroller,"mousewheel",function(t){_e(e,t)}),Wn(s.scroller,"DOMMouseScroll",function(t){_e(e,t)}),Wn(s.scrollbarH,"mousedown",t),Wn(s.scrollbarV,"mousedown",t),Wn(s.wrapper,"scroll",function(){s.wrapper.scrollTop=s.wrapper.scrollLeft=0});var a;Wn(window,"resize",n),setTimeout(r,5e3),Wn(s.input,"keyup",oe(e,function(t){jn(e,t)||e.options.onKeyEvent&&e.options.onKeyEvent(e,An(t))||16==t.keyCode&&(e.doc.sel.shift=!1)})),Wn(s.input,"input",er(ue,e)),Wn(s.input,"keydown",oe(e,Me)),Wn(s.input,"keypress",oe(e,Ae)),Wn(s.input,"focus",er(Ne,e)),Wn(s.input,"blur",er(Ee,e)),e.options.dragDrop&&(Wn(s.scroller,"dragstart",function(t){xe(e,t)}),Wn(s.scroller,"dragenter",i),Wn(s.scroller,"dragover",i),Wn(s.scroller,"drop",oe(e,ke))),Wn(s.scroller,"paste",function(t){ge(s,t)||(he(e),ue(e))}),Wn(s.input,"paste",function(){e.state.pasteIncoming=!0,ue(e)}),Wn(s.input,"cut",o),Wn(s.input,"copy",o),Er&&Wn(s.sizer,"mouseup",function(){document.activeElement==s.input&&s.input.blur(),he(e)})}function ge(e,t){for(var n=On(t);n!=e.wrapper;n=n.parentNode)if(!n||n.ignoreEvents||n.parentNode==e.sizer&&n!=e.mover)return!0}function ve(e,t,n){var r=e.display;if(!n){var i=On(t);if(i==r.scrollbarH||i==r.scrollbarH.firstChild||i==r.scrollbarV||i==r.scrollbarV.firstChild||i==r.scrollbarFiller||i==r.gutterFiller)return null}var o,s,a=ar(r.lineSpace);try{o=t.clientX,s=t.clientY}catch(t){return null}return J(e,o-a.left,s-a.top)}function ye(e){function t(e){if(!Ue(v,e)){if(v=e,"single"==u)return void Ze(i.doc,Xe(s,l),e);if(m=Xe(s,m),g=Xe(s,g),"double"==u){var t=ht(dn(s,e.line).text,e);Ve(e,m)?Ze(i.doc,t.from,g):Ze(i.doc,m,t.to)}else"triple"==u&&(Ve(e,m)?Ze(i.doc,g,Xe(s,Be(e.line,0))):Ze(i.doc,m,Xe(s,Be(e.line+1,0))))}}function n(e){var r=++b,a=ve(i,e,!0);if(a)if(Ue(a,f)){var l=e.clientY<y.top?-20:e.clientY>y.bottom?20:0;l&&setTimeout(oe(i,function(){b==r&&(o.scroller.scrollTop+=l,n(e))}),50)}else{i.state.focused||Ne(i),f=a,t(a);var c=p(o,s);(a.line>=c.to||a.line<c.from)&&setTimeout(oe(i,function(){b==r&&n(e)}),150)}}function r(e){b=1/0,Nn(e),he(i),Rn(document,"mousemove",k),Rn(document,"mouseup",x)}if(!jn(this,e)){var i=this,o=i.display,s=i.doc,a=s.sel;if(a.shift=e.shiftKey,ge(o,e))return void($r||(o.scroller.draggable=!1,setTimeout(function(){o.scroller.draggable=!0},100)));if(!be(i,e)){var l=ve(i,e);switch(In(e)){case 3:return void(Ur&&De.call(i,i,e));case 2:return l&&Ze(i.doc,l),setTimeout(er(he,i),20),void Nn(e)}if(!l)return void(On(e)==o.scroller&&Nn(e));i.state.focused||Ne(i);var c=+new Date,u="single";if(qr&&qr.time>c-400&&Ue(qr.pos,l))u="triple",Nn(e),setTimeout(er(he,i),20),pt(i,l.line);else if(Fr&&Fr.time>c-400&&Ue(Fr.pos,l)){u="double",qr={time:c,pos:l},Nn(e);var d=ht(dn(s,l.line).text,l);Ze(i.doc,d.from,d.to)}else Fr={time:c,pos:l};var f=l;if(i.options.dragDrop&&$i&&!pe(i)&&!Ue(a.from,a.to)&&!Ve(l,a.from)&&!Ve(a.to,l)&&"single"==u){var h=oe(i,function(t){$r&&(o.scroller.draggable=!1),i.state.draggingText=!1,Rn(document,"mouseup",h),Rn(o.scroller,"drop",h),Math.abs(e.clientX-t.clientX)+Math.abs(e.clientY-t.clientY)<10&&(Nn(t),Ze(i.doc,l),he(i))});return $r&&(o.scroller.draggable=!0),i.state.draggingText=h,o.scroller.dragDrop&&o.scroller.dragDrop(),Wn(document,"mouseup",h),void Wn(o.scroller,"drop",h)}Nn(e),"single"==u&&Ze(i.doc,Xe(s,l));var m=a.from,g=a.to,v=l,y=ar(o.wrapper),b=0,k=oe(i,function(e){_r||In(e)?n(e):r(e)}),x=oe(i,r);Wn(document,"mousemove",k),Wn(document,"mouseup",x)}}}function be(e,t){var n=e.display;try{var r=t.clientX,i=t.clientY}catch(t){return!1}if(r>=Math.floor(ar(n.gutters).right))return!1;if(Nn(t),!qn(e,"gutterClick"))return!0;var o=ar(n.lineDiv);if(i>o.bottom)return!0;i-=o.top-n.viewOffset;for(var s=0;s<e.options.gutters.length;++s){var a=n.gutters.childNodes[s];if(a&&ar(a).right>=r){var l=gn(e.doc,i),c=e.options.gutters[s];zn(e,"gutterClick",e,l,c,t);break}}return!0}function ke(e){var t=this;if(!(jn(t,e)||ge(t.display,e)||t.options.onDragEvent&&t.options.onDragEvent(t,An(e)))){Nn(e),_r&&(Xr=+new Date);var n=ve(t,e,!0),r=e.dataTransfer.files;if(n&&!pe(t))if(r&&r.length&&window.FileReader&&window.File)for(var i=r.length,o=Array(i),s=0,a=function(e,r){var a=new FileReader;a.onload=function(){o[r]=a.result,++s==i&&(n=Xe(t.doc,n),We(t.doc,{from:n,to:n,text:Ai(o.join("\n")),origin:"paste"},"around"))},a.readAsText(e)},l=0;l<i;++l)a(r[l],l);else{if(t.state.draggingText&&!Ve(n,t.doc.sel.from)&&!Ve(t.doc.sel.to,n))return t.state.draggingText(e),void setTimeout(er(he,t),20);try{var o=e.dataTransfer.getData("Text");if(o){var c=t.doc.sel.from,u=t.doc.sel.to;et(t.doc,n,n),t.state.draggingText&&qe(t.doc,"",c,u,"paste"),t.replaceSelection(o,null,"paste"),he(t),Ne(t)}}catch(e){}}}}function xe(e,t){if(_r&&(!e.state.draggingText||+new Date-Xr<100))return void Hn(t);if(!jn(e,t)&&!ge(e.display,t)){var n=e.getSelection();if(t.dataTransfer.setData("Text",n),t.dataTransfer.setDragImage&&!Nr){var r=rr("img",null,null,"position: fixed; left: 0; top: 0;");Ar&&(r.width=r.height=1,e.display.wrapper.appendChild(r),r._top=r.offsetTop),t.dataTransfer.setDragImage(r,0,0),Ar&&r.parentNode.removeChild(r)}}}function we(e,t){Math.abs(e.doc.scrollTop-t)<2||(e.doc.scrollTop=t,Cr||b(e,[],t),e.display.scroller.scrollTop!=t&&(e.display.scroller.scrollTop=t),e.display.scrollbarV.scrollTop!=t&&(e.display.scrollbarV.scrollTop=t),Cr&&b(e,[]),E(e,100))}function Ce(e,t,n){(n?t==e.doc.scrollLeft:Math.abs(e.doc.scrollLeft-t)<2)||(t=Math.min(t,e.display.scroller.scrollWidth-e.display.scroller.clientWidth),e.doc.scrollLeft=t,m(e),e.display.scroller.scrollLeft!=t&&(e.display.scroller.scrollLeft=t),
e.display.scrollbarH.scrollLeft!=t&&(e.display.scrollbarH.scrollLeft=t))}function _e(e,t){var n=t.wheelDeltaX,r=t.wheelDeltaY;null==n&&t.detail&&t.axis==t.HORIZONTAL_AXIS&&(n=t.detail),null==r&&t.detail&&t.axis==t.VERTICAL_AXIS?r=t.detail:null==r&&(r=t.wheelDelta);var i=e.display,o=i.scroller;if(n&&o.scrollWidth>o.clientWidth||r&&o.scrollHeight>o.clientHeight){if(r&&Rr&&$r)for(var s=t.target;s!=o;s=s.parentNode)if(s.lineObj){e.display.currentWheelTarget=s;break}if(n&&!Cr&&!Ar&&null!=Qr)return r&&we(e,Math.max(0,Math.min(o.scrollTop+r*Qr,o.scrollHeight-o.clientHeight))),Ce(e,Math.max(0,Math.min(o.scrollLeft+n*Qr,o.scrollWidth-o.clientWidth))),Nn(t),void(i.wheelStartX=null);if(r&&null!=Qr){var a=r*Qr,l=e.doc.scrollTop,c=l+i.wrapper.clientHeight;a<0?l=Math.max(0,l+a-50):c=Math.min(e.doc.height,c+a+50),b(e,[],{top:l,bottom:c})}Yr<20&&(null==i.wheelStartX?(i.wheelStartX=o.scrollLeft,i.wheelStartY=o.scrollTop,i.wheelDX=n,i.wheelDY=r,setTimeout(function(){if(null!=i.wheelStartX){var e=o.scrollLeft-i.wheelStartX,t=o.scrollTop-i.wheelStartY,n=t&&i.wheelDY&&t/i.wheelDY||e&&i.wheelDX&&e/i.wheelDX;i.wheelStartX=i.wheelStartY=null,n&&(Qr=(Qr*Yr+n)/(Yr+1),++Yr)}},200)):(i.wheelDX+=n,i.wheelDY+=r))}}function Le(e,t,n){if("string"==typeof t&&(t=ui[t],!t))return!1;e.display.pollingFast&&de(e)&&(e.display.pollingFast=!1);var r=e.doc,i=r.sel.shift,o=!1;try{pe(e)&&(e.state.suppressEdits=!0),n&&(r.sel.shift=!1),o=t(e)!=Ci}finally{r.sel.shift=i,e.state.suppressEdits=!1}return o}function Se(e){var t=e.state.keyMaps.slice(0);return e.options.extraKeys&&t.push(e.options.extraKeys),t.push(e.options.keyMap),t}function $e(e,t){var n=yt(e.options.keyMap),r=n.auto;clearTimeout(Zr),r&&!kt(t)&&(Zr=setTimeout(function(){yt(e.options.keyMap)==n&&(e.options.keyMap=r.call?r.call(null,e):r,s(e))},50));var i=xt(t,!0),o=!1;if(!i)return!1;var a=Se(e);return o=t.shiftKey?bt("Shift-"+i,a,function(t){return Le(e,t,!0)})||bt(i,a,function(t){if("string"==typeof t?/^go[A-Z]/.test(t):t.motion)return Le(e,t)}):bt(i,a,function(t){return Le(e,t)}),o&&(Nn(t),N(e),Sr&&(t.oldKeyCode=t.keyCode,t.keyCode=0),zn(e,"keyHandled",e,i,t)),o}function Te(e,t,n){var r=bt("'"+n+"'",Se(e),function(t){return Le(e,t,!0)});return r&&(Nn(t),N(e),zn(e,"keyHandled",e,"'"+n+"'",t)),r}function Me(e){var t=this;if(t.state.focused||Ne(t),_r&&27==e.keyCode&&(e.returnValue=!1),!(jn(t,e)||t.options.onKeyEvent&&t.options.onKeyEvent(t,An(e)))){var n=e.keyCode;t.doc.sel.shift=16==n||e.shiftKey;var r=$e(t,e);Ar&&(ei=r?n:null,!r&&88==n&&!Ei&&(Rr?e.metaKey:e.ctrlKey)&&t.replaceSelection(""))}}function Ae(e){var t=this;if(!(jn(t,e)||t.options.onKeyEvent&&t.options.onKeyEvent(t,An(e)))){var n=e.keyCode,r=e.charCode;if(Ar&&n==ei)return ei=null,void Nn(e);if(!(Ar&&(!e.which||e.which<10)||Er)||!$e(t,e)){var i=String.fromCharCode(null==r?n:r);this.options.electricChars&&this.doc.mode.electricChars&&this.options.smartIndent&&!pe(this)&&this.doc.mode.electricChars.indexOf(i)>-1&&setTimeout(oe(t,function(){ct(t,t.doc.sel.to.line,"smart")}),75),Te(t,e,i)||(_r&&!Sr&&(t.display.inputHasSelection=null),ue(t))}}}function Ne(e){"nocursor"!=e.options.readOnly&&(e.state.focused||(Pn(e,"focus",e),e.state.focused=!0,e.display.wrapper.className.search(/\bCodeMirror-focused\b/)==-1&&(e.display.wrapper.className+=" CodeMirror-focused"),fe(e,!0)),ce(e),N(e))}function Ee(e){e.state.focused&&(Pn(e,"blur",e),e.state.focused=!1,e.display.wrapper.className=e.display.wrapper.className.replace(" CodeMirror-focused","")),clearInterval(e.display.blinker),setTimeout(function(){e.state.focused||(e.doc.sel.shift=!1)},150)}function De(e,t){function n(){if(null!=i.input.selectionStart){var e=i.input.value=" "+(Ue(o.from,o.to)?"":i.input.value);i.prevInput=" ",i.input.selectionStart=1,i.input.selectionEnd=e.length}}function r(){if(i.inputDiv.style.position="relative",i.input.style.cssText=l,Sr&&(i.scrollbarV.scrollTop=i.scroller.scrollTop=a),ce(e),null!=i.input.selectionStart){_r&&!Sr||n(),clearTimeout(Jr);var t=0,r=function(){" "==i.prevInput&&0==i.input.selectionStart?oe(e,ui.selectAll)(e):t++<10?Jr=setTimeout(r,500):fe(e)};Jr=setTimeout(r,200)}}if(!jn(e,t,"contextmenu")){var i=e.display,o=e.doc.sel;if(!ge(i,t)){var s=ve(e,t),a=i.scroller.scrollTop;if(s&&!Ar){(Ue(o.from,o.to)||Ve(s,o.from)||!Ve(s,o.to))&&oe(e,et)(e.doc,s,s);var l=i.input.style.cssText;if(i.inputDiv.style.position="absolute",i.input.style.cssText="position: fixed; width: 30px; height: 30px; top: "+(t.clientY-5)+"px; left: "+(t.clientX-5)+"px; z-index: 1000; background: white; outline: none;border-width: 0; outline: none; overflow: hidden; opacity: .05; -ms-opacity: .05; filter: alpha(opacity=5);",he(e),fe(e,!0),Ue(o.from,o.to)&&(i.input.value=i.prevInput=" "),_r&&!Sr&&n(),Ur){Hn(t);var c=function(){Rn(window,"mouseup",c),setTimeout(r,20)};Wn(window,"mouseup",c)}else setTimeout(r,50)}}}}function He(e,t,n){if(!Ve(t.from,n))return Xe(e,n);var r=t.text.length-1-(t.to.line-t.from.line);if(n.line>t.to.line+r){var i=n.line-r,o=e.first+e.size-1;return i>o?Be(o,dn(e,o).text.length):Ye(n,dn(e,i).text.length)}if(n.line==t.to.line+r)return Ye(n,Kn(t.text).length+(1==t.text.length?t.from.ch:0)+dn(e,t.to.line).text.length-t.to.ch);var s=n.line-t.from.line;return Ye(n,t.text[s].length+(s?0:t.from.ch))}function Oe(e,t,n){if(n&&"object"==typeof n)return{anchor:He(e,t,n.anchor),head:He(e,t,n.head)};if("start"==n)return{anchor:t.from,head:t.from};var r=ti(t);if("around"==n)return{anchor:t.from,head:r};if("end"==n)return{anchor:r,head:r};var i=function(e){if(Ve(e,t.from))return e;if(!Ve(t.to,e))return r;var n=e.line+t.text.length-(t.to.line-t.from.line)-1,i=e.ch;return e.line==t.to.line&&(i+=r.ch-t.to.ch),Be(n,i)};return{anchor:i(e.sel.anchor),head:i(e.sel.head)}}function Ie(e,t,n){var r={canceled:!1,from:t.from,to:t.to,text:t.text,origin:t.origin,cancel:function(){this.canceled=!0}};return n&&(r.update=function(t,n,r,i){t&&(this.from=Xe(e,t)),n&&(this.to=Xe(e,n)),r&&(this.text=r),void 0!==i&&(this.origin=i)}),Pn(e,"beforeChange",e,r),e.cm&&Pn(e.cm,"beforeChange",e.cm,r),r.canceled?null:{from:r.from,to:r.to,text:r.text,origin:r.origin}}function We(e,t,n,r){if(e.cm){if(!e.cm.curOp)return oe(e.cm,We)(e,t,n,r);if(e.cm.state.suppressEdits)return}if(!(qn(e,"beforeChange")||e.cm&&qn(e.cm,"beforeChange"))||(t=Ie(e,t,!0))){var i=Vr&&!r&&Ht(e,t.from,t.to);if(i){for(var o=i.length-1;o>=1;--o)Re(e,{from:i[o].from,to:i[o].to,text:[""]});i.length&&Re(e,{from:i[0].from,to:i[0].to,text:t.text},n)}else Re(e,t,n)}}function Re(e,t,n){var r=Oe(e,t,n);wn(e,t,r,e.cm?e.cm.curOp.id:NaN),je(e,t,r,Et(e,t));var i=[];cn(e,function(e,n){n||Yn(i,e.history)!=-1||(Tn(e.history,t),i.push(e.history)),je(e,t,null,Et(e,t))})}function Pe(e,t){if(!e.cm||!e.cm.state.suppressEdits){var n=e.history,r=("undo"==t?n.done:n.undone).pop();if(r){var i={changes:[],anchorBefore:r.anchorAfter,headBefore:r.headAfter,anchorAfter:r.anchorBefore,headAfter:r.headBefore,generation:n.generation};("undo"==t?n.undone:n.done).push(i),n.generation=r.generation||++n.maxGeneration;for(var o=qn(e,"beforeChange")||e.cm&&qn(e.cm,"beforeChange"),s=r.changes.length-1;s>=0;--s){var a=r.changes[s];if(a.origin=t,o&&!Ie(e,a,!1))return void(("undo"==t?n.done:n.undone).length=0);i.changes.push(xn(e,a));var l=s?Oe(e,a,null):{anchor:r.anchorBefore,head:r.headBefore};je(e,a,l,Dt(e,a));var c=[];cn(e,function(e,t){t||Yn(c,e.history)!=-1||(Tn(e.history,a),c.push(e.history)),je(e,a,null,Dt(e,a))})}}}}function ze(e,t){function n(e){return Be(e.line+t,e.ch)}e.first+=t,e.cm&&le(e.cm,e.first,e.first,t),e.sel.head=n(e.sel.head),e.sel.anchor=n(e.sel.anchor),e.sel.from=n(e.sel.from),e.sel.to=n(e.sel.to)}function je(e,t,n,r){if(e.cm&&!e.cm.curOp)return oe(e.cm,je)(e,t,n,r);if(t.to.line<e.first)return void ze(e,t.text.length-1-(t.to.line-t.from.line));if(!(t.from.line>e.lastLine())){if(t.from.line<e.first){var i=t.text.length-1-(e.first-t.from.line);ze(e,i),t={from:Be(e.first,0),to:Be(t.to.line+i,t.to.ch),text:[Kn(t.text)],origin:t.origin}}var o=e.lastLine();t.to.line>o&&(t={from:t.from,to:Be(o,dn(e,o).text.length),text:[t.text[0]],origin:t.origin}),t.removed=fn(e,t.from,t.to),n||(n=Oe(e,t,null)),e.cm?Fe(e.cm,t,r,n):sn(e,t,r,n)}}function Fe(e,t,n,r){var o=e.doc,s=e.display,a=t.from,l=t.to,c=!1,d=a.line;e.options.lineWrapping||(d=mn(Rt(o,dn(o,a.line))),o.iter(d,l.line+1,function(e){if(e==s.maxLine)return c=!0,!0})),Ve(o.sel.head,t.from)||Ve(t.to,o.sel.head)||(e.curOp.cursorActivity=!0),sn(o,t,n,r,i(e)),e.options.lineWrapping||(o.iter(d,a.line+t.text.length,function(e){var t=u(o,e);t>s.maxLineLength&&(s.maxLine=e,s.maxLineLength=t,s.maxLineChanged=!0,c=!1)}),c&&(e.curOp.updateMaxLine=!0)),o.frontier=Math.min(o.frontier,a.line),E(e,400);var f=t.text.length-(l.line-a.line)-1;if(le(e,a.line,l.line+1,f),qn(e,"change")){var h={from:a,to:l,text:t.text,removed:t.removed,origin:t.origin};if(e.curOp.textChanged){for(var p=e.curOp.textChanged;p.next;p=p.next);p.next=h}else e.curOp.textChanged=h}}function qe(e,t,n,r,i){if(r||(r=n),Ve(r,n)){var o=r;r=n,n=o}"string"==typeof t&&(t=Ai(t)),We(e,{from:n,to:r,text:t,origin:i},null)}function Be(e,t){return this instanceof Be?(this.line=e,void(this.ch=t)):new Be(e,t)}function Ue(e,t){return e.line==t.line&&e.ch==t.ch}function Ve(e,t){return e.line<t.line||e.line==t.line&&e.ch<t.ch}function Ge(e){return Be(e.line,e.ch)}function Ke(e,t){return Math.max(e.first,Math.min(t,e.first+e.size-1))}function Xe(e,t){if(t.line<e.first)return Be(e.first,0);var n=e.first+e.size-1;return t.line>n?Be(n,dn(e,n).text.length):Ye(t,dn(e,t.line).text.length)}function Ye(e,t){var n=e.ch;return null==n||n>t?Be(e.line,t):n<0?Be(e.line,0):e}function Qe(e,t){return t>=e.first&&t<e.first+e.size}function Ze(e,t,n,r){if(e.sel.shift||e.sel.extend){var i=e.sel.anchor;if(n){var o=Ve(t,i);o!=Ve(n,i)?(i=t,t=n):o!=Ve(t,n)&&(t=n)}et(e,i,t,r)}else et(e,t,n||t,r);e.cm&&(e.cm.curOp.userSelChange=!0)}function Je(e,t,n){var r={anchor:t,head:n};return Pn(e,"beforeSelectionChange",e,r),e.cm&&Pn(e.cm,"beforeSelectionChange",e.cm,r),r.anchor=Xe(e,r.anchor),r.head=Xe(e,r.head),r}function et(e,t,n,r,i){if(!i&&qn(e,"beforeSelectionChange")||e.cm&&qn(e.cm,"beforeSelectionChange")){var o=Je(e,t,n);n=o.head,t=o.anchor}var s=e.sel;if(s.goalColumn=null,!i&&Ue(t,s.anchor)||(t=nt(e,t,r,"push"!=i)),!i&&Ue(n,s.head)||(n=nt(e,n,r,"push"!=i)),!Ue(s.anchor,t)||!Ue(s.head,n)){s.anchor=t,s.head=n;var a=Ve(n,t);s.from=a?n:t,s.to=a?t:n,e.cm&&(e.cm.curOp.updateInput=e.cm.curOp.selectionChanged=e.cm.curOp.cursorActivity=!0),zn(e,"cursorActivity",e)}}function tt(e){et(e.doc,e.doc.sel.from,e.doc.sel.to,null,"push")}function nt(e,t,n,r){var i=!1,o=t,s=n||1;e.cantEdit=!1;e:for(;;){var a=dn(e,o.line);if(a.markedSpans)for(var l=0;l<a.markedSpans.length;++l){var c=a.markedSpans[l],u=c.marker;if((null==c.from||(u.inclusiveLeft?c.from<=o.ch:c.from<o.ch))&&(null==c.to||(u.inclusiveRight?c.to>=o.ch:c.to>o.ch))){if(r&&(Pn(u,"beforeCursorEnter"),u.explicitlyCleared)){if(a.markedSpans){--l;continue}break}if(!u.atomic)continue;var d=u.find()[s<0?"from":"to"];if(Ue(d,o)&&(d.ch+=s,d.ch<0?d=d.line>e.first?Xe(e,Be(d.line-1)):null:d.ch>a.text.length&&(d=d.line<e.first+e.size-1?Be(d.line+1,0):null),!d)){if(i)return r?(e.cantEdit=!0,Be(e.first,0)):nt(e,t,n,!0);i=!0,d=t,s=-s}o=d;continue e}}return o}}function rt(e){var t=it(e,e.doc.sel.head,e.options.cursorScrollMargin);if(e.state.focused){var n=e.display,r=ar(n.sizer),i=null;if(t.top+r.top<0?i=!0:t.bottom+r.top>(window.innerHeight||document.documentElement.clientHeight)&&(i=!1),null!=i&&!Or){var o="none"==n.cursor.style.display;o&&(n.cursor.style.display="",n.cursor.style.left=t.left+"px",n.cursor.style.top=t.top-n.viewOffset+"px"),n.cursor.scrollIntoView(i),o&&(n.cursor.style.display="none")}}}function it(e,t,n){for(null==n&&(n=0);;){var r=!1,i=Q(e,t),o=st(e,i.left,i.top-n,i.left,i.bottom+n),s=e.doc.scrollTop,a=e.doc.scrollLeft;if(null!=o.scrollTop&&(we(e,o.scrollTop),Math.abs(e.doc.scrollTop-s)>1&&(r=!0)),null!=o.scrollLeft&&(Ce(e,o.scrollLeft),Math.abs(e.doc.scrollLeft-a)>1&&(r=!0)),!r)return i}}function ot(e,t,n,r,i){var o=st(e,t,n,r,i);null!=o.scrollTop&&we(e,o.scrollTop),null!=o.scrollLeft&&Ce(e,o.scrollLeft)}function st(e,t,n,r,i){var o=e.display,s=te(e.display);n<0&&(n=0);var a=o.scroller.clientHeight-wi,l=o.scroller.scrollTop,c={},u=e.doc.height+W(o),d=n<s,f=i>u-s;if(n<l)c.scrollTop=d?0:n;else if(i>l+a){var h=Math.min(n,(f?u:i)-a);h!=l&&(c.scrollTop=h)}var p=o.scroller.clientWidth-wi,m=o.scroller.scrollLeft;t+=o.gutters.offsetWidth,r+=o.gutters.offsetWidth;var g=o.gutters.offsetWidth,v=t<g+10;return t<m+g||v?(v&&(t=0),c.scrollLeft=Math.max(0,t-10-g)):r>p+m-3&&(c.scrollLeft=r+10-p),c}function at(e,t,n){e.curOp.updateScrollPos={scrollLeft:null==t?e.doc.scrollLeft:t,scrollTop:null==n?e.doc.scrollTop:n}}function lt(e,t,n){var r=e.curOp.updateScrollPos||(e.curOp.updateScrollPos={scrollLeft:e.doc.scrollLeft,scrollTop:e.doc.scrollTop}),i=e.display.scroller;r.scrollTop=Math.max(0,Math.min(i.scrollHeight-i.clientHeight,r.scrollTop+n)),r.scrollLeft=Math.max(0,Math.min(i.scrollWidth-i.clientWidth,r.scrollLeft+t))}function ct(e,t,n,r){var i=e.doc;if(null==n&&(n="add"),"smart"==n)if(e.doc.mode.indent)var o=O(e,t);else n="prev";var s,a=e.options.tabSize,l=dn(i,t),c=Vn(l.text,null,a),u=l.text.match(/^\s*/)[0];if("smart"==n&&(s=e.doc.mode.indent(o,l.text.slice(u.length),l.text),s==Ci)){if(!r)return;n="prev"}"prev"==n?s=t>i.first?Vn(dn(i,t-1).text,null,a):0:"add"==n?s=c+e.options.indentUnit:"subtract"==n?s=c-e.options.indentUnit:"number"==typeof n&&(s=c+n),s=Math.max(0,s);var d="",f=0;if(e.options.indentWithTabs)for(var h=Math.floor(s/a);h;--h)f+=a,d+="\t";f<s&&(d+=Gn(s-f)),d!=u&&qe(e.doc,d,Be(t,0),Be(t,u.length),"+input"),l.stateAfter=null}function ut(e,t,n){var r=t,i=t,o=e.doc;return"number"==typeof t?i=dn(o,Ke(o,t)):r=mn(t),null==r?null:n(i,r)?(le(e,r,r+1),i):null}function dt(e,t,n,r,i){function o(){var t=a+n;return t<e.first||t>=e.first+e.size?d=!1:(a=t,u=dn(e,t))}function s(e){var t=(i?xr:wr)(u,l,n,!0);if(null==t){if(e||!o())return d=!1;l=i?(n<0?mr:pr)(u):n<0?u.text.length:0}else l=t;return!0}var a=t.line,l=t.ch,c=n,u=dn(e,a),d=!0;if("char"==r)s();else if("column"==r)s(!0);else if("word"==r||"group"==r)for(var f=null,h="group"==r,p=!0;!(n<0)||s(!p);p=!1){var m=u.text.charAt(l)||"\n",g=tr(m)?"w":h?/\s/.test(m)?null:"p":null;if(f&&f!=g){n<0&&(n=1,s());break}if(g&&(f=g),n>0&&!s(!p))break}var v=nt(e,Be(a,l),c,!0);return d||(v.hitSide=!0),v}function ft(e,t,n,r){var i,o=e.doc,s=t.left;if("page"==r){var a=Math.min(e.display.wrapper.clientHeight,window.innerHeight||document.documentElement.clientHeight);i=t.top+n*(a-(n<0?1.5:.5)*te(e.display))}else"line"==r&&(i=n>0?t.bottom+3:t.top-3);for(;;){var l=J(e,s,i);if(!l.outside)break;if(n<0?i<=0:i>=o.height){l.hitSide=!0;break}i+=5*n}return l}function ht(e,t){var n=t.ch,r=t.ch;if(e){(t.xRel<0||r==e.length)&&n?--n:++r;for(var i=e.charAt(n),o=tr(i)?tr:/\s/.test(i)?function(e){return/\s/.test(e)}:function(e){return!/\s/.test(e)&&!tr(e)};n>0&&o(e.charAt(n-1));)--n;for(;r<e.length&&o(e.charAt(r));)++r}return{from:Be(t.line,n),to:Be(t.line,r)}}function pt(e,t){Ze(e.doc,Be(t,0),Xe(e.doc,Be(t+1,0)))}function mt(t,n,r,i){e.defaults[t]=n,r&&(ni[t]=i?function(e,t,n){n!=ii&&r(e,t,n)}:r)}function gt(e,t){if(t===!0)return t;if(e.copyState)return e.copyState(t);var n={};for(var r in t){var i=t[r];i instanceof Array&&(i=i.concat([])),n[r]=i}return n}function vt(e,t,n){return!e.startState||e.startState(t,n)}function yt(e){return"string"==typeof e?di[e]:e}function bt(e,t,n){function r(t){t=yt(t);var i=t[e];if(i===!1)return"stop";if(null!=i&&n(i))return!0;if(t.nofallthrough)return"stop";var o=t.fallthrough;if(null==o)return!1;if("[object Array]"!=Object.prototype.toString.call(o))return r(o);for(var s=0,a=o.length;s<a;++s){var l=r(o[s]);if(l)return l}return!1}for(var i=0;i<t.length;++i){var o=r(t[i]);if(o)return"stop"!=o}}function kt(e){var t=Di[e.keyCode];return"Ctrl"==t||"Alt"==t||"Shift"==t||"Mod"==t}function xt(e,t){if(Ar&&34==e.keyCode&&e["char"])return!1;var n=Di[e.keyCode];return null!=n&&!e.altGraphKey&&(e.altKey&&(n="Alt-"+n),(Br?e.metaKey:e.ctrlKey)&&(n="Ctrl-"+n),(Br?e.ctrlKey:e.metaKey)&&(n="Cmd-"+n),!t&&e.shiftKey&&(n="Shift-"+n),n)}function wt(e,t){this.pos=this.start=0,this.string=e,this.tabSize=t||8,this.lastColumnPos=this.lastColumnValue=0}function Ct(e,t){this.lines=[],this.type=t,this.doc=e}function _t(e,t,n,r,i){if(r&&r.shared)return St(e,t,n,r,i);if(e.cm&&!e.cm.curOp)return oe(e.cm,_t)(e,t,n,r,i);var o=new Ct(e,i);if("range"==i&&!Ve(t,n))return o;r&&Zn(r,o),o.replacedWith&&(o.collapsed=!0,o.replacedWith=rr("span",[o.replacedWith],"CodeMirror-widget"),r.handleMouseEvents||(o.replacedWith.ignoreEvents=!0)),o.collapsed&&(Gr=!0),o.addToHistory&&wn(e,{from:t,to:n,origin:"markText"},{head:e.sel.head,anchor:e.sel.anchor},NaN);var s,a,l,c=t.line,u=0,d=e.cm;if(e.iter(c,n.line+1,function(r){d&&o.collapsed&&!d.options.lineWrapping&&Rt(e,r)==d.display.maxLine&&(l=!0);var i={from:null,to:null,marker:o};u+=r.text.length,c==t.line&&(i.from=t.ch,u-=t.ch),c==n.line&&(i.to=n.ch,u-=r.text.length-n.ch),o.collapsed&&(c==n.line&&(a=Ot(r,n.ch)),c==t.line?s=Ot(r,t.ch):pn(r,0)),Mt(r,i),++c}),o.collapsed&&e.iter(t.line,n.line+1,function(t){Pt(e,t)&&pn(t,0)}),o.clearOnEnter&&Wn(o,"beforeCursorEnter",function(){o.clear()}),o.readOnly&&(Vr=!0,(e.history.done.length||e.history.undone.length)&&e.clearHistory()),o.collapsed){if(s!=a)throw new Error("Inserting collapsed marker overlapping an existing one");o.size=u,o.atomic=!0}return d&&(l&&(d.curOp.updateMaxLine=!0),(o.className||o.title||o.startStyle||o.endStyle||o.collapsed)&&le(d,t.line,n.line+1),o.atomic&&tt(d)),o}function Lt(e,t){this.markers=e,this.primary=t;for(var n=0,r=this;n<e.length;++n)e[n].parent=this,Wn(e[n],"clear",function(){r.clear()})}function St(e,t,n,r,i){r=Zn(r),r.shared=!1;var o=[_t(e,t,n,r,i)],s=o[0],a=r.replacedWith;return cn(e,function(e){a&&(r.replacedWith=a.cloneNode(!0)),o.push(_t(e,Xe(e,t),Xe(e,n),r,i));for(var l=0;l<e.linked.length;++l)if(e.linked[l].isParent)return;s=Kn(o)}),new Lt(o,s)}function $t(e,t){if(e)for(var n=0;n<e.length;++n){var r=e[n];if(r.marker==t)return r}}function Tt(e,t){for(var n,r=0;r<e.length;++r)e[r]!=t&&(n||(n=[])).push(e[r]);return n}function Mt(e,t){e.markedSpans=e.markedSpans?e.markedSpans.concat([t]):[t],t.marker.attachLine(e)}function At(e,t,n){if(e)for(var r,i=0;i<e.length;++i){var o=e[i],s=o.marker,a=null==o.from||(s.inclusiveLeft?o.from<=t:o.from<t);if(a||"bookmark"==s.type&&o.from==t&&(!n||!o.marker.insertLeft)){var l=null==o.to||(s.inclusiveRight?o.to>=t:o.to>t);(r||(r=[])).push({from:o.from,to:l?null:o.to,marker:s})}}return r}function Nt(e,t,n){if(e)for(var r,i=0;i<e.length;++i){var o=e[i],s=o.marker,a=null==o.to||(s.inclusiveRight?o.to>=t:o.to>t);if(a||"bookmark"==s.type&&o.from==t&&(!n||o.marker.insertLeft)){var l=null==o.from||(s.inclusiveLeft?o.from<=t:o.from<t);(r||(r=[])).push({from:l?null:o.from-t,to:null==o.to?null:o.to-t,marker:s})}}return r}function Et(e,t){var n=Qe(e,t.from.line)&&dn(e,t.from.line).markedSpans,r=Qe(e,t.to.line)&&dn(e,t.to.line).markedSpans;if(!n&&!r)return null;var i=t.from.ch,o=t.to.ch,s=Ue(t.from,t.to),a=At(n,i,s),l=Nt(r,o,s),c=1==t.text.length,u=Kn(t.text).length+(c?i:0);if(a)for(var d=0;d<a.length;++d){var f=a[d];if(null==f.to){var h=$t(l,f.marker);h?c&&(f.to=null==h.to?null:h.to+u):f.to=i}}if(l)for(var d=0;d<l.length;++d){var f=l[d];if(null!=f.to&&(f.to+=u),null==f.from){var h=$t(a,f.marker);h||(f.from=u,c&&(a||(a=[])).push(f))}else f.from+=u,c&&(a||(a=[])).push(f)}if(c&&a){for(var d=0;d<a.length;++d)null!=a[d].from&&a[d].from==a[d].to&&"bookmark"!=a[d].marker.type&&a.splice(d--,1);a.length||(a=null)}var p=[a];if(!c){var m,g=t.text.length-2;if(g>0&&a)for(var d=0;d<a.length;++d)null==a[d].to&&(m||(m=[])).push({from:null,to:null,marker:a[d].marker});for(var d=0;d<g;++d)p.push(m);p.push(l)}return p}function Dt(e,t){var n=_n(e,t),r=Et(e,t);if(!n)return r;if(!r)return n;for(var i=0;i<n.length;++i){var o=n[i],s=r[i];if(o&&s)e:for(var a=0;a<s.length;++a){for(var l=s[a],c=0;c<o.length;++c)if(o[c].marker==l.marker)continue e;o.push(l)}else s&&(n[i]=s)}return n}function Ht(e,t,n){var r=null;if(e.iter(t.line,n.line+1,function(e){if(e.markedSpans)for(var t=0;t<e.markedSpans.length;++t){var n=e.markedSpans[t].marker;!n.readOnly||r&&Yn(r,n)!=-1||(r||(r=[])).push(n)}}),!r)return null;for(var i=[{from:t,to:n}],o=0;o<r.length;++o)for(var s=r[o],a=s.find(),l=0;l<i.length;++l){var c=i[l];if(!Ve(c.to,a.from)&&!Ve(a.to,c.from)){var u=[l,1];(Ve(c.from,a.from)||!s.inclusiveLeft&&Ue(c.from,a.from))&&u.push({from:c.from,to:a.from}),(Ve(a.to,c.to)||!s.inclusiveRight&&Ue(c.to,a.to))&&u.push({from:a.to,to:c.to}),i.splice.apply(i,u),l+=u.length-1}}return i}function Ot(e,t){var n,r=Gr&&e.markedSpans;if(r)for(var i,o=0;o<r.length;++o)i=r[o],i.marker.collapsed&&(null==i.from||i.from<t)&&(null==i.to||i.to>t)&&(!n||n.width<i.marker.width)&&(n=i.marker);return n}function It(e){return Ot(e,-1)}function Wt(e){return Ot(e,e.text.length+1)}function Rt(e,t){for(var n;n=It(t);)t=dn(e,n.find().from.line);return t}function Pt(e,t){var n=Gr&&t.markedSpans;if(n)for(var r,i=0;i<n.length;++i)if(r=n[i],r.marker.collapsed){if(null==r.from)return!0;if(!r.marker.replacedWith&&0==r.from&&r.marker.inclusiveLeft&&zt(e,t,r))return!0}}function zt(e,t,n){if(null==n.to){var r=n.marker.find().to,i=dn(e,r.line);return zt(e,i,$t(i.markedSpans,n.marker))}if(n.marker.inclusiveRight&&n.to==t.text.length)return!0;for(var o,s=0;s<t.markedSpans.length;++s)if(o=t.markedSpans[s],o.marker.collapsed&&!o.marker.replacedWith&&o.from==n.to&&(o.marker.inclusiveLeft||n.marker.inclusiveRight)&&zt(e,t,o))return!0}function jt(e){var t=e.markedSpans;if(t){for(var n=0;n<t.length;++n)t[n].marker.detachLine(e);e.markedSpans=null}}function Ft(e,t){if(t){for(var n=0;n<t.length;++n)t[n].marker.attachLine(e);e.markedSpans=t}}function qt(e){return function(){var t=!this.cm.curOp;t&&re(this.cm);try{var n=e.apply(this,arguments)}finally{t&&ie(this.cm)}return n}}function Bt(e){return null!=e.height?e.height:(e.node.parentNode&&1==e.node.parentNode.nodeType||or(e.cm.display.measure,rr("div",[e.node],null,"position: relative")),e.height=e.node.offsetHeight)}function Ut(e,t,n,r){var i=new fi(e,n,r);return i.noHScroll&&(e.display.alignWidgets=!0),ut(e,t,function(t){var n=t.widgets||(t.widgets=[]);if(null==i.insertAt?n.push(i):n.splice(Math.min(n.length-1,Math.max(0,i.insertAt)),0,i),i.line=t,!Pt(e.doc,t)||i.showIfHidden){var r=vn(e,t)<e.doc.scrollTop;pn(t,t.height+Bt(i)),r&&lt(e,0,i.height)}return!0}),i}function Vt(e,t,n,r){e.text=t,e.stateAfter&&(e.stateAfter=null),e.styles&&(e.styles=null),null!=e.order&&(e.order=null),jt(e),Ft(e,n);var i=r?r(e):1;i!=e.height&&pn(e,i)}function Gt(e){e.parent=null,jt(e)}function Kt(e,t,n,r,i){var o=n.flattenSpans;null==o&&(o=e.options.flattenSpans);var s,a=0,l=null,c=new wt(t,e.options.tabSize);for(""==t&&n.blankLine&&n.blankLine(r);!c.eol();)c.pos>e.options.maxHighlightLength?(o=!1,c.pos=Math.min(t.length,c.start+5e4),s=null):s=n.token(c,r),o&&l==s||(a<c.start&&i(c.start,l),a=c.start,l=s),c.start=c.pos;a<c.pos&&i(c.pos,l)}function Xt(e,t,n){var r=[e.state.modeGen];Kt(e,t.text,e.doc.mode,n,function(e,t){r.push(e,t)});for(var i=0;i<e.state.overlays.length;++i){var o=e.state.overlays[i],s=1,a=0;Kt(e,t.text,o.mode,!0,function(e,t){for(var n=s;a<e;){var i=r[s];i>e&&r.splice(s,1,e,r[s+1],i),s+=2,a=Math.min(e,i)}if(t)if(o.opaque)r.splice(n,s-n,e,t),s=n+2;else for(;n<s;n+=2){var l=r[n+1];r[n+1]=l?l+" "+t:t}})}return r}function Yt(e,t){return t.styles&&t.styles[0]==e.state.modeGen||(t.styles=Xt(e,t,t.stateAfter=O(e,mn(t)))),t.styles}function Qt(e,t,n){var r=e.doc.mode,i=new wt(t.text,e.options.tabSize);for(""==t.text&&r.blankLine&&r.blankLine(n);!i.eol()&&i.pos<=e.options.maxHighlightLength;)r.token(i,n),i.start=i.pos}function Zt(e){return e?pi[e]||(pi[e]="cm-"+e.replace(/ +/g," cm-")):null}function Jt(e,t,n,r){for(var i,o=t,s=!0;i=It(o);)o=dn(e.doc,i.find().from.line);var a={pre:rr("pre"),col:0,pos:0,measure:null,measuredSomething:!1,cm:e,copyWidgets:r};o.textClass&&(a.pre.className=o.textClass);do{o.text&&(s=!1),a.measure=o==t&&n,a.pos=0,a.addToken=a.measure?tn:en,(_r||$r)&&e.getOption("lineWrapping")&&(a.addToken=nn(a.addToken));var l=on(o,a,Yt(e,o));n&&o==t&&!a.measuredSomething&&(n[0]=a.pre.appendChild(ur(e.display.measure)),a.measuredSomething=!0),l&&(o=dn(e.doc,l.to.line))}while(l);!n||a.measuredSomething||n[0]||(n[0]=a.pre.appendChild(s?rr("span"," "):ur(e.display.measure))),a.pre.firstChild||Pt(e.doc,t)||a.pre.appendChild(document.createTextNode(" "));var c;if(n&&_r&&(c=yn(o))){var u=c.length-1;c[u].from==c[u].to&&--u;var d=c[u],f=c[u-1];if(d.from+1==d.to&&f&&d.level<f.level){var h=n[a.pos-1];h&&h.parentNode.insertBefore(h.measureRight=ur(e.display.measure),h.nextSibling)}}return Pn(e,"renderLine",e,t,a.pre),a.pre}function en(e,t,n,r,i,o){if(t){if(mi.test(t))for(var s=document.createDocumentFragment(),a=0;;){mi.lastIndex=a;var l=mi.exec(t),c=l?l.index-a:t.length-a;if(c&&(s.appendChild(document.createTextNode(t.slice(a,a+c))),e.col+=c),!l)break;if(a+=c+1,"\t"==l[0]){var u=e.cm.options.tabSize,d=u-e.col%u;s.appendChild(rr("span",Gn(d),"cm-tab")),e.col+=d}else{var f=rr("span","•","cm-invalidchar");f.title="\\u"+l[0].charCodeAt(0).toString(16),s.appendChild(f),e.col+=1}}else{e.col+=t.length;var s=document.createTextNode(t)}if(n||r||i||e.measure){var h=n||"";r&&(h+=r),i&&(h+=i);var f=rr("span",[s],h);return o&&(f.title=o),e.pre.appendChild(f)}e.pre.appendChild(s)}}function tn(e,t,n,r,i){for(var o=e.cm.options.lineWrapping,s=0;s<t.length;++s){var a=t.charAt(s),l=0==s;a>="�"&&a<"�"&&s<t.length-1?(a=t.slice(s,s+2),++s):s&&o&&lr(t,s)&&e.pre.appendChild(rr("wbr"));var c=e.measure[e.pos],u=e.measure[e.pos]=en(e,a,n,l&&r,s==t.length-1&&i);c&&(u.leftSide=c.leftSide||c),_r&&o&&" "==a&&s&&!/\s/.test(t.charAt(s-1))&&s<t.length-1&&!/\s/.test(t.charAt(s+1))&&(u.style.whiteSpace="normal"),e.pos+=a.length}t.length&&(e.measuredSomething=!0)}function nn(e){function t(e){for(var t=" ",n=0;n<e.length-2;++n)t+=n%2?" ":" ";return t+=" "}return function(n,r,i,o,s,a){return e(n,r.replace(/ {3,}/,t),i,o,s,a)}}function rn(e,t,n,r){var i=!r&&n.replacedWith;if(i&&(e.copyWidgets&&(i=i.cloneNode(!0)),e.pre.appendChild(i),e.measure)){if(t)e.measure[e.pos]=i;else{var o=e.measure[e.pos]=ur(e.cm.display.measure);"bookmark"!=n.type||n.insertLeft?e.pre.insertBefore(o,i):e.pre.appendChild(o)}e.measuredSomething=!0}e.pos+=t}function on(e,t,n){var r=e.markedSpans,i=e.text,o=0;if(r)for(var s,a,l,c,u,d,f=i.length,h=0,p=1,m="",g=0;;){if(g==h){a=l=c=u="",d=null,g=1/0;for(var v=null,y=0;y<r.length;++y){var b=r[y],k=b.marker;b.from<=h&&(null==b.to||b.to>h)?(null!=b.to&&g>b.to&&(g=b.to,l=""),k.className&&(a+=" "+k.className),k.startStyle&&b.from==h&&(c+=" "+k.startStyle),k.endStyle&&b.to==g&&(l+=" "+k.endStyle),k.title&&!u&&(u=k.title),k.collapsed&&(!d||d.marker.size<k.size)&&(d=b)):b.from>h&&g>b.from&&(g=b.from),"bookmark"==k.type&&b.from==h&&k.replacedWith&&(v=k)}if(d&&(d.from||0)==h&&(rn(t,(null==d.to?f:d.to)-h,d.marker,null==d.from),null==d.to))return d.marker.find();v&&!d&&rn(t,0,v)}if(h>=f)break;for(var x=Math.min(f,g);;){if(m){var w=h+m.length;if(!d){var C=w>x?m.slice(0,x-h):m;t.addToken(t,C,s?s+a:a,c,h+C.length==g?l:"",u)}if(w>=x){m=m.slice(x-h),h=x;break}h=w,c=""}m=i.slice(o,o=n[p++]),s=Zt(n[p++])}}else for(var p=1;p<n.length;p+=2)t.addToken(t,i.slice(o,o=n[p]),Zt(n[p+1]))}function sn(e,t,n,r,i){function o(e){return n?n[e]:null}function s(e,n,r){Vt(e,n,r,i),zn(e,"change",e,t)}var a=t.from,l=t.to,c=t.text,u=dn(e,a.line),d=dn(e,l.line),f=Kn(c),h=o(c.length-1),p=l.line-a.line;if(0==a.ch&&0==l.ch&&""==f){for(var m=0,g=c.length-1,v=[];m<g;++m)v.push(new hi(c[m],o(m),i));s(d,d.text,h),p&&e.remove(a.line,p),v.length&&e.insert(a.line,v)}else if(u==d)if(1==c.length)s(u,u.text.slice(0,a.ch)+f+u.text.slice(l.ch),h);else{for(var v=[],m=1,g=c.length-1;m<g;++m)v.push(new hi(c[m],o(m),i));v.push(new hi(f+u.text.slice(l.ch),h,i)),s(u,u.text.slice(0,a.ch)+c[0],o(0)),e.insert(a.line+1,v)}else if(1==c.length)s(u,u.text.slice(0,a.ch)+c[0]+d.text.slice(l.ch),o(0)),e.remove(a.line+1,p);else{s(u,u.text.slice(0,a.ch)+c[0],o(0)),s(d,f+d.text.slice(l.ch),h);for(var m=1,g=c.length-1,v=[];m<g;++m)v.push(new hi(c[m],o(m),i));p>1&&e.remove(a.line+1,p-1),e.insert(a.line+1,v)}zn(e,"change",e,t),et(e,r.anchor,r.head,null,!0)}function an(e){this.lines=e,this.parent=null;for(var t=0,n=e.length,r=0;t<n;++t)e[t].parent=this,r+=e[t].height;this.height=r}function ln(e){this.children=e;for(var t=0,n=0,r=0,i=e.length;r<i;++r){var o=e[r];t+=o.chunkSize(),n+=o.height,o.parent=this}this.size=t,this.height=n,this.parent=null}function cn(e,t,n){function r(e,i,o){if(e.linked)for(var s=0;s<e.linked.length;++s){var a=e.linked[s];if(a.doc!=i){var l=o&&a.sharedHist;n&&!l||(t(a.doc,l),r(a.doc,e,l))}}}r(e,null,!0)}function un(e,t){if(t.cm)throw new Error("This document is already in use.");e.doc=t,t.cm=e,o(e),n(e),e.options.lineWrapping||d(e),e.options.mode=t.modeOption,le(e)}function dn(e,t){for(t-=e.first;!e.lines;)for(var n=0;;++n){var r=e.children[n],i=r.chunkSize();if(t<i){e=r;break}t-=i}return e.lines[t]}function fn(e,t,n){var r=[],i=t.line;return e.iter(t.line,n.line+1,function(e){var o=e.text;i==n.line&&(o=o.slice(0,n.ch)),i==t.line&&(o=o.slice(t.ch)),r.push(o),++i}),r}function hn(e,t,n){var r=[];return e.iter(t,n,function(e){r.push(e.text)}),r}function pn(e,t){for(var n=t-e.height,r=e;r;r=r.parent)r.height+=n}function mn(e){if(null==e.parent)return null;for(var t=e.parent,n=Yn(t.lines,e),r=t.parent;r;t=r,r=r.parent)for(var i=0;r.children[i]!=t;++i)n+=r.children[i].chunkSize();return n+t.first}function gn(e,t){var n=e.first;e:do{for(var r=0,i=e.children.length;r<i;++r){var o=e.children[r],s=o.height;if(t<s){e=o;continue e}t-=s,n+=o.chunkSize()}return n}while(!e.lines);for(var r=0,i=e.lines.length;r<i;++r){var a=e.lines[r],l=a.height;if(t<l)break;t-=l}return n+r}function vn(e,t){t=Rt(e.doc,t);for(var n=0,r=t.parent,i=0;i<r.lines.length;++i){var o=r.lines[i];if(o==t)break;n+=o.height}for(var s=r.parent;s;r=s,s=r.parent)for(var i=0;i<s.children.length;++i){var a=s.children[i];if(a==r)break;n+=a.height}return n}function yn(e){var t=e.order;return null==t&&(t=e.order=Oi(e.text)),t}function bn(e){return{done:[],undone:[],undoDepth:1/0,lastTime:0,lastOp:null,lastOrigin:null,generation:e||1,maxGeneration:e||1}}function kn(e,t,n,r){var i=t["spans_"+e.id],o=0;e.iter(Math.max(e.first,n),Math.min(e.first+e.size,r),function(n){n.markedSpans&&((i||(i=t["spans_"+e.id]={}))[o]=n.markedSpans),++o})}function xn(e,t){var n={line:t.from.line,ch:t.from.ch},r={from:n,to:ti(t),text:fn(e,t.from,t.to)};return kn(e,r,t.from.line,t.to.line+1),cn(e,function(e){kn(e,r,t.from.line,t.to.line+1)},!0),r}function wn(e,t,n,r){var i=e.history;i.undone.length=0;var o=+new Date,s=Kn(i.done);if(s&&(i.lastOp==r||i.lastOrigin==t.origin&&t.origin&&("+"==t.origin.charAt(0)&&e.cm&&i.lastTime>o-e.cm.options.historyEventDelay||"*"==t.origin.charAt(0)))){var a=Kn(s.changes);Ue(t.from,t.to)&&Ue(t.from,a.to)?a.to=ti(t):s.changes.push(xn(e,t)),s.anchorAfter=n.anchor,s.headAfter=n.head}else for(s={changes:[xn(e,t)],generation:i.generation,anchorBefore:e.sel.anchor,headBefore:e.sel.head,anchorAfter:n.anchor,headAfter:n.head},i.done.push(s),i.generation=++i.maxGeneration;i.done.length>i.undoDepth;)i.done.shift();i.lastTime=o,i.lastOp=r,i.lastOrigin=t.origin}function Cn(e){if(!e)return null;for(var t,n=0;n<e.length;++n)e[n].marker.explicitlyCleared?t||(t=e.slice(0,n)):t&&t.push(e[n]);return t?t.length?t:null:e}function _n(e,t){var n=t["spans_"+e.id];if(!n)return null;for(var r=0,i=[];r<t.text.length;++r)i.push(Cn(n[r]));return i}function Ln(e,t){for(var n=0,r=[];n<e.length;++n){var i=e[n],o=i.changes,s=[];r.push({changes:s,anchorBefore:i.anchorBefore,headBefore:i.headBefore,anchorAfter:i.anchorAfter,headAfter:i.headAfter});for(var a=0;a<o.length;++a){var l,c=o[a];if(s.push({from:c.from,to:c.to,text:c.text}),t)for(var u in c)(l=u.match(/^spans_(\d+)$/))&&Yn(t,Number(l[1]))>-1&&(Kn(s)[u]=c[u],delete c[u])}}return r}function Sn(e,t,n,r){n<e.line?e.line+=r:t<e.line&&(e.line=t,e.ch=0)}function $n(e,t,n,r){
for(var i=0;i<e.length;++i){for(var o=e[i],s=!0,a=0;a<o.changes.length;++a){var l=o.changes[a];if(o.copied||(l.from=Ge(l.from),l.to=Ge(l.to)),n<l.from.line)l.from.line+=r,l.to.line+=r;else if(t<=l.to.line){s=!1;break}}o.copied||(o.anchorBefore=Ge(o.anchorBefore),o.headBefore=Ge(o.headBefore),o.anchorAfter=Ge(o.anchorAfter),o.readAfter=Ge(o.headAfter),o.copied=!0),s?(Sn(o.anchorBefore),Sn(o.headBefore),Sn(o.anchorAfter),Sn(o.headAfter)):(e.splice(0,i+1),i=0)}}function Tn(e,t){var n=t.from.line,r=t.to.line,i=t.text.length-(r-n)-1;$n(e.done,n,r,i),$n(e.undone,n,r,i)}function Mn(){Hn(this)}function An(e){return e.stop||(e.stop=Mn),e}function Nn(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function En(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}function Dn(e){return null!=e.defaultPrevented?e.defaultPrevented:0==e.returnValue}function Hn(e){Nn(e),En(e)}function On(e){return e.target||e.srcElement}function In(e){var t=e.which;return null==t&&(1&e.button?t=1:2&e.button?t=3:4&e.button&&(t=2)),Rr&&e.ctrlKey&&1==t&&(t=3),t}function Wn(e,t,n){if(e.addEventListener)e.addEventListener(t,n,!1);else if(e.attachEvent)e.attachEvent("on"+t,n);else{var r=e._handlers||(e._handlers={}),i=r[t]||(r[t]=[]);i.push(n)}}function Rn(e,t,n){if(e.removeEventListener)e.removeEventListener(t,n,!1);else if(e.detachEvent)e.detachEvent("on"+t,n);else{var r=e._handlers&&e._handlers[t];if(!r)return;for(var i=0;i<r.length;++i)if(r[i]==n){r.splice(i,1);break}}}function Pn(e,t){var n=e._handlers&&e._handlers[t];if(n)for(var r=Array.prototype.slice.call(arguments,2),i=0;i<n.length;++i)n[i].apply(null,r)}function zn(e,t){function n(e){return function(){e.apply(null,i)}}var r=e._handlers&&e._handlers[t];if(r){var i=Array.prototype.slice.call(arguments,2);ki||(++xi,ki=[],setTimeout(Fn,0));for(var o=0;o<r.length;++o)ki.push(n(r[o]))}}function jn(e,t,n){return Pn(e,n||t.type,e,t),Dn(t)||t.codemirrorIgnore}function Fn(){--xi;var e=ki;ki=null;for(var t=0;t<e.length;++t)e[t]()}function qn(e,t){var n=e._handlers&&e._handlers[t];return n&&n.length>0}function Bn(e){e.prototype.on=function(e,t){Wn(this,e,t)},e.prototype.off=function(e,t){Rn(this,e,t)}}function Un(){this.id=null}function Vn(e,t,n,r,i){null==t&&(t=e.search(/[^\s\u00a0]/),t==-1&&(t=e.length));for(var o=r||0,s=i||0;o<t;++o)"\t"==e.charAt(o)?s+=n-s%n:++s;return s}function Gn(e){for(;_i.length<=e;)_i.push(Kn(_i)+" ");return _i[e]}function Kn(e){return e[e.length-1]}function Xn(e){if(Ir)e.selectionStart=0,e.selectionEnd=e.value.length;else try{e.select()}catch(t){}}function Yn(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;++n)if(e[n]==t)return n;return-1}function Qn(e,t){function n(){}n.prototype=e;var r=new n;return t&&Zn(t,r),r}function Zn(e,t){t||(t={});for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function Jn(e){for(var t=[],n=0;n<e;++n)t.push(void 0);return t}function er(e){var t=Array.prototype.slice.call(arguments,1);return function(){return e.apply(null,t)}}function tr(e){return/\w/.test(e)||e>""&&(e.toUpperCase()!=e.toLowerCase()||Li.test(e))}function nr(e){for(var t in e)if(e.hasOwnProperty(t)&&e[t])return!1;return!0}function rr(e,t,n,r){var i=document.createElement(e);if(n&&(i.className=n),r&&(i.style.cssText=r),"string"==typeof t)sr(i,t);else if(t)for(var o=0;o<t.length;++o)i.appendChild(t[o]);return i}function ir(e){for(var t=e.childNodes.length;t>0;--t)e.removeChild(e.firstChild);return e}function or(e,t){return ir(e).appendChild(t)}function sr(e,t){Sr?(e.innerHTML="",e.appendChild(document.createTextNode(t))):e.textContent=t}function ar(e){return e.getBoundingClientRect()}function lr(){return!1}function cr(e){if(null!=Ti)return Ti;var t=rr("div",null,null,"width: 50px; height: 50px; overflow-x: scroll");return or(e,t),t.offsetWidth&&(Ti=t.offsetHeight-t.clientHeight),Ti||0}function ur(e){if(null==Mi){var t=rr("span","​");or(e,rr("span",[t,document.createTextNode("x")])),0!=e.firstChild.offsetHeight&&(Mi=t.offsetWidth<=1&&t.offsetHeight>2&&!Lr)}return Mi?rr("span","​"):rr("span"," ",null,"display: inline-block; width: 1px; margin-right: -1px")}function dr(e,t,n,r){if(!e)return r(t,n,"ltr");for(var i=!1,o=0;o<e.length;++o){var s=e[o];(s.from<n&&s.to>t||t==n&&s.to==t)&&(r(Math.max(s.from,t),Math.min(s.to,n),1==s.level?"rtl":"ltr"),i=!0)}i||r(t,n,"ltr")}function fr(e){return e.level%2?e.to:e.from}function hr(e){return e.level%2?e.from:e.to}function pr(e){var t=yn(e);return t?fr(t[0]):0}function mr(e){var t=yn(e);return t?hr(Kn(t)):e.text.length}function gr(e,t){var n=dn(e.doc,t),r=Rt(e.doc,n);r!=n&&(t=mn(r));var i=yn(r),o=i?i[0].level%2?mr(r):pr(r):0;return Be(t,o)}function vr(e,t){for(var n,r;n=Wt(r=dn(e.doc,t));)t=n.find().to.line;var i=yn(r),o=i?i[0].level%2?pr(r):mr(r):r.text.length;return Be(t,o)}function yr(e,t,n){var r=e[0].level;return t==r||n!=r&&t<n}function br(e,t){for(var n,r=0;r<e.length;++r){var i=e[r];if(i.from<t&&i.to>t)return Hi=null,r;if(i.from==t||i.to==t){if(null!=n)return yr(e,i.level,e[n].level)?(Hi=n,r):(Hi=r,n);n=r}}return Hi=null,n}function kr(e,t,n,r){if(!r)return t+n;do t+=n;while(t>0&&Si.test(e.text.charAt(t)));return t}function xr(e,t,n,r){var i=yn(e);if(!i)return wr(e,t,n,r);for(var o=br(i,t),s=i[o],a=kr(e,t,s.level%2?-n:n,r);;){if(a>s.from&&a<s.to)return a;if(a==s.from||a==s.to)return br(i,a)==o?a:(s=i[o+=n],n>0==s.level%2?s.to:s.from);if(s=i[o+=n],!s)return null;a=n>0==s.level%2?kr(e,s.to,-1,r):kr(e,s.from,1,r)}}function wr(e,t,n,r){var i=t+n;if(r)for(;i>0&&Si.test(e.text.charAt(i));)i+=n;return i<0||i>e.text.length?null:i}var Cr=/gecko\/\d/i.test(navigator.userAgent),_r=/MSIE \d/.test(navigator.userAgent),Lr=_r&&(null==document.documentMode||document.documentMode<8),Sr=_r&&(null==document.documentMode||document.documentMode<9),$r=/WebKit\//.test(navigator.userAgent),Tr=$r&&/Qt\/\d+\.\d+/.test(navigator.userAgent),Mr=/Chrome\//.test(navigator.userAgent),Ar=/Opera\//.test(navigator.userAgent),Nr=/Apple Computer/.test(navigator.vendor),Er=/KHTML\//.test(navigator.userAgent),Dr=/Mac OS X 1\d\D([7-9]|\d\d)\D/.test(navigator.userAgent),Hr=/Mac OS X 1\d\D([8-9]|\d\d)\D/.test(navigator.userAgent),Or=/PhantomJS/.test(navigator.userAgent),Ir=/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),Wr=Ir||/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent),Rr=Ir||/Mac/.test(navigator.platform),Pr=/windows/i.test(navigator.platform),zr=Ar&&navigator.userAgent.match(/Version\/(\d*\.\d*)/);zr&&(zr=Number(zr[1])),zr&&zr>=15&&(Ar=!1,$r=!0);var jr,Fr,qr,Br=Rr&&(Tr||Ar&&(null==zr||zr<12.11)),Ur=Cr||_r&&!Sr,Vr=!1,Gr=!1,Kr=0,Xr=0,Yr=0,Qr=null;_r?Qr=-.53:Cr?Qr=15:Mr?Qr=-.7:Nr&&(Qr=-1/3);var Zr,Jr,ei=null,ti=e.changeEnd=function(e){return e.text?Be(e.from.line+e.text.length-1,Kn(e.text).length+(1==e.text.length?e.from.ch:0)):e.to};e.Pos=Be,e.prototype={constructor:e,focus:function(){window.focus(),he(this),Ne(this),ue(this)},setOption:function(e,t){var n=this.options,r=n[e];n[e]==t&&"mode"!=e||(n[e]=t,ni.hasOwnProperty(e)&&oe(this,ni[e])(this,t,r))},getOption:function(e){return this.options[e]},getDoc:function(){return this.doc},addKeyMap:function(e,t){this.state.keyMaps[t?"push":"unshift"](e)},removeKeyMap:function(e){for(var t=this.state.keyMaps,n=0;n<t.length;++n)if(t[n]==e||"string"!=typeof t[n]&&t[n].name==e)return t.splice(n,1),!0},addOverlay:oe(null,function(t,n){var r=t.token?t:e.getMode(this.options,t);if(r.startState)throw new Error("Overlays may not be stateful.");this.state.overlays.push({mode:r,modeSpec:t,opaque:n&&n.opaque}),this.state.modeGen++,le(this)}),removeOverlay:oe(null,function(e){for(var t=this.state.overlays,n=0;n<t.length;++n){var r=t[n].modeSpec;if(r==e||"string"==typeof e&&r.name==e)return t.splice(n,1),this.state.modeGen++,void le(this)}}),indentLine:oe(null,function(e,t,n){"string"!=typeof t&&"number"!=typeof t&&(t=null==t?this.options.smartIndent?"smart":"prev":t?"add":"subtract"),Qe(this.doc,e)&&ct(this,e,t,n)}),indentSelection:oe(null,function(e){var t=this.doc.sel;if(Ue(t.from,t.to))return ct(this,t.from.line,e);for(var n=t.to.line-(t.to.ch?0:1),r=t.from.line;r<=n;++r)ct(this,r,e)}),getTokenAt:function(e,t){var n=this.doc;e=Xe(n,e);for(var r=O(this,e.line,t),i=this.doc.mode,o=dn(n,e.line),s=new wt(o.text,this.options.tabSize);s.pos<e.ch&&!s.eol();){s.start=s.pos;var a=i.token(s,r)}return{start:s.start,end:s.pos,string:s.current(),className:a||null,type:a||null,state:r}},getTokenTypeAt:function(e){e=Xe(this.doc,e);var t=Yt(this,dn(this.doc,e.line)),n=0,r=(t.length-1)/2,i=e.ch;if(0==i)return t[2];for(;;){var o=n+r>>1;if((o?t[2*o-1]:0)>=i)r=o;else{if(!(t[2*o+1]<i))return t[2*o+2];n=o+1}}},getModeAt:function(t){var n=this.doc.mode;return n.innerMode?e.innerMode(n,this.getTokenAt(t).state).mode:n},getHelper:function(e,t){if(ci.hasOwnProperty(t)){var n=ci[t],r=this.getModeAt(e);return r[t]&&n[r[t]]||r.helperType&&n[r.helperType]||n[r.name]}},getStateAfter:function(e,t){var n=this.doc;return e=Ke(n,null==e?n.first+n.size-1:e),O(this,e+1,t)},cursorCoords:function(e,t){var n,r=this.doc.sel;return n=null==e?r.head:"object"==typeof e?Xe(this.doc,e):e?r.from:r.to,Q(this,n,t||"page")},charCoords:function(e,t){return Y(this,Xe(this.doc,e),t||"page")},coordsChar:function(e,t){return e=X(this,e,t||"page"),J(this,e.left,e.top)},lineAtHeight:function(e,t){return e=X(this,{top:e,left:0},t||"page").top,gn(this.doc,e+this.display.viewOffset)},heightAtLine:function(e,t){var n=!1,r=this.doc.first+this.doc.size-1;e<this.doc.first?e=this.doc.first:e>r&&(e=r,n=!0);var i=dn(this.doc,e);return K(this,dn(this.doc,e),{top:0,left:0},t||"page").top+(n?i.height:0)},defaultTextHeight:function(){return te(this.display)},defaultCharWidth:function(){return ne(this.display)},setGutterMarker:oe(null,function(e,t,n){return ut(this,e,function(e){var r=e.gutterMarkers||(e.gutterMarkers={});return r[t]=n,!n&&nr(r)&&(e.gutterMarkers=null),!0})}),clearGutter:oe(null,function(e){var t=this,n=t.doc,r=n.first;n.iter(function(n){n.gutterMarkers&&n.gutterMarkers[e]&&(n.gutterMarkers[e]=null,le(t,r,r+1),nr(n.gutterMarkers)&&(n.gutterMarkers=null)),++r})}),addLineClass:oe(null,function(e,t,n){return ut(this,e,function(e){var r="text"==t?"textClass":"background"==t?"bgClass":"wrapClass";if(e[r]){if(new RegExp("(?:^|\\s)"+n+"(?:$|\\s)").test(e[r]))return!1;e[r]+=" "+n}else e[r]=n;return!0})}),removeLineClass:oe(null,function(e,t,n){return ut(this,e,function(e){var r="text"==t?"textClass":"background"==t?"bgClass":"wrapClass",i=e[r];if(!i)return!1;if(null==n)e[r]=null;else{var o=i.match(new RegExp("(?:^|\\s+)"+n+"(?:$|\\s+)"));if(!o)return!1;var s=o.index+o[0].length;e[r]=i.slice(0,o.index)+(o.index&&s!=i.length?" ":"")+i.slice(s)||null}return!0})}),addLineWidget:oe(null,function(e,t,n){return Ut(this,e,t,n)}),removeLineWidget:function(e){e.clear()},lineInfo:function(e){if("number"==typeof e){if(!Qe(this.doc,e))return null;var t=e;if(e=dn(this.doc,e),!e)return null}else{var t=mn(e);if(null==t)return null}return{line:t,handle:e,text:e.text,gutterMarkers:e.gutterMarkers,textClass:e.textClass,bgClass:e.bgClass,wrapClass:e.wrapClass,widgets:e.widgets}},getViewport:function(){return{from:this.display.showingFrom,to:this.display.showingTo}},addWidget:function(e,t,n,r,i){var o=this.display;e=Q(this,Xe(this.doc,e));var s=e.bottom,a=e.left;if(t.style.position="absolute",o.sizer.appendChild(t),"over"==r)s=e.top;else if("above"==r||"near"==r){var l=Math.max(o.wrapper.clientHeight,this.doc.height),c=Math.max(o.sizer.clientWidth,o.lineSpace.clientWidth);("above"==r||e.bottom+t.offsetHeight>l)&&e.top>t.offsetHeight?s=e.top-t.offsetHeight:e.bottom+t.offsetHeight<=l&&(s=e.bottom),a+t.offsetWidth>c&&(a=c-t.offsetWidth)}t.style.top=s+"px",t.style.left=t.style.right="","right"==i?(a=o.sizer.clientWidth-t.offsetWidth,t.style.right="0px"):("left"==i?a=0:"middle"==i&&(a=(o.sizer.clientWidth-t.offsetWidth)/2),t.style.left=a+"px"),n&&ot(this,a,s,a+t.offsetWidth,s+t.offsetHeight)},triggerOnKeyDown:oe(null,Me),execCommand:function(e){return ui[e](this)},findPosH:function(e,t,n,r){var i=1;t<0&&(i=-1,t=-t);for(var o=0,s=Xe(this.doc,e);o<t&&(s=dt(this.doc,s,i,n,r),!s.hitSide);++o);return s},moveH:oe(null,function(e,t){var n,r=this.doc.sel;n=r.shift||r.extend||Ue(r.from,r.to)?dt(this.doc,r.head,e,t,this.options.rtlMoveVisually):e<0?r.from:r.to,Ze(this.doc,n,n,e)}),deleteH:oe(null,function(e,t){var n=this.doc.sel;Ue(n.from,n.to)?qe(this.doc,"",n.from,dt(this.doc,n.head,e,t,!1),"+delete"):qe(this.doc,"",n.from,n.to,"+delete"),this.curOp.userSelChange=!0}),findPosV:function(e,t,n,r){var i=1,o=r;t<0&&(i=-1,t=-t);for(var s=0,a=Xe(this.doc,e);s<t;++s){var l=Q(this,a,"div");if(null==o?o=l.left:l.left=o,a=ft(this,l,i,n),a.hitSide)break}return a},moveV:oe(null,function(e,t){var n=this.doc.sel,r=Q(this,n.head,"div");null!=n.goalColumn&&(r.left=n.goalColumn);var i=ft(this,r,e,t);"page"==t&&lt(this,0,Y(this,i,"div").top-r.top),Ze(this.doc,i,i,e),n.goalColumn=r.left}),toggleOverwrite:function(e){null!=e&&e==this.state.overwrite||((this.state.overwrite=!this.state.overwrite)?this.display.cursor.className+=" CodeMirror-overwrite":this.display.cursor.className=this.display.cursor.className.replace(" CodeMirror-overwrite",""))},hasFocus:function(){return this.state.focused},scrollTo:oe(null,function(e,t){at(this,e,t)}),getScrollInfo:function(){var e=this.display.scroller,t=wi;return{left:e.scrollLeft,top:e.scrollTop,height:e.scrollHeight-t,width:e.scrollWidth-t,clientHeight:e.clientHeight-t,clientWidth:e.clientWidth-t}},scrollIntoView:oe(null,function(e,t){"number"==typeof e&&(e=Be(e,0)),t||(t=0);var n=e;e&&null==e.line||(this.curOp.scrollToPos=e?Xe(this.doc,e):this.doc.sel.head,this.curOp.scrollToPosMargin=t,n=Q(this,this.curOp.scrollToPos));var r=st(this,n.left,n.top-t,n.right,n.bottom+t);at(this,r.scrollLeft,r.scrollTop)}),setSize:oe(null,function(e,t){function n(e){return"number"==typeof e||/^\d+$/.test(String(e))?e+"px":e}null!=e&&(this.display.wrapper.style.width=n(e)),null!=t&&(this.display.wrapper.style.height=n(t)),this.options.lineWrapping&&(this.display.measureLineCache.length=this.display.measureLineCachePos=0),this.curOp.forceUpdate=!0}),operation:function(e){return ae(this,e)},refresh:oe(null,function(){U(this),at(this,this.doc.scrollLeft,this.doc.scrollTop),le(this)}),swapDoc:oe(null,function(e){var t=this.doc;return t.cm=null,un(this,e),U(this),fe(this,!0),at(this,e.scrollLeft,e.scrollTop),t}),getInputField:function(){return this.display.input},getWrapperElement:function(){return this.display.wrapper},getScrollerElement:function(){return this.display.scroller},getGutterElement:function(){return this.display.gutters}},Bn(e);var ni=e.optionHandlers={},ri=e.defaults={},ii=e.Init={toString:function(){return"CodeMirror.Init"}};mt("value","",function(e,t){e.setValue(t)},!0),mt("mode",null,function(e,t){e.doc.modeOption=t,n(e)},!0),mt("indentUnit",2,n,!0),mt("indentWithTabs",!1),mt("smartIndent",!0),mt("tabSize",4,function(e){n(e),U(e),le(e)},!0),mt("electricChars",!0),mt("rtlMoveVisually",!Pr),mt("theme","default",function(e){a(e),l(e)},!0),mt("keyMap","default",s),mt("extraKeys",null),mt("onKeyEvent",null),mt("onDragEvent",null),mt("lineWrapping",!1,r,!0),mt("gutters",[],function(e){f(e.options),l(e)},!0),mt("fixedGutter",!0,function(e,t){e.display.gutters.style.left=t?y(e.display)+"px":"0",e.refresh()},!0),mt("coverGutterNextToScrollbar",!1,h,!0),mt("lineNumbers",!1,function(e){f(e.options),l(e)},!0),mt("firstLineNumber",1,l,!0),mt("lineNumberFormatter",function(e){return e},l,!0),mt("showCursorWhenSelecting",!1,T,!0),mt("readOnly",!1,function(e,t){"nocursor"==t?(Ee(e),e.display.input.blur()):t||fe(e,!0)}),mt("dragDrop",!0),mt("cursorBlinkRate",530),mt("cursorScrollMargin",0),mt("cursorHeight",1),mt("workTime",100),mt("workDelay",100),mt("flattenSpans",!0),mt("pollInterval",100),mt("undoDepth",40,function(e,t){e.doc.history.undoDepth=t}),mt("historyEventDelay",500),mt("viewportMargin",10,function(e){e.refresh()},!0),mt("maxHighlightLength",1e4,function(e){n(e),e.refresh()},!0),mt("moveInputWithCursor",!0,function(e,t){t||(e.display.inputDiv.style.top=e.display.inputDiv.style.left=0)}),mt("tabindex",null,function(e,t){e.display.input.tabIndex=t||""}),mt("autofocus",null);var oi=e.modes={},si=e.mimeModes={};e.defineMode=function(t,n){if(e.defaults.mode||"null"==t||(e.defaults.mode=t),arguments.length>2){n.dependencies=[];for(var r=2;r<arguments.length;++r)n.dependencies.push(arguments[r])}oi[t]=n},e.defineMIME=function(e,t){si[e]=t},e.resolveMode=function(t){if("string"==typeof t&&si.hasOwnProperty(t))t=si[t];else if(t&&"string"==typeof t.name&&si.hasOwnProperty(t.name)){var n=si[t.name];t=Qn(n,t),t.name=n.name}else if("string"==typeof t&&/^[\w\-]+\/[\w\-]+\+xml$/.test(t))return e.resolveMode("application/xml");return"string"==typeof t?{name:t}:t||{name:"null"}},e.getMode=function(t,n){var n=e.resolveMode(n),r=oi[n.name];if(!r)return e.getMode(t,"text/plain");var i=r(t,n);if(ai.hasOwnProperty(n.name)){var o=ai[n.name];for(var s in o)o.hasOwnProperty(s)&&(i.hasOwnProperty(s)&&(i["_"+s]=i[s]),i[s]=o[s])}return i.name=n.name,i},e.defineMode("null",function(){return{token:function(e){e.skipToEnd()}}}),e.defineMIME("text/plain","null");var ai=e.modeExtensions={};e.extendMode=function(e,t){var n=ai.hasOwnProperty(e)?ai[e]:ai[e]={};Zn(t,n)},e.defineExtension=function(t,n){e.prototype[t]=n},e.defineDocExtension=function(e,t){vi.prototype[e]=t},e.defineOption=mt;var li=[];e.defineInitHook=function(e){li.push(e)};var ci=e.helpers={};e.registerHelper=function(t,n,r){ci.hasOwnProperty(t)||(ci[t]=e[t]={}),ci[t][n]=r},e.isWordChar=tr,e.copyState=gt,e.startState=vt,e.innerMode=function(e,t){for(;e.innerMode;){var n=e.innerMode(t);if(!n||n.mode==e)break;t=n.state,e=n.mode}return n||{mode:e,state:t}};var ui=e.commands={selectAll:function(e){e.setSelection(Be(e.firstLine(),0),Be(e.lastLine()))},killLine:function(e){var t=e.getCursor(!0),n=e.getCursor(!1),r=!Ue(t,n);r||e.getLine(t.line).length!=t.ch?e.replaceRange("",t,r?n:Be(t.line),"+delete"):e.replaceRange("",t,Be(t.line+1,0),"+delete")},deleteLine:function(e){var t=e.getCursor().line;e.replaceRange("",Be(t,0),Be(t),"+delete")},delLineLeft:function(e){var t=e.getCursor();e.replaceRange("",Be(t.line,0),t,"+delete")},undo:function(e){e.undo()},redo:function(e){e.redo()},goDocStart:function(e){e.extendSelection(Be(e.firstLine(),0))},goDocEnd:function(e){e.extendSelection(Be(e.lastLine()))},goLineStart:function(e){e.extendSelection(gr(e,e.getCursor().line))},goLineStartSmart:function(e){var t=e.getCursor(),n=gr(e,t.line),r=e.getLineHandle(n.line),i=yn(r);if(i&&0!=i[0].level)e.extendSelection(n);else{var o=Math.max(0,r.text.search(/\S/)),s=t.line==n.line&&t.ch<=o&&t.ch;e.extendSelection(Be(n.line,s?0:o))}},goLineEnd:function(e){e.extendSelection(vr(e,e.getCursor().line))},goLineRight:function(e){var t=e.charCoords(e.getCursor(),"div").top+5;e.extendSelection(e.coordsChar({left:e.display.lineDiv.offsetWidth+100,top:t},"div"))},goLineLeft:function(e){var t=e.charCoords(e.getCursor(),"div").top+5;e.extendSelection(e.coordsChar({left:0,top:t},"div"))},goLineUp:function(e){e.moveV(-1,"line")},goLineDown:function(e){e.moveV(1,"line")},goPageUp:function(e){e.moveV(-1,"page")},goPageDown:function(e){e.moveV(1,"page")},goCharLeft:function(e){e.moveH(-1,"char")},goCharRight:function(e){e.moveH(1,"char")},goColumnLeft:function(e){e.moveH(-1,"column")},goColumnRight:function(e){e.moveH(1,"column")},goWordLeft:function(e){e.moveH(-1,"word")},goGroupRight:function(e){e.moveH(1,"group")},goGroupLeft:function(e){e.moveH(-1,"group")},goWordRight:function(e){e.moveH(1,"word")},delCharBefore:function(e){e.deleteH(-1,"char")},delCharAfter:function(e){e.deleteH(1,"char")},delWordBefore:function(e){e.deleteH(-1,"word")},delWordAfter:function(e){e.deleteH(1,"word")},delGroupBefore:function(e){e.deleteH(-1,"group")},delGroupAfter:function(e){e.deleteH(1,"group")},indentAuto:function(e){e.indentSelection("smart")},indentMore:function(e){e.indentSelection("add")},indentLess:function(e){e.indentSelection("subtract")},insertTab:function(e){e.replaceSelection("\t","end","+input")},defaultTab:function(e){e.somethingSelected()?e.indentSelection("add"):e.replaceSelection("\t","end","+input")},transposeChars:function(e){var t=e.getCursor(),n=e.getLine(t.line);t.ch>0&&t.ch<n.length-1&&e.replaceRange(n.charAt(t.ch)+n.charAt(t.ch-1),Be(t.line,t.ch-1),Be(t.line,t.ch+1))},newlineAndIndent:function(e){oe(e,function(){e.replaceSelection("\n","end","+input"),e.indentLine(e.getCursor().line,null,!0)})()},toggleOverwrite:function(e){e.toggleOverwrite()}},di=e.keyMap={};di.basic={Left:"goCharLeft",Right:"goCharRight",Up:"goLineUp",Down:"goLineDown",End:"goLineEnd",Home:"goLineStartSmart",PageUp:"goPageUp",PageDown:"goPageDown",Delete:"delCharAfter",Backspace:"delCharBefore",Tab:"defaultTab","Shift-Tab":"indentAuto",Enter:"newlineAndIndent",Insert:"toggleOverwrite"},di.pcDefault={"Ctrl-A":"selectAll","Ctrl-D":"deleteLine","Ctrl-Z":"undo","Shift-Ctrl-Z":"redo","Ctrl-Y":"redo","Ctrl-Home":"goDocStart","Alt-Up":"goDocStart","Ctrl-End":"goDocEnd","Ctrl-Down":"goDocEnd","Ctrl-Left":"goGroupLeft","Ctrl-Right":"goGroupRight","Alt-Left":"goLineStart","Alt-Right":"goLineEnd","Ctrl-Backspace":"delGroupBefore","Ctrl-Delete":"delGroupAfter","Ctrl-S":"save","Ctrl-F":"find","Ctrl-G":"findNext","Shift-Ctrl-G":"findPrev","Shift-Ctrl-F":"replace","Shift-Ctrl-R":"replaceAll","Ctrl-[":"indentLess","Ctrl-]":"indentMore",fallthrough:"basic"},di.macDefault={"Cmd-A":"selectAll","Cmd-D":"deleteLine","Cmd-Z":"undo","Shift-Cmd-Z":"redo","Cmd-Y":"redo","Cmd-Up":"goDocStart","Cmd-End":"goDocEnd","Cmd-Down":"goDocEnd","Alt-Left":"goGroupLeft","Alt-Right":"goGroupRight","Cmd-Left":"goLineStart","Cmd-Right":"goLineEnd","Alt-Backspace":"delGroupBefore","Ctrl-Alt-Backspace":"delGroupAfter","Alt-Delete":"delGroupAfter","Cmd-S":"save","Cmd-F":"find","Cmd-G":"findNext","Shift-Cmd-G":"findPrev","Cmd-Alt-F":"replace","Shift-Cmd-Alt-F":"replaceAll","Cmd-[":"indentLess","Cmd-]":"indentMore","Cmd-Backspace":"delLineLeft",fallthrough:["basic","emacsy"]},di["default"]=Rr?di.macDefault:di.pcDefault,di.emacsy={"Ctrl-F":"goCharRight","Ctrl-B":"goCharLeft","Ctrl-P":"goLineUp","Ctrl-N":"goLineDown","Alt-F":"goWordRight","Alt-B":"goWordLeft","Ctrl-A":"goLineStart","Ctrl-E":"goLineEnd","Ctrl-V":"goPageDown","Shift-Ctrl-V":"goPageUp","Ctrl-D":"delCharAfter","Ctrl-H":"delCharBefore","Alt-D":"delWordAfter","Alt-Backspace":"delWordBefore","Ctrl-K":"killLine","Ctrl-T":"transposeChars"},e.lookupKey=bt,e.isModifierKey=kt,e.keyName=xt,e.fromTextArea=function(t,n){function r(){t.value=c.getValue()}if(n||(n={}),n.value=t.value,!n.tabindex&&t.tabindex&&(n.tabindex=t.tabindex),!n.placeholder&&t.placeholder&&(n.placeholder=t.placeholder),null==n.autofocus){var i=document.body;try{i=document.activeElement}catch(o){}n.autofocus=i==t||null!=t.getAttribute("autofocus")&&i==document.body}if(t.form&&(Wn(t.form,"submit",r),!n.leaveSubmitMethodAlone)){var s=t.form,a=s.submit;try{var l=s.submit=function(){r(),s.submit=a,s.submit(),s.submit=l}}catch(o){}}t.style.display="none";var c=e(function(e){t.parentNode.insertBefore(e,t.nextSibling)},n);return c.save=r,c.getTextArea=function(){return t},c.toTextArea=function(){r(),t.parentNode.removeChild(c.getWrapperElement()),t.style.display="",t.form&&(Rn(t.form,"submit",r),"function"==typeof t.form.submit&&(t.form.submit=a))},c},wt.prototype={eol:function(){return this.pos>=this.string.length},sol:function(){return 0==this.pos},peek:function(){return this.string.charAt(this.pos)||void 0},next:function(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)},eat:function(e){var t=this.string.charAt(this.pos);if("string"==typeof e)var n=t==e;else var n=t&&(e.test?e.test(t):e(t));if(n)return++this.pos,t},eatWhile:function(e){for(var t=this.pos;this.eat(e););return this.pos>t},eatSpace:function(){for(var e=this.pos;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>e},skipToEnd:function(){this.pos=this.string.length},skipTo:function(e){var t=this.string.indexOf(e,this.pos);if(t>-1)return this.pos=t,!0},backUp:function(e){this.pos-=e},column:function(){return this.lastColumnPos<this.start&&(this.lastColumnValue=Vn(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue},indentation:function(){return Vn(this.string,null,this.tabSize)},match:function(e,t,n){if("string"!=typeof e){var r=this.string.slice(this.pos).match(e);return r&&r.index>0?null:(r&&t!==!1&&(this.pos+=r[0].length),r)}var i=function(e){return n?e.toLowerCase():e},o=this.string.substr(this.pos,e.length);if(i(o)==i(e))return t!==!1&&(this.pos+=e.length),!0},current:function(){return this.string.slice(this.start,this.pos)}},e.StringStream=wt,e.TextMarker=Ct,Bn(Ct),Ct.prototype.clear=function(){if(!this.explicitlyCleared){var e=this.doc.cm,t=e&&!e.curOp;if(t&&re(e),qn(this,"clear")){var n=this.find();n&&zn(this,"clear",n.from,n.to)}for(var r=null,i=null,o=0;o<this.lines.length;++o){var s=this.lines[o],a=$t(s.markedSpans,this);null!=a.to&&(i=mn(s)),s.markedSpans=Tt(s.markedSpans,a),null!=a.from?r=mn(s):this.collapsed&&!Pt(this.doc,s)&&e&&pn(s,te(e.display))}if(e&&this.collapsed&&!e.options.lineWrapping)for(var o=0;o<this.lines.length;++o){var l=Rt(e.doc,this.lines[o]),c=u(e.doc,l);c>e.display.maxLineLength&&(e.display.maxLine=l,e.display.maxLineLength=c,e.display.maxLineChanged=!0)}null!=r&&e&&le(e,r,i+1),this.lines.length=0,this.explicitlyCleared=!0,this.atomic&&this.doc.cantEdit&&(this.doc.cantEdit=!1,e&&tt(e)),t&&ie(e)}},Ct.prototype.find=function(){for(var e,t,n=0;n<this.lines.length;++n){var r=this.lines[n],i=$t(r.markedSpans,this);if(null!=i.from||null!=i.to){var o=mn(r);null!=i.from&&(e=Be(o,i.from)),null!=i.to&&(t=Be(o,i.to))}}return"bookmark"==this.type?e:e&&{from:e,to:t}},Ct.prototype.changed=function(){var e=this.find(),t=this.doc.cm;if(e&&t){var n=dn(this.doc,e.from.line);if(j(t,n),e.from.line>=t.display.showingFrom&&e.from.line<t.display.showingTo){for(var r=t.display.lineDiv.firstChild;r;r=r.nextSibling)if(r.lineObj==n){r.offsetHeight!=n.height&&pn(n,r.offsetHeight);break}ae(t,function(){t.curOp.selectionChanged=t.curOp.forceUpdate=t.curOp.updateMaxLine=!0})}}},Ct.prototype.attachLine=function(e){if(!this.lines.length&&this.doc.cm){var t=this.doc.cm.curOp;t.maybeHiddenMarkers&&Yn(t.maybeHiddenMarkers,this)!=-1||(t.maybeUnhiddenMarkers||(t.maybeUnhiddenMarkers=[])).push(this)}this.lines.push(e)},Ct.prototype.detachLine=function(e){if(this.lines.splice(Yn(this.lines,e),1),!this.lines.length&&this.doc.cm){var t=this.doc.cm.curOp;(t.maybeHiddenMarkers||(t.maybeHiddenMarkers=[])).push(this)}},e.SharedTextMarker=Lt,Bn(Lt),Lt.prototype.clear=function(){if(!this.explicitlyCleared){this.explicitlyCleared=!0;for(var e=0;e<this.markers.length;++e)this.markers[e].clear();zn(this,"clear")}},Lt.prototype.find=function(){return this.primary.find()};var fi=e.LineWidget=function(e,t,n){if(n)for(var r in n)n.hasOwnProperty(r)&&(this[r]=n[r]);this.cm=e,this.node=t};Bn(fi),fi.prototype.clear=qt(function(){var e=this.line.widgets,t=mn(this.line);if(null!=t&&e){for(var n=0;n<e.length;++n)e[n]==this&&e.splice(n--,1);e.length||(this.line.widgets=null);var r=vn(this.cm,this.line)<this.cm.doc.scrollTop;pn(this.line,Math.max(0,this.line.height-Bt(this))),r&&lt(this.cm,0,-this.height),le(this.cm,t,t+1)}}),fi.prototype.changed=qt(function(){var e=this.height;this.height=null;var t=Bt(this)-e;if(t){pn(this.line,this.line.height+t);var n=mn(this.line);le(this.cm,n,n+1)}});var hi=e.Line=function(e,t,n){this.text=e,Ft(this,t),this.height=n?n(this):1};Bn(hi);var pi={},mi=/[\t\u0000-\u0019\u00ad\u200b\u2028\u2029\uFEFF]/g;an.prototype={chunkSize:function(){return this.lines.length},removeInner:function(e,t){for(var n=e,r=e+t;n<r;++n){var i=this.lines[n];this.height-=i.height,Gt(i),zn(i,"delete")}this.lines.splice(e,t)},collapse:function(e){e.splice.apply(e,[e.length,0].concat(this.lines))},insertInner:function(e,t,n){this.height+=n,this.lines=this.lines.slice(0,e).concat(t).concat(this.lines.slice(e));for(var r=0,i=t.length;r<i;++r)t[r].parent=this},iterN:function(e,t,n){for(var r=e+t;e<r;++e)if(n(this.lines[e]))return!0}},ln.prototype={chunkSize:function(){return this.size},removeInner:function(e,t){this.size-=t;for(var n=0;n<this.children.length;++n){var r=this.children[n],i=r.chunkSize();if(e<i){var o=Math.min(t,i-e),s=r.height;if(r.removeInner(e,o),this.height-=s-r.height,i==o&&(this.children.splice(n--,1),r.parent=null),0==(t-=o))break;e=0}else e-=i}if(this.size-t<25){var a=[];this.collapse(a),this.children=[new an(a)],this.children[0].parent=this}},collapse:function(e){for(var t=0,n=this.children.length;t<n;++t)this.children[t].collapse(e)},insertInner:function(e,t,n){this.size+=t.length,this.height+=n;for(var r=0,i=this.children.length;r<i;++r){var o=this.children[r],s=o.chunkSize();if(e<=s){if(o.insertInner(e,t,n),o.lines&&o.lines.length>50){for(;o.lines.length>50;){var a=o.lines.splice(o.lines.length-25,25),l=new an(a);o.height-=l.height,this.children.splice(r+1,0,l),l.parent=this}this.maybeSpill()}break}e-=s}},maybeSpill:function(){if(!(this.children.length<=10)){var e=this;do{var t=e.children.splice(e.children.length-5,5),n=new ln(t);if(e.parent){e.size-=n.size,e.height-=n.height;var r=Yn(e.parent.children,e);e.parent.children.splice(r+1,0,n)}else{var i=new ln(e.children);i.parent=e,e.children=[i,n],e=i}n.parent=e.parent}while(e.children.length>10);e.parent.maybeSpill()}},iterN:function(e,t,n){for(var r=0,i=this.children.length;r<i;++r){var o=this.children[r],s=o.chunkSize();if(e<s){var a=Math.min(t,s-e);if(o.iterN(e,a,n))return!0;if(0==(t-=a))break;e=0}else e-=s}}};var gi=0,vi=e.Doc=function(e,t,n){if(!(this instanceof vi))return new vi(e,t,n);null==n&&(n=0),ln.call(this,[new an([new hi("",null)])]),this.first=n,this.scrollTop=this.scrollLeft=0,this.cantEdit=!1,this.history=bn(),this.cleanGeneration=1,this.frontier=n;var r=Be(n,0);this.sel={from:r,to:r,head:r,anchor:r,shift:!1,extend:!1,goalColumn:null},this.id=++gi,this.modeOption=t,"string"==typeof e&&(e=Ai(e)),sn(this,{from:r,to:r,text:e},null,{head:r,anchor:r})};vi.prototype=Qn(ln.prototype,{constructor:vi,iter:function(e,t,n){n?this.iterN(e-this.first,t-e,n):this.iterN(this.first,this.first+this.size,e)},insert:function(e,t){for(var n=0,r=0,i=t.length;r<i;++r)n+=t[r].height;this.insertInner(e-this.first,t,n)},remove:function(e,t){this.removeInner(e-this.first,t)},getValue:function(e){var t=hn(this,this.first,this.first+this.size);return e===!1?t:t.join(e||"\n")},setValue:function(e){var t=Be(this.first,0),n=this.first+this.size-1;We(this,{from:t,to:Be(n,dn(this,n).text.length),text:Ai(e),origin:"setValue"},{head:t,anchor:t},!0)},replaceRange:function(e,t,n,r){t=Xe(this,t),n=n?Xe(this,n):t,qe(this,e,t,n,r)},getRange:function(e,t,n){var r=fn(this,Xe(this,e),Xe(this,t));return n===!1?r:r.join(n||"\n")},getLine:function(e){var t=this.getLineHandle(e);return t&&t.text},setLine:function(e,t){Qe(this,e)&&qe(this,t,Be(e,0),Xe(this,Be(e)))},removeLine:function(e){e?qe(this,"",Xe(this,Be(e-1)),Xe(this,Be(e))):qe(this,"",Be(0,0),Xe(this,Be(1,0)))},getLineHandle:function(e){if(Qe(this,e))return dn(this,e)},getLineNumber:function(e){return mn(e)},getLineHandleVisualStart:function(e){return"number"==typeof e&&(e=dn(this,e)),Rt(this,e)},lineCount:function(){return this.size},firstLine:function(){return this.first},lastLine:function(){return this.first+this.size-1},clipPos:function(e){return Xe(this,e)},getCursor:function(e){var t,n=this.sel;return t=null==e||"head"==e?n.head:"anchor"==e?n.anchor:"end"==e||e===!1?n.to:n.from,Ge(t)},somethingSelected:function(){return!Ue(this.sel.head,this.sel.anchor)},setCursor:se(function(e,t,n){var r=Xe(this,"number"==typeof e?Be(e,t||0):e);n?Ze(this,r):et(this,r,r)}),setSelection:se(function(e,t){et(this,Xe(this,e),Xe(this,t||e))}),extendSelection:se(function(e,t){Ze(this,Xe(this,e),t&&Xe(this,t))}),getSelection:function(e){return this.getRange(this.sel.from,this.sel.to,e)},replaceSelection:function(e,t,n){
We(this,{from:this.sel.from,to:this.sel.to,text:Ai(e),origin:n},t||"around")},undo:se(function(){Pe(this,"undo")}),redo:se(function(){Pe(this,"redo")}),setExtending:function(e){this.sel.extend=e},historySize:function(){var e=this.history;return{undo:e.done.length,redo:e.undone.length}},clearHistory:function(){this.history=bn(this.history.maxGeneration)},markClean:function(){this.cleanGeneration=this.changeGeneration()},changeGeneration:function(){return this.history.lastOp=this.history.lastOrigin=null,this.history.generation},isClean:function(e){return this.history.generation==(e||this.cleanGeneration)},getHistory:function(){return{done:Ln(this.history.done),undone:Ln(this.history.undone)}},setHistory:function(e){var t=this.history=bn(this.history.maxGeneration);t.done=e.done.slice(0),t.undone=e.undone.slice(0)},markText:function(e,t,n){return _t(this,Xe(this,e),Xe(this,t),n,"range")},setBookmark:function(e,t){var n={replacedWith:t&&(null==t.nodeType?t.widget:t),insertLeft:t&&t.insertLeft};return e=Xe(this,e),_t(this,e,e,n,"bookmark")},findMarksAt:function(e){e=Xe(this,e);var t=[],n=dn(this,e.line).markedSpans;if(n)for(var r=0;r<n.length;++r){var i=n[r];(null==i.from||i.from<=e.ch)&&(null==i.to||i.to>=e.ch)&&t.push(i.marker.parent||i.marker)}return t},getAllMarks:function(){var e=[];return this.iter(function(t){var n=t.markedSpans;if(n)for(var r=0;r<n.length;++r)null!=n[r].from&&e.push(n[r].marker)}),e},posFromIndex:function(e){var t,n=this.first;return this.iter(function(r){var i=r.text.length+1;return i>e?(t=e,!0):(e-=i,void++n)}),Xe(this,Be(n,t))},indexFromPos:function(e){e=Xe(this,e);var t=e.ch;return e.line<this.first||e.ch<0?0:(this.iter(this.first,e.line,function(e){t+=e.text.length+1}),t)},copy:function(e){var t=new vi(hn(this,this.first,this.first+this.size),this.modeOption,this.first);return t.scrollTop=this.scrollTop,t.scrollLeft=this.scrollLeft,t.sel={from:this.sel.from,to:this.sel.to,head:this.sel.head,anchor:this.sel.anchor,shift:this.sel.shift,extend:!1,goalColumn:this.sel.goalColumn},e&&(t.history.undoDepth=this.history.undoDepth,t.setHistory(this.getHistory())),t},linkedDoc:function(e){e||(e={});var t=this.first,n=this.first+this.size;null!=e.from&&e.from>t&&(t=e.from),null!=e.to&&e.to<n&&(n=e.to);var r=new vi(hn(this,t,n),e.mode||this.modeOption,t);return e.sharedHist&&(r.history=this.history),(this.linked||(this.linked=[])).push({doc:r,sharedHist:e.sharedHist}),r.linked=[{doc:this,isParent:!0,sharedHist:e.sharedHist}],r},unlinkDoc:function(t){if(t instanceof e&&(t=t.doc),this.linked)for(var n=0;n<this.linked.length;++n){var r=this.linked[n];if(r.doc==t){this.linked.splice(n,1),t.unlinkDoc(this);break}}if(t.history==this.history){var i=[t.id];cn(t,function(e){i.push(e.id)},!0),t.history=bn(),t.history.done=Ln(this.history.done,i),t.history.undone=Ln(this.history.undone,i)}},iterLinkedDocs:function(e){cn(this,e)},getMode:function(){return this.mode},getEditor:function(){return this.cm}}),vi.prototype.eachLine=vi.prototype.iter;var yi="iter insert remove copy getEditor".split(" ");for(var bi in vi.prototype)vi.prototype.hasOwnProperty(bi)&&Yn(yi,bi)<0&&(e.prototype[bi]=function(e){return function(){return e.apply(this.doc,arguments)}}(vi.prototype[bi]));Bn(vi),e.e_stop=Hn,e.e_preventDefault=Nn,e.e_stopPropagation=En;var ki,xi=0;e.on=Wn,e.off=Rn,e.signal=Pn;var wi=30,Ci=e.Pass={toString:function(){return"CodeMirror.Pass"}};Un.prototype={set:function(e,t){clearTimeout(this.id),this.id=setTimeout(t,e)}},e.countColumn=Vn;var _i=[""],Li=/[\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/,Si=/[\u0300-\u036F\u0483-\u0487\u0488-\u0489\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\uA66F\uA670-\uA672\uA674-\uA67D\uA69F\udc00-\udfff]/;e.replaceGetRect=function(e){ar=e};var $i=function(){if(Sr)return!1;var e=rr("div");return"draggable"in e||"dragDrop"in e}();Cr?lr=function(e,t){return 36==e.charCodeAt(t-1)&&39==e.charCodeAt(t)}:Nr&&!/Version\/([6-9]|\d\d)\b/.test(navigator.userAgent)?lr=function(e,t){return/\-[^ \-?]|\?[^ !\'\"\),.\-\/:;\?\]\}]/.test(e.slice(t-1,t+1))}:$r&&!/Chrome\/(?:29|[3-9]\d|\d\d\d)\./.test(navigator.userAgent)&&(lr=function(e,t){if(t>1&&45==e.charCodeAt(t-1)){if(/\w/.test(e.charAt(t-2))&&/[^\-?\.]/.test(e.charAt(t)))return!0;if(t>2&&/[\d\.,]/.test(e.charAt(t-2))&&/[\d\.,]/.test(e.charAt(t)))return!1}return/[~!#%&*)=+}\]|\"\.>,:;][({[<]|-[^\-?\.\u2010-\u201f\u2026]|\?[\w~`@#$%\^&*(_=+{[|><]|…[\w~`@#$%\^&*(_=+{[><]/.test(e.slice(t-1,t+1))});var Ti,Mi,Ai=3!="\n\nb".split(/\n/).length?function(e){for(var t=0,n=[],r=e.length;t<=r;){var i=e.indexOf("\n",t);i==-1&&(i=e.length);var o=e.slice(t,"\r"==e.charAt(i-1)?i-1:i),s=o.indexOf("\r");s!=-1?(n.push(o.slice(0,s)),t+=s+1):(n.push(o),t=i+1)}return n}:function(e){return e.split(/\r\n?|\n/)};e.splitLines=Ai;var Ni=window.getSelection?function(e){try{return e.selectionStart!=e.selectionEnd}catch(t){return!1}}:function(e){try{var t=e.ownerDocument.selection.createRange()}catch(n){}return!(!t||t.parentElement()!=e)&&0!=t.compareEndPoints("StartToEnd",t)},Ei=function(){var e=rr("div");return"oncopy"in e||(e.setAttribute("oncopy","return;"),"function"==typeof e.oncopy)}(),Di={3:"Enter",8:"Backspace",9:"Tab",13:"Enter",16:"Shift",17:"Ctrl",18:"Alt",19:"Pause",20:"CapsLock",27:"Esc",32:"Space",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"Left",38:"Up",39:"Right",40:"Down",44:"PrintScrn",45:"Insert",46:"Delete",59:";",91:"Mod",92:"Mod",93:"Mod",109:"-",107:"=",127:"Delete",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",63276:"PageUp",63277:"PageDown",63275:"End",63273:"Home",63234:"Left",63232:"Up",63235:"Right",63233:"Down",63302:"Insert",63272:"Delete"};e.keyNames=Di,function(){for(var e=0;e<10;e++)Di[e+48]=String(e);for(var e=65;e<=90;e++)Di[e]=String.fromCharCode(e);for(var e=1;e<=12;e++)Di[e+111]=Di[e+63235]="F"+e}();var Hi,Oi=function(){function e(e){return e<=255?t.charAt(e):1424<=e&&e<=1524?"R":1536<=e&&e<=1791?n.charAt(e-1536):1792<=e&&e<=2220?"r":"L"}var t="bbbbbbbbbtstwsbbbbbbbbbbbbbbssstwNN%%%NNNNNN,N,N1111111111NNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbbb,N%%%%NNNNLNNNNN%%11NLNNN1LNNNNNLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLL",n="rrrrrrrrrrrr,rNNmmmmmmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmrrrrrrrnnnnnnnnnn%nnrrrmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmmmmmmNmmmmrrrrrrrrrrrrrrrrrr",r=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/,i=/[stwN]/,o=/[LRr]/,s=/[Lb1n]/,a=/[1n]/,l="L";return function(t){if(!r.test(t))return!1;for(var n,c=t.length,u=[],d=0;d<c;++d)u.push(n=e(t.charCodeAt(d)));for(var d=0,f=l;d<c;++d){var n=u[d];"m"==n?u[d]=f:f=n}for(var d=0,h=l;d<c;++d){var n=u[d];"1"==n&&"r"==h?u[d]="n":o.test(n)&&(h=n,"r"==n&&(u[d]="R"))}for(var d=1,f=u[0];d<c-1;++d){var n=u[d];"+"==n&&"1"==f&&"1"==u[d+1]?u[d]="1":","!=n||f!=u[d+1]||"1"!=f&&"n"!=f||(u[d]=f),f=n}for(var d=0;d<c;++d){var n=u[d];if(","==n)u[d]="N";else if("%"==n){for(var p=d+1;p<c&&"%"==u[p];++p);for(var m=d&&"!"==u[d-1]||p<c-1&&"1"==u[p]?"1":"N",g=d;g<p;++g)u[g]=m;d=p-1}}for(var d=0,h=l;d<c;++d){var n=u[d];"L"==h&&"1"==n?u[d]="L":o.test(n)&&(h=n)}for(var d=0;d<c;++d)if(i.test(u[d])){for(var p=d+1;p<c&&i.test(u[p]);++p);for(var v="L"==(d?u[d-1]:l),y="L"==(p<c-1?u[p]:l),m=v||y?"L":"R",g=d;g<p;++g)u[g]=m;d=p-1}for(var b,k=[],d=0;d<c;)if(s.test(u[d])){var x=d;for(++d;d<c&&s.test(u[d]);++d);k.push({from:x,to:d,level:0})}else{var w=d,C=k.length;for(++d;d<c&&"L"!=u[d];++d);for(var g=w;g<d;)if(a.test(u[g])){w<g&&k.splice(C,0,{from:w,to:g,level:1});var _=g;for(++g;g<d&&a.test(u[g]);++g);k.splice(C,0,{from:_,to:g,level:2}),w=g}else++g;w<d&&k.splice(C,0,{from:w,to:d,level:1})}return 1==k[0].level&&(b=t.match(/^\s+/))&&(k[0].from=b[0].length,k.unshift({from:0,to:b[0].length,level:0})),1==Kn(k).level&&(b=t.match(/\s+$/))&&(Kn(k).to-=b[0].length,k.push({from:c-b[0].length,to:c,level:0})),k[0].level!=Kn(k).level&&k.push({from:c,to:c,level:k[0].level}),k}}();return e.version="3.15.0",e}(),T=/^(\s*)([*+-]|(\d+)\.)([\w+(\s+\w+)]|[\s*])/,M=/^(\s*)([*+-]|(\d+)\.)(\s*)$/,A="*+-",N=function(e,t){return e.getStateAfter(t.line).list||null},E=function(e){var t=e.getCursor();return N(e,t)};S.commands.shiftTabAndIndentContinueMarkdownList=function(e){var t=E(e);return null!==t?void e.execCommand("insertTab"):void e.execCommand("indentLess")},S.commands.tabAndIndentContinueMarkdownList=function(e){var t=E(e);return null!==t?void e.execCommand("insertTab"):void e.execCommand("indentMore")},S.commands.newlineAndIndentContinueMarkdownList=function(e){var t,n,r,i,o;if(t=e.getCursor(),n=e.getTokenAt(t),i=e.getLine(t.line).match(M),o=N(e,t),!o&&i)return e.replaceRange("",{line:t.line,ch:n.start},{line:t.line,ch:n.end}),e.execCommand("delLineLeft"),void e.execCommand("newlineAndIndent");if(!o||!(r=e.getLine(t.line).match(T)))return void e.execCommand("newlineAndIndent");var s=r[1],a=" ",l=A.indexOf(r[2])>=0?r[2]:parseInt(r[3],10)+1+".";e.replaceSelection("\n"+s+l+a,"end")},S.defineMode("xml",function(e,t){function n(e,t){function n(n){return t.tokenize=n,n(e,t)}var i=e.next();if("<"==i){if(e.eat("!"))return e.eat("[")?e.match("CDATA[")?n(o("atom","]]>")):null:e.match("--")?n(o("comment","-->")):e.match("DOCTYPE",!0,!0)?(e.eatWhile(/[\w\._\-]/),n(s(1))):null;if(e.eat("?"))return e.eatWhile(/[\w\._\-]/),t.tokenize=o("meta","?>"),"meta";var a=e.eat("/");b="";for(var l;l=e.eat(/[^\s\u00a0=<>\"\'\/?]/);)b+=l;return b?(k=a?"closeTag":"openTag",t.tokenize=r,"tag"):"error"}if("&"==i){var c;return c=e.eat("#")?e.eat("x")?e.eatWhile(/[a-fA-F\d]/)&&e.eat(";"):e.eatWhile(/[\d]/)&&e.eat(";"):e.eatWhile(/[\w\.\-:]/)&&e.eat(";"),c?"atom":"error"}return e.eatWhile(/[^&<]/),null}function r(e,t){var r=e.next();return">"==r||"/"==r&&e.eat(">")?(t.tokenize=n,k=">"==r?"endTag":"selfcloseTag","tag"):"="==r?(k="equals",null):"<"==r?"error":/[\'\"]/.test(r)?(t.tokenize=i(r),t.stringStartCol=e.column(),t.tokenize(e,t)):(e.eatWhile(/[^\s\u00a0=<>\"\']/),"word")}function i(e){var t=function(t,n){for(;!t.eol();)if(t.next()==e){n.tokenize=r;break}return"string"};return t.isInAttribute=!0,t}function o(e,t){return function(r,i){for(;!r.eol();){if(r.match(t)){i.tokenize=n;break}r.next()}return e}}function s(e){return function(t,r){for(var i;null!=(i=t.next());){if("<"==i)return r.tokenize=s(e+1),r.tokenize(t,r);if(">"==i){if(1==e){r.tokenize=n;break}return r.tokenize=s(e-1),r.tokenize(t,r)}}return"meta"}}function a(){for(var e=arguments.length-1;e>=0;e--)x.cc.push(arguments[e])}function l(){return a.apply(null,arguments),!0}function c(e,t){var n=$.doNotIndent.hasOwnProperty(e)||x.context&&x.context.noIndent;x.context={prev:x.context,tagName:e,indent:x.indented,startOfLine:t,noIndent:n}}function u(){x.context&&(x.context=x.context.prev)}function d(e){if("openTag"==e)return x.tagName=b,x.tagStart=w.column(),l(m,f(x.startOfLine));if("closeTag"==e){var t=!1;return x.context?x.context.tagName!=b&&($.implicitlyClosed.hasOwnProperty(x.context.tagName.toLowerCase())&&u(),t=!x.context||x.context.tagName!=b):t=!0,t&&(C="error"),l(h(t))}return l()}function f(e){return function(t){var n=x.tagName;return x.tagName=x.tagStart=null,"selfcloseTag"==t||"endTag"==t&&$.autoSelfClosers.hasOwnProperty(n.toLowerCase())?(p(n.toLowerCase()),l()):"endTag"==t?(p(n.toLowerCase()),c(n,e),l()):l()}}function h(e){return function(t){return e&&(C="error"),"endTag"==t?(u(),l()):(C="error",l(arguments.callee))}}function p(e){for(var t;;){if(!x.context)return;if(t=x.context.tagName.toLowerCase(),!$.contextGrabbers.hasOwnProperty(t)||!$.contextGrabbers[t].hasOwnProperty(e))return;u()}}function m(e){return"word"==e?(C="attribute",l(g,m)):"endTag"==e||"selfcloseTag"==e?a():(C="error",l(m))}function g(e){return"equals"==e?l(v,m):($.allowMissing?"word"==e&&(C="attribute"):C="error","endTag"==e||"selfcloseTag"==e?a():l())}function v(e){return"string"==e?l(y):"word"==e&&$.allowUnquoted?(C="string",l()):(C="error","endTag"==e||"selfCloseTag"==e?a():l())}function y(e){return"string"==e?l(y):a()}var b,k,x,w,C,_=e.indentUnit,L=t.multilineTagIndentFactor||1,S=t.multilineTagIndentPastTag||!0,$=t.htmlMode?{autoSelfClosers:{area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},implicitlyClosed:{dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},contextGrabbers:{dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}},doNotIndent:{pre:!0},allowUnquoted:!0,allowMissing:!0}:{autoSelfClosers:{},implicitlyClosed:{},contextGrabbers:{},doNotIndent:{},allowUnquoted:!1,allowMissing:!1},T=t.alignCDATA;return{startState:function(){return{tokenize:n,cc:[],indented:0,startOfLine:!0,tagName:null,tagStart:null,context:null}},token:function(e,t){if(!t.tagName&&e.sol()&&(t.startOfLine=!0,t.indented=e.indentation()),e.eatSpace())return null;C=k=b=null;var n=t.tokenize(e,t);if(t.type=k,(n||k)&&"comment"!=n)for(x=t,w=e;;){var r=t.cc.pop()||d;if(r(k||n))break}return t.startOfLine=!1,C||n},indent:function(e,t,i){var o=e.context;if(e.tokenize.isInAttribute)return e.stringStartCol+1;if(e.tokenize!=r&&e.tokenize!=n||o&&o.noIndent)return i?i.match(/^(\s*)/)[0].length:0;if(e.tagName)return S?e.tagStart+e.tagName.length+2:e.tagStart+_*L;if(T&&/<!\[CDATA\[/.test(t))return 0;for(o&&/^<\//.test(t)&&(o=o.prev);o&&!o.startOfLine;)o=o.prev;return o?o.indent+_:0},electricChars:"/",blockCommentStart:"<!--",blockCommentEnd:"-->",configuration:t.htmlMode?"html":"xml",helperType:t.htmlMode?"html":"xml"}}),S.defineMIME("text/xml","xml"),S.defineMIME("application/xml","xml"),S.mimeModes.hasOwnProperty("text/html")||S.defineMIME("text/html",{name:"xml",htmlMode:!0}),S.defineMode("markdown",function(e,t){function n(e,t,n){return t.f=t.inline=n,n(e,t)}function r(e,t,n){return t.f=t.block=n,n(e,t)}function i(e){return e.linkTitle=!1,e.em=!1,e.strong=!1,e.strike=!1,e.quote=0,g||e.f!=s||(e.f=u,e.block=o),e.trailingSpace=0,e.trailingSpaceNewLine=!1,e.thisLineHasContent=!1,null}function o(e,i){var o=i.list!==!1;if(i.list!==!1&&i.indentationDiff>=0?(i.indentationDiff<4&&(i.indentation-=i.indentationDiff),i.list=null):i.list!==!1&&i.indentation>0?(i.list=null,i.listDepth=Math.floor(i.indentation/4)):i.list!==!1&&(i.list=!1,i.listDepth=0),i.indentationDiff>=4)return i.indentation-=4,e.skipToEnd(),w;if(e.eatSpace())return null;if("#"===e.peek()||i.prevLineHasContent&&e.match(F))i.header=!0;else if(e.eat(">"))for(i.indentation++,i.quote=1,e.eatSpace();e.eat(">");)e.eatSpace(),i.quote++;else{if("["===e.peek())return n(e,i,f);if(e.match(R,!0))return M;if(i.prevLineHasContent&&!o||!e.match(P,!0)&&!e.match(z,!0)){if(t.fencedCodeBlocks&&e.match(/^```([\w+#]*)/,!0))return i.localMode=b(RegExp.$1),i.localMode&&(i.localState=i.localMode.startState()),r(e,i,a),w}else i.indentation+=4,i.list=!0,i.listDepth++,t.taskLists&&e.match(j,!1)&&(i.taskList=!0)}return n(e,i,i.inline)}function s(e,t){var n=v.token(e,t.htmlState);return g&&"tag"===n&&"openTag"!==t.htmlState.type&&!t.htmlState.context&&(t.f=u,t.block=o),t.md_inside&&e.current().indexOf(">")!=-1&&(t.f=u,t.block=o,t.htmlState.context=void 0),n}function a(e,t){return e.sol()&&e.match(/^```/,!0)?(t.localMode=t.localState=null,t.f=u,t.block=o,w):t.localMode?t.localMode.token(e,t.localState):(e.skipToEnd(),w)}function l(e){var t=[];if(e.taskOpen)return"meta";if(e.taskClosed)return"property";if(e.strong&&t.push(I),e.strike&&t.push(W),e.em&&t.push(O),e.linkText&&t.push(D),e.code&&t.push(w),e.header&&t.push(x),e.quote&&t.push(e.quote%2?C:_),e.list!==!1){var n=(e.listDepth-1)%3;n?1===n?t.push($):t.push(T):t.push(L)}return e.trailingSpaceNewLine?t.push("trailing-space-new-line"):e.trailingSpace&&t.push("trailing-space-"+(e.trailingSpace%2?"a":"b")),t.length?t.join(" "):null}function c(e,t){if(e.match(q,!0))return l(t)}function u(e,i){var o=i.text(e,i);if("undefined"!=typeof o)return o;if(i.list)return i.list=null,l(i);if(i.taskList){var a="x"!==e.match(j,!0)[1];return a?i.taskOpen=!0:i.taskClosed=!0,i.taskList=!1,l(i)}i.taskOpen=!1,i.taskClosed=!1;var c=e.next();if("\\"===c)return e.next(),l(i);if(i.linkTitle){i.linkTitle=!1;var u=c;"("===c&&(u=")"),u=(u+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1");var f="^\\s*(?:[^"+u+"\\\\]+|\\\\\\\\|\\\\.)"+u;if(e.match(new RegExp(f),!0))return H}if("`"===c){var h=l(i),p=e.pos;e.eatWhile("`");var g=1+e.pos-p;return i.code?g===k?(i.code=!1,h):l(i):(k=g,i.code=!0,l(i))}if(i.code)return l(i);if("!"===c&&e.match(/\[[^\]]*\] ?(?:\(|\[)/,!1))return e.match(/\[[^\]]*\]/),i.inline=i.f=d,A;if("["===c&&e.match(/.*\](\(| ?\[)/,!1))return i.linkText=!0,l(i);if("]"===c&&i.linkText){var v=l(i);return i.linkText=!1,i.inline=i.f=d,v}if("<"===c&&e.match(/^(https?|ftps?):\/\/(?:[^\\>]|\\.)+>/,!1))return n(e,i,m(N,">"));if("<"===c&&e.match(/^[^> \\]+@(?:[^\\>]|\\.)+>/,!1))return n(e,i,m(E,">"));if("<"===c&&e.match(/^\w/,!1)){if(e.string.indexOf(">")!=-1){var y=e.string.substring(1,e.string.indexOf(">"));/markdown\s*=\s*('|"){0,1}1('|"){0,1}/.test(y)&&(i.md_inside=!0)}return e.backUp(1),r(e,i,s)}if("<"===c&&e.match(/^\/\w*?>/))return i.md_inside=!1,"tag";var b=!1;if(!t.underscoresBreakWords&&"_"===c&&"_"!==e.peek()&&e.match(/(\w)/,!1)){var x=e.pos-2;if(x>=0){var w=e.string.charAt(x);"_"!==w&&w.match(/(\w)/,!1)&&(b=!0)}}var h=l(i);if("*"===c||"_"===c&&!b){if(i.strong===c&&e.eat(c)&&e.peek(c))return i.strong=!1,h;if(!i.strong&&e.eat(c)&&e.peek(c))return i.strong=c,l(i);if(i.em===c)return i.em=!1,h;if(!i.em)return i.em=c,l(i)}else if("~"===c){if(i.strike===c&&e.eat(c))return i.strike=!1,h;if(!i.strike&&e.eat(c))return i.strike=c,l(i)}else if(" "===c&&(e.eat("*")||e.eat("_"))){if(" "===e.peek())return l(i);e.backUp(1)}return" "===c&&(e.match(/ +$/,!1)?i.trailingSpace++:i.trailingSpace&&(i.trailingSpaceNewLine=!0)),l(i)}function d(e,t){if(e.eatSpace())return null;var r=e.next();return"("===r||"["===r?n(e,t,m(H,"("===r?")":"]")):"error"}function f(e,t){return e.match(/^[^\]]*\]:/,!0)?(t.f=h,D):n(e,t,u)}function h(e,t){return e.eatSpace()?null:(e.match(/^[^\s]+/,!0),void 0===e.peek()?t.linkTitle=!0:e.match(/^(?:\s+(?:"(?:[^"\\]|\\\\|\\.)+"|'(?:[^'\\]|\\\\|\\.)+'|\((?:[^)\\]|\\\\|\\.)+\)))?/,!0),t.f=t.inline=u,H)}function p(e){return B[e]||(e=(e+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),B[e]=new RegExp("^(?:[^\\\\]|\\\\.)*?("+e+")")),B[e]}function m(e,t,n){return n=n||u,function(r,i){return r.match(p(t)),i.inline=i.f=n,e}}var g=S.modes.hasOwnProperty("xml"),v=S.getMode(e,g?{name:"xml",htmlMode:!0}:"text/plain"),y={html:"htmlmixed",js:"javascript",json:"application/json",c:"text/x-csrc","c++":"text/x-c++src",java:"text/x-java",csharp:"text/x-csharp","c#":"text/x-csharp",scala:"text/x-scala"},b=function(){var t,n,r={},i={},o=[];for(var s in S.modes)S.modes.propertyIsEnumerable(s)&&o.push(s);for(t=0;t<o.length;t++)r[o[t]]=o[t];var a=[];for(var s in S.mimeModes)S.mimeModes.propertyIsEnumerable(s)&&a.push({mime:s,mode:S.mimeModes[s]});for(t=0;t<a.length;t++)n=a[t].mime,i[n]=a[t].mime;for(var l in y)(y[l]in r||y[l]in i)&&(r[l]=y[l]);return function(t){return r[t]?S.getMode(e,r[t]):null}}();void 0===t.underscoresBreakWords&&(t.underscoresBreakWords=!0),void 0===t.fencedCodeBlocks&&(t.fencedCodeBlocks=!1),void 0===t.taskLists&&(t.taskLists=!1);var k=0,x="header",w="comment",C="atom",_="number",L="variable-2",$="variable-3",T="keyword",M="hr",A="tag",N="link",E="link",D="link",H="string",O="em",I="strong",W="strike",R=/^([*\-=_])(?:\s*\1){4,}\s*$/,P=/^[*\-+]\s+/,z=/^[0-9]+\.\s+/,j=/^\[(x| )\](?=\s)/,F=/^(?:\={1,}|-{1,})$/,q=/^[^!\[\]*_~\\<>` "'(]+/,B=[];return{startState:function(){return{f:o,prevLineHasContent:!1,thisLineHasContent:!1,block:o,htmlState:S.startState(v),indentation:0,inline:u,text:c,linkText:!1,linkTitle:!1,em:!1,strong:!1,strike:!1,header:!1,taskList:!1,list:!1,listDepth:0,quote:0,trailingSpace:0,trailingSpaceNewLine:!1}},copyState:function(e){return{f:e.f,prevLineHasContent:e.prevLineHasContent,thisLineHasContent:e.thisLineHasContent,block:e.block,htmlState:S.copyState(v,e.htmlState),indentation:e.indentation,localMode:e.localMode,localState:e.localMode?S.copyState(e.localMode,e.localState):null,inline:e.inline,text:e.text,linkTitle:e.linkTitle,em:e.em,strong:e.strong,strike:e.strike,header:e.header,taskList:e.taskList,list:e.list,listDepth:e.listDepth,quote:e.quote,trailingSpace:e.trailingSpace,trailingSpaceNewLine:e.trailingSpaceNewLine,md_inside:e.md_inside}},token:function(e,t){if(e.sol()){if(e.match(/^\s*$/,!0))return t.prevLineHasContent=!1,i(t);t.prevLineHasContent=t.thisLineHasContent,t.thisLineHasContent=!0,t.header=!1,t.taskList=!1,t.code=!1,t.trailingSpace=0,t.trailingSpaceNewLine=!1,t.f=t.block;var n=e.match(/^\s*/,!0)[0].replace(/\t/g,"    ").length,r=4*Math.floor((n-t.indentation)/4);r>4&&(r=4);var o=t.indentation+r;if(t.indentationDiff=o-t.indentation,t.indentation=o,n>0)return null}return t.f(e,t)},blankLine:i,getType:l}},"xml"),S.defineMIME("text/x-markdown","markdown");var D=/Mac/.test(navigator.platform),H={"Cmd-Alt-1":s,"Cmd-Alt-2":a,"Cmd-B":l,"Cmd-I":c,"Cmd-K":p,"Cmd-Alt-I":g,"Cmd-'":u,"Cmd-,":d,"Cmd-Alt-L":h,"Cmd-L":f,"Cmd-Z":b,"Cmd-Shift-Z":k};window.cmDrawLink=m,window.cmDrawImage=v,window.cmDrawImageUp=y;var O=["|",{name:"headline",action:s,title:"标题一（Ctrl+Alt+1）"},{name:"heading",action:a,title:"标题二（Ctrl+Alt+2）"},{name:"bold",action:l,title:"粗体（Ctrl+B）"},{name:"italic",action:c,title:"斜体（Ctrl+I）"},"|",{name:"quote-left",action:u,title:"引用（Ctrl+’）"},{name:"code",action:d,title:"插入代码片（Ctrl+,）"},{name:"list-ul",action:f,title:"无序列表（Ctrl+L）"},{name:"list-ol",action:h,title:"有序列表（Ctrl+Alt+L）"},"|",{name:"link",title:"添加链接（Ctrl+K）"},{name:"picture",title:"添加图片（Ctrl+Alt+I）"},"|",{name:"reply",action:b,title:"撤退（Ctrl+Z）"},{name:"share-alt",action:k,title:"前进（Ctrl+Shift+Z）"},"|",{name:"info",action:"http://ask.csdn.net/pages/markdown",title:"markdown语法参考"},{name:"preview",action:x,title:"预览"},"|"];L.toolbar=O,L.markdown=function(e){if(window.marked)return marked(e)},L.prototype.render=function(e){if(e||(e=this.element||document.getElementsByTagName("textarea")[0]),!this._rendered||this._rendered!==e){this.element=e;var n=this.options,r=this,i={};for(var o in H)!function(e){i[t(e)]=function(t){H[e](r)}}(o);i.Enter="newlineAndIndentContinueMarkdownList",i.Tab="tabAndIndentContinueMarkdownList",i["Shift-Tab"]="shiftTabAndIndentContinueMarkdownList",this.codemirror=S.fromTextArea(e,{mode:"markdown",theme:"paper",tabSize:"2",indentWithTabs:!0,lineNumbers:!1,autofocus:!0,extraKeys:i}),n.toolbar!==!1&&this.createToolbar(),n.status!==!1&&this.createStatusbar(),this._rendered=this.element}},L.prototype.createToolbar=function(e){if(e=e||this.options.toolbar,e&&0!==e.length){var t=document.createElement("div");t.className="editor-toolbar";var o=this;o.toolbar={};for(var s=0;s<e.length;s++)!function(e){var i;i=e.name?n(e.name,e):"|"===e?r():n(e),e.action&&("function"==typeof e.action?i.onclick=function(t){e.action(o)}:"string"==typeof e.action&&(i.href=e.action,i.target="_blank")),e.title&&(i.title=e.title),o.toolbar[e.name||e]=i,t.appendChild(i)}(e[s]);var a=this.codemirror;a.on("cursorActivity",function(){var e=i(a);for(var t in o.toolbar)!function(t){var n=o.toolbar[t];e[t]?n.className+=" active":n.className=n.className.replace(/\s*active\s*/g,"")}(t)});var l=a.getWrapperElement();return l.parentNode.insertBefore(t,l),t}},L.prototype.createStatusbar=function(e){if(e=e||this.options.status,e&&0!==e.length){var t=document.createElement("div");t.className="editor-statusbar";for(var n,r=this.codemirror,i=0;i<e.length;i++)!function(e){var i=document.createElement("span");i.className=e,"words"===e?(i.innerHTML="0",r.on("update",function(){i.innerHTML=_(r.getValue())})):"lines"===e?(i.innerHTML="0",r.on("update",function(){i.innerHTML=r.lineCount()})):"cursor"===e&&(i.innerHTML="0:0",r.on("cursorActivity",function(){n=r.getCursor(),i.innerHTML=n.line+":"+n.ch})),t.appendChild(i)}(e[i]);var o=this.codemirror.getWrapperElement();return o.parentNode.insertBefore(t,o.nextSibling),t}},L.prototype.value=function(e){return e?(this.codemirror.getDoc().setValue(e),this):this.codemirror.getValue()},L.toggleHeadline=s,L.toggleHeading=a,L.toggleBold=l,L.toggleItalic=c,L.toggleBlockquote=u,L.drawCode=d,L.toggleUnOrderedList=f,L.toggleOrderedList=h,L.drawLink=p,L.drawImage=g,L.undo=b,L.redo=k,L.togglePreview=x,L.toggleFullScreen=o,L.prototype.toggleHeadline=function(){s(this)},L.prototype.toggleHeading=function(){a(this)},L.prototype.toggleBold=function(){l(this)},L.prototype.toggleItalic=function(){c(this)},L.prototype.toggleBlockquote=function(){u(this)},L.prototype.drawCode=function(){d(this)},L.prototype.toggleUnOrderedList=function(){f(this)},L.prototype.toggleOrderedList=function(){h(this)},L.prototype.drawLink=function(){p(this)},L.prototype.drawImage=function(){g(this)},L.prototype.undo=function(){b(this)},L.prototype.redo=function(){k(this)},L.prototype.togglePreview=function(){x(this)},L.prototype.toggleFullScreen=function(){o(this)},e.Editor=L}(this);var editor_change_ask_o_domain="";!function(){$(function(){function e(e,t){var n=E[e];if(void 0===n){n=E[e]=[];var r=arguments.callee;$('<iframe class="poxy_uc" src="'+e+'" style="display:none">').load(function(){n.contentWindow=this.contentWindow,r(e,t)}).prependTo("body")}else if(void 0===n.contentWindow)n.push(t);else do n.contentWindow.jQuery.ajax(t);while(t=n.shift())}function t(t){var n=$(document).width(),i=$(document).height(),o=$('<div class="marker"></div>');$.browser&&$.browser.msie&&(n-=18),o.css({opacity:.5,width:n+"px",height:i+"px"}),$("body").append(o),setTimeout(function(){t.show(),t.css({opacity:1}),$(".CodeMirror").removeClass("CodeMirror-focused")},200);var l=t.find('[nodetype="cancel"]'),c=t.find('[nodetype="close"]');if(l.add(c).unbind("click"),l.add(c).bind("click",function(){$("#common_ask_div_sc").css("display","none"),t.css({opacity:0});var e=t.find('[nodetype="ok"]');return e.css("background-color","#be0000"),D=!1,setTimeout(function(){t.hide()},350),$(".marker").remove(),!1}),t.hasClass("ask_first"))r({$inputBox:$(".comm_ask_first #askInput"),$container:$("body > #common_ask_div_sc"),searchUrl:_,isFirst:!0});else{$(".err_div").css("display","none"),$(" .comm_ask_second #askInputSecond").val(""),$(" .comm_ask_second #wmd-input").val(""),$(" .comm_ask_second span.tag").remove(),$(" .comm_ask_second  #ask2_tagRecomm_div a").remove(),$(".comm_ask_second #chk_cb").attr("checked",!1),$(".comm_ask_second #cb_num").attr("readonly",!0),$(" .comm_ask_second #cb_num").val(""),$(" .comm_ask_second #wmd-preview").empty(),$(" .comm_ask_second [name='txtSearchTags']").val(""),$(" .comm_ask_second #divSearchTags input").focus(function(){$(" .comm_ask_second #divSearchTags").addClass("focus")}).blur(function(){$(" .comm_ask_second #divSearchTags").removeClass("focus")}),$(".comm_ask_second #chk_cb").click(function(){$(".comm_ask_second #chk_cb")[0].checked?$(".comm_ask_second #cb_num").attr("readonly",!1):($(".comm_ask_second #cb_num").attr("readonly",!0),$(".comm_ask_second #cb_num").val(""),w=!1)});var u=t.find('[nodetype="ok"]');u.unbind("click"),u.bind("click",function(){function t(e,t,r,i,o){return t&&""==t[0]||0==t.length?(mess="请输入"+r,$(".err_div").css("display","block"),$(".err_txt").text(mess),e.focus(),$(n).css("background-color","#be0000"),D=!1,!1):!(t.length<i||t.length>o)||(mess="请输入长度为"+i+"-"+o+"的"+r,$(".err_txt").text(mess),$(".err_div").css("display","block"),e.focus(),$(n).css("background-color","#be0000"),D=!1,!1)}var n=this;if(!D){D=!0,$(this).css("background-color","#999");var r=$(".comm_ask_second #askInputSecond").val(),i=H.codemirror.getValue(),o=$(".comm_ask_second [name='txtSearchTags']").val(),s=window.location.hostname,a=$(" .comm_ask_second #chk_cb")[0].checked,l=$(" .comm_ask_second #cb_num").val();if($(".err_div").css("display","none"),!t($(" .comm_ask_second #askInputSecond"),r,"问题标题",10,50))return!1;if(!t($(" .comm_ask_second #wmd-input"),i,"问题描述",30,1e4))return!1;if(!t($(" .comm_ask_second #divSearchTags"),o.split(","),"问题标签",1,5))return $(" .comm_ask_second #divSearchTags").addClass("focus"),!1;var c=$(".comm_ask_second #cb_num").val();if($(".comm_ask_second #chk_cb")[0].checked&&!/^[1-9]\d*$/.test(c))return $(".err_div").css("display","block"),$(".err_txt").text("我要悬赏只能录入数字！"),$(".comm_ask_second #cb_num").focus(),$(n).css("background-color","#be0000"),D=!1,!1;if(w)return $(".err_div").css("display","block"),$(n).css("background-color","#be0000"),D=!1,!1;var u=document.domain;return document.domain="csdn.net",e(T,{type:"post",data:{"question[title]":r,"question[body]":i,"question[tag_list]":o,"question[from_type]":s,"question[is_reward]":a,"question[coin]":l},url:M,dataType:"json",success:function(e){if(document.domain=u,e.status){$(".comm_ask_second").css("display","none"),$(n).css("background-color","#be0000"),D=!1,$(".marker").remove();var t="//ask.csdn.net/questions/"+e.id;window.open(t,"target=_blank,location=1"),alert("你的问题已发布到技术问答频道。")}else $(".err_div").css("display","block"),$(".err_txt").text(e.msg),$(n).css("background-color","#be0000"),D=!1},error:function(e){document.domain=u}}),!1}}),r({$inputBox:$(".comm_ask_second #askInputSecond"),$container:$("body > #common_ask_div_sc"),searchUrl:_,isFirst:!1}),$(".comm_ask_second .CodeMirror textarea").bind("focus",function(){$(".CodeMirror").addClass("CodeMirror-focused")}),$(".comm_ask_second #askInputSecond").bind("blur",function(){var e=$(".comm_ask_second #askInputSecond").val(),t=H.codemirror.getValue();setTimeout(function(){$("#div_sc").css("display","none")},400),s(e,t)}),$(".comm_ask_second .CodeMirror textarea").bind("blur",function(){var e=$(".comm_ask_second #askInputSecond").val(),t=H.codemirror.getValue();s(e,t)}),$(".comm_ask_second #cb_num").bind("blur",function(){if($(".comm_ask_second #chk_cb")[0].checked){if($(".err_div").css("display","none"),!/^[0-9]\d*$/.test($(".comm_ask_second #cb_num").val()))return $(".err_div").css("display","block"),$(".err_txt").text("我要悬赏只能录入数字！"),$(".comm_ask_second #cb_num").focus(),!1;$.ajax({type:"get",url:A,dataType:"jsonp",jsonp:"callback",async:!1,success:function(e){0==e.error?$(".comm_ask_second #cb_num").val()>e.score?($(".err_div").css("display","block"),$(".err_txt").text("您的C币余额不足"),w=!0):w=!1:($(".err_div").css("display","block"),$(".err_txt").text(e.msg),w=!0)},error:function(e){}})}}),a(".comm_ask_second #divSearchTags",S,".comm_ask_second input[name='txtSearchTags']")}}function n(){$("body > .ask_first").find('[nodetype="close"]').click(),t($("body > .ask_second"))}function r(e){$("body").click(function(t){var n=t.target;$(n).closest("#common_ask_div_sc").length<1&&e.$container.css("display","none")});var t=e.$inputBox,n=e.$container,r=(e.searchUrl,e.isFirst),o=-1,s="";n.css("display","none"),t.css("autocomplete","off"),n.css("z-index","1100"),t[0].onkeyup=function(e){var o=e||event;if(!(40==o.keyCode||38==o.keyCode||27==o.keyCode||o.keyCode>=113&&o.keyCode<=123||16==o.keyCode||17==o.keyCode||18==o.keyCode||9==o.keyCode||20==o.keyCode)){n.css("opacity",0);var a=this.getBoundingClientRect(),l=document.body.scrollTop||document.documentElement.scrollTop;n.css("left",a.left),n.css("top",a.bottom+l);var c=this.value;this.value.length>0?i(c,n,t,r):n.css("display","none"),s=c}},t[0].onkeydown=function(e){var r=e||event;if(27==r.keyCode&&(n.css("display","none"),t.val(s)),13==r.keyCode&&n.css("display","none"),40==r.keyCode){o++;var i=$(".sItem",n),a=i.length;if(o===a&&(o=-1),i.removeClass("sItemHover"),o!=-1){var l=i.eq(o);
l.addClass("sItemHover"),t.val($(".sfirst",l).text())}else t.val(s)}if(38==r.keyCode){o--;var i=$(".sItem",n),a=i.length;if(o==-2&&(o=a-1),i.removeClass("sItemHover"),o!=-1){var l=i.eq(o);l.addClass("sItemHover"),t.val($(".sfirst",l).text())}else t.val(s)}}}function i(e,t,n,r){t.css("display","block"),$.ajax({type:"get",url:_,data:{query:e,fields:"title,id,comments"},dataType:"jsonp",jsonp:"callback",async:!1,success:function(e){null!=e&&e.contents&&o(t,e.contents,n,r)},error:function(e){}})}function o(e,t,r,i){i?e.html('<div class="sTitle">可能存在类似的问题：</div><div class="sFooter"><a class="sFirstNewAsk">我想提一个新问题</a></div>'):e.html('<div class="sTitle">可能存在类似的问题：</div>');var o='<div class="sItem clearfix"><a href="{2}" target="_blank"><span class="sfirst">{0}</span><span class="ssecond">{1}</span></a></div>';t.length>0&&e.css("opacity",1);for(var s=0;s<t.length;s++){var a=t[s],l=o.replace(/\{0\}/,a.title).replace(/\{1\}/,a.comments+"个回答").replace(/\{2\}/,N+a.id);i?$(".sFooter",e).before(l):e.append(l)}i&&($("#common_ask_div_sc .sFirstNewAsk").unbind("click"),$("#common_ask_div_sc .sFirstNewAsk").bind("click",function(){n()})),$(".sItem",e).each(function(t,n){var r=t,i=$(n);i.bind("mouseover",function(){$(".sItem",e).removeClass("sItemHover"),$(this).addClass("sItemHover"),nowItem=r}),i.bind("click",function(){e.css("display","none")})})}function s(t,n){if(""!=t||""!=n){var r=JSON.stringify({title:t,body:n,size:4}),i=document.domain;document.domain="csdn.net",e(L,{headers:{"X-acl-token":"Yz3GAP4stGOIrLaIrnDed-uThp8K"},type:"POST",url:S+"?dataType=json",data:r,contentType:"application/json",dataType:"json",success:function(e){if(document.domain=i,null!=e&&e.length>0){var t=$(".comm_ask_second #ask2_tagRecomm_div");t.html('<span class="drt_tit">推荐标签：</span>');for(var n='<a href="#" class="se_key">{0}</a>',r=e,o=0;o<r.length;o++){var s=r[o];if(""!=s.name){var a=n.replace(/\{0\}/,s.name+"&nbsp;&nbsp;＋");if(t.append(a),4==o)break}}try{window.trackingAd(t)}catch(l){}$(".comm_ask_second .se_key").each(function(e,t){var n=$(t);n.bind("click",function(){for(var e=$(".comm_ask_second input[name='txtSearchTags']"),t=e.val(),r=t.split(","),i=n.text(),o=i.substring(0,i.length-3),s=0;s<r.length;s++)if(r[s]===o)return;var a=t;if(!(r.length>=5)){var l=$(".comm_ask_second #divSearchTags"),c=l.find("input"),u=c[0].previousSibling;r.length>=5&&u&&c[0].parentNode.removeChild(u),c.before('<span class="tag"><span>'+o+'</span><a title="删除标签" href="javascript:;">×</a></span>');var d=""==a?o:a+","+o;return e.val(d),!1}})})}},error:function(e){document.domain=i}})}}function a(e,t,n){function r(e,t){for(var n=0;n<e.length;n++)e[n]==t&&e.splice(n,1);return e}var i=$(e)[0],o=$(e).find("input")[0],s=-1,a="",h=[],p=document.createElement("ul");p.className="complete_list";var m=document.getElementsByTagName("body")[0];m.appendChild(p),o.onkeyup=function(e){var t=e||event;return 40!=t.keyCode&&38!=t.keyCode&&13!=t.keyCode&&($(this).removeAttr("style"),8==t.keyCode&&""==o.value?(p.style.display="none",!1):void $.ajax({type:"get",url:"https://recommend-api.csdn.net/tag/complete?",data:{query:o.value},dataType:"jsonp",success:function(e){var t=f(o);document.body.scrollTop||document.documentElement.scrollTop;s=-1,a=o.value;var n=e.suggestions;if(0!=n.length){var r=$(window).height()-t.top;$(p).empty(),$(p).css({left:t.left,bottom:r});for(var i=0;i<n.length;i++)$(p).append("<li>"+n[i]+"</li>");$(p).css("display","block")}for(var l=p.children,i=0;i<l.length;i++)l[i].index=i,l[i].onmouseover=function(){o.value=this.innerHTML;for(var e=0;e<l.length;e++)l[e].className="";this.className="outborder",s=this.index}}}))},o.onblur=function(){if(""==o.value)return!1;""!=$(n).val()&&(h=$(n).val().split(","));var t=/[^0-9a-zA-Z\u4e00-\u9fa5\-+#]+/,r=/\-$/,i=/^\-/,s=o.value.split(t),a=s.join("-");if("-"==a)return $(o).css("background-color","#fbd8db"),!1;if(r.test(a)&&(a=a.substring(0,a.length-1)),i.test(a)&&(a=a.substr(1)),l(h,a))return $(o).css("background-color","#fbd8db"),!1;var u=h.length;if(!(u>=5))return c(e,a),o.value="",h.push(a),$(n).val(h.join(",")),p.style.display="none",!1},o.onkeydown=function(t){var r=p.children,i=t||event;if(13==i.keyCode||188==i.keyCode){if(""==o.value)return!1;""!=$(n).val()&&(h=$(n).val().split(","));var d=/[^0-9a-zA-Z\u4e00-\u9fa5\-+#]+/,f=/\-$/,m=/^\-/,g=o.value.split(d),v=g.join("-");if("-"==v)return $(o).css("background-color","#fbd8db"),!1;if(f.test(v)&&(v=v.substring(0,v.length-1)),m.test(v)&&(v=v.substr(1)),l(h,v))return $(o).css("background-color","#fbd8db"),!1;var y=h.length;if(y>=5)return;return c(e,v),o.value="",p.style.display="none",h.push(v),$(n).val(h.join(",")),!1}if(8==i.keyCode&&""==o.value&&(u(e),p.style.display="none",h.pop(),$(n).val(h.join(","))),40==i.keyCode){s++,s==r.length&&(s=-1);for(var b=0;b<r.length;b++)r[b].className="";s!=-1?(r[s].className="outborder",o.value=r[s].innerHTML):o.value=a}if(38==i.keyCode){s--,s==-2&&(s=r.length-1);for(var b=0;b<r.length;b++)r[b].className="";return s!=-1?(r[s].className="outborder",o.value=r[s].innerHTML):o.value=a,!1}},i.onclick=function(e){var e=e||window.event,t=e.srcElement||e.target;if("删除标签"==t.title){""!=$(n).val()&&(h=$(n).val().split(","));var i=t.parentNode.children[0].innerHTML;h=r(h,i),$(n).val(h.join(",")),d($(t)),o.focus(),$(o).css("background-color","#fbd8db"),$(p).css("display","none")}},o.onclick=function(e){var t=e||event;t.cancelBubble=!0},document.onclick=function(){p.style.display="none"}}function l(e,t){for(var n=!1,r=0;r<e.length;r++)e[r]==t&&(n=!0);return n}function c(e,t){var n=$(e),r=n.find("input");r.before('<span class="tag"><span>'+t+'</span><a title="删除标签" href="javascript:;">×</a></span>')}function u(e){var t=$(e);t.find(".tag").last().remove()}function d(e){e.parent().remove()}function f(e){for(var t=0,n=0;e;)t+=e.offsetLeft,n+=e.offsetTop,e=e.offsetParent;return{left:t,top:n}}var h=window.location.protocol,p=h+"//ask.csdn.net/assets/ask_float_fonts_css-6b30a53970eb5c3a2a045e3df585b475.css";$("body").append('<link rel="stylesheet" type="text/css" media="screen" href="'+p+'">');var m,g="<div class='pop_edit ask_second comm_ask_second'><h3>提问</h3><span class='ask_float_span'>您的问题将会被发布在“<a class='ask_float_channel' href='//ask.csdn.net' target='_blank' style='cursor:pointer'>技术问答</a>”频道</span><a href='#' nodeType='close' class='close'>×</a><div class='context'><div class='err_div'><span class='err_ico'></span><span class='err_txt'>该问题已存在，请勿重复提问</span></div><div class='input_div'><input id='askInputSecond' type='text' style='font-size:14px;' placeholder='问题标题'/></div><div class='cm_box'><div class='cm_dialog'></div> <div class='pop_cm cm_add_link'><input type='text' placeholder='链接内容' id='af_cm_link_txt'><input type='text' placeholder='链接地址' id='af_cm_link_url'><input type='text' placeholder='链接提示' id='af_cm_link_tit'><div class='text-right'><span class='btn btn-default btn-sm' id='add_link_btn'>插入链接</span> </div> </div><div class='pop_cm cm_add_img'><div class='nav-tabs'><a class='img_tab active' href='#tab_upload'>本地上传</a><a class='img_tab' href='#tab_weburl'>网络图片</a></div><div class='tab_panel active' id='tab_upload'><div class='set_img'></div></div><div class='tab_panel' id='tab_weburl'><input type='text' placeholder='图片地址' id='af_cm_img_url'><input type='text' placeholder='图片说明' id='af_cm_img_alt'><div class='text-right'><span class='btn btn-default btn-sm' id='add_img_btn'>插入图片</span> </div></div> </div></div> <textarea id='editor_all' rows='8'></textarea><div class='div_tags clearfix'><div id='divSearchTags' class='tags_con'><input type='text'/></div><input type='hidden' name='txtSearchTags'/></div><div id='ask2_tagRecomm_div' class='drt_tagRecomm tracking-ad' data-mod='popu_73'><span class='drt_tit'>推荐标签：</span></div></div><div class='success'><div class='left_area'><input id='chk_cb' type='checkbox'/><span class='wyxs'>我要悬赏</span><input id='cb_num'  class='cb_num' readonly='true'/><span class='phib_rii'><span> 币</span></span></div><a href='#' nodeType='cancel' class='cancel'>取消</a><a href='#' nodeType='ok' class='ok'>发布</a></div></div>",v=Math.ceil(.55*document.documentElement.clientHeight);Math.round(Math.random());if(window.quickReplyflag){m="<a id='com-quick-QRcode' class='QRcodebg1' title='扫描二维码' style='top:"+(v-210)+"px'><span class='closeQR'></span></a>";var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >"+m+"<a id='com-quick-reply'  title='快速回复' style='top:"+(v-76)+"px'></a><a id='com-quick-collect'  title='我要收藏' style='top:"+(v-38)+"px'></a><a id='com-d-top-a'  style='top:"+v+"px' title='返回顶部' onclick='' ></a></div>"}else if(window.eduCallCenter)var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' ><a id='com-edu-call-center'  title='学院客服' style='top:"+(v-38)+"px' target='_blank' href='http://wpa.qq.com/msgrd?v=3&amp;uin=3390397209&amp;site=qq&amp;menu=yes'></a><a id='com-d-top-a'  style='top:"+v+"px' title='返回顶部' onclick='' ></a></div>";else if(window.bbsInfoflag){m="<a id='com-quick-QRcode' class='QRcodebg1' title='扫描二维码' style='top:"+(v-286)+"px'><span class='closeQR'></span></a>";var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >"+m+"<a id='com-quick-reply-bbs' title='快速回复' style='top:"+(v-152)+"px'></a><a id='com-quick-collect-bbs' title='我要收藏' style='top:"+(v-114)+"px'></a><a id='com-back-channel' title='回到频道' style='top:"+(v-76)+"px'></a><a id='com-back-home' title='回到首页' style='top:"+(v-38)+"px'></a><a id='com-d-top-a' style='top:"+v+"px' title='返回顶部' onclick='' ></a> </div>"}else if(window.downloadDetailflag){m="<a id='com-quick-QRcode' class='QRcodebg1' title='扫描二维码' style='top:"+(v-192)+"px'><span class='closeQR'></span></a>";var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' >"+m+"<a id='com-d-top-a'  style='top:"+(v-52)+"px' title='返回顶部' onclick='' ></a></div>"}else if(window.askForBussenessFlag)var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' ><a id='com-ask-float-block'  style='top:"+(v-38)+"px' title='我要提问' onclick='' ></a><a id='com-d-top-a'  style='top:"+(v-60)+"px' title='返回顶部' onclick='' ></a></div>";else var y="<div data-mod='popu_64' class='csdn-tracking-statistics' chg-blk='0' ><a id='com-d-top-a'  style='top:"+v+"px' title='返回顶部' onclick='' ></a></div>";var b='<div id="common_ask_div_sc" class="searchContainer"><div class="sTitle">可能存在类似的问题：</div><div class="sFooter"><a class="sFirstNewAsk">我想提一个新问题</a></div></div>',k=y+g+b;$("body").append(k),$("#com-appcode-float-block #appcode-close").click(function(){return $("#com-appcode-float-block").hide("slow"),!1}),$(document).find(".closeQR").click(function(){$(this).parent("#com-quick-QRcode").hide()}),$("#com-app-float-block").click(function(){window.eduCallCenter&&$("#com-appcode-float-block").show()}),$("body").bind("click",function(e){if($target=$(e.target),"add_img_btn"==$target.attr("id"))return cmDrawImage(H,"af_"),!1;if("img_tab"==$target.attr("class")){$target.addClass("active").siblings(".img_tab").removeClass("active");var t=$target.attr("href");$(t).addClass("active").siblings(".tab_panel").removeClass("active")}else{if("add_link_btn"==$target.attr("id"))return cmDrawLink(H,"af_"),!1;if("cm_dialog"==$target.attr("class"))$(".pop_cm").hide(300),$(".cm_dialog").hide(),""!=editor_change_ask_o_domain&&(document.domain=editor_change_ask_o_domain,editor_change_ask_o_domain="");else if($target.hasClass("icon-link")){var n=$target.parents()[1];$(".cm_dialog",n).fadeIn(300),$(".cm_add_link",n).slideDown(300),$(".cm_add_img",n).slideUp(300)}else if($target.hasClass("icon-picture")){var n=$target.parents()[1];$(".cm_dialog",n).fadeIn(300),$(".cm_add_link",n).slideUp(300),$(".cm_add_img",n).slideDown(300),editor_change_ask_o_domain=document.domain,document.domain="csdn.net"}}}),$("#com-quick-reply").click(function(){$("#comment_content").length>0?setEditorFocus():window.location.href="https://passport.csdn.net/"}),$("#com-quick-collect").click(function(){$("#comment_content").length>0?$("body").find(".pop_CA").length>0?($("#fa").attr("src",fasrc),$(".pop_CA").show(),$(".pop_CA_cover").show()):console.log("No popups!"):window.location.href="https://passport.csdn.net/"});var x=$("#com-d-top-a");$(document).scroll(function(){var e=document.body.scrollTop||document.documentElement.scrollTop;e>500?x.show():x.hide()}),$("#com-d-top-a").click(function(){return scrollTo(0,0),this.blur(),!1});var w=!1,C=h+"//ask.csdn.net/users/check_accept_rules.js",_=h+"//ask.csdn.net/questions/autocomplete.js",L=h+"//internalapi.csdn.net/proxy.html",S=h+"//internalapi.csdn.net/myapi/ask_topic/ask_topic_tag_suggest",T=h+"//ask.csdn.net/proxy.html",M=h+"//ask.csdn.net/questions/create_question.json",A=h+"//ask.csdn.net/users/get_scores.js",N=h+"//ask.csdn.net/questions/",E={},D=!1,H=new Editor;$(document).data("editor_all",H),H.render(document.getElementById("editor_all")),$("#com-ask-float-block").bind("click",function(){$(".ask_second").remove(),$("body").append(g),H=new Editor,$(document).data("editor_all",H),H.render(document.getElementById("editor_all")),$("#askInputSecond").focus(),$(".CodeMirror").removeClass("CodeMirror-focused"),$(".comm_ask_second .CodeMirror textarea").blur(),$.ajax({type:"get",url:C,dataType:"jsonp",jsonp:"callback",success:function(e){0==e.error?(t($("body > .ask_second")),$(".CodeMirror").removeClass("CodeMirror-focused")):1==e.error?window.location.href="https://passport.csdn.net/":alert(e.msg)},error:function(e){}})})})}(),function(e,t){var n=this,r={},i=n.jQuery;e(n,r,i),n.csdn===t?n.csdn=r:i.extend(n.csdn,r),i.extend(n,r)}(function(global,exports,$,undefined){document.domain="csdn.net";var searchServiceReady=!1,searchArgs=[],searchService=exports.searchService=function(){var e=[].slice.call(arguments,0);searchServiceReady?searchServiceFunc.apply(null,e):searchArgs.push(e)},render=searchService.render=function(tmpl,item,data){return tmpl.replace(/#\{ +([^}]+) +\}/gm,function($0,$1){var fieldN=$1;eval("item."+$1)!==undefined&&($1="item."+$1);var val=eval($1);if("title"==fieldN.toLowerCase()){var reg=/[^`~!\$%\^\*\(\)=\|\{\}':;',\\\[\\\]\.<>\/\?~！￥%……*\（\）——\|\{\}【】‘；：”“’。，、？]/g,titleFilter=val.match(reg).join("");val=titleFilter}return val})},ajaxProxyCaches={},ajaxProxy=searchService.ajaxProxy=function(e,t){var n=ajaxProxyCaches[e];if(n===undefined){n=ajaxProxyCaches[e]=[];var r=arguments.callee;$('<iframe src="'+e+'" style="display:none">').load(function(){n.contentWindow=this.contentWindow,r(e,t)}).prependTo("body")}else if(n.contentWindow===undefined)n.push(t);else do n.contentWindow.jQuery.ajax(t);while(t=n.shift())},trackingAd=function(e){"undefined"!=typeof window.csdn&&"function"==typeof window.csdn.trackingAd?window.csdn.trackingAd(e):$(document).bind("trackingAd-ready",function(){trackingAd(e)})},searchServiceFunc=function(e,t){var n="search"==e.url?'<li><a href="#{ object.url }" title="#{ object.title }">#{ object.title }</a></li>':'<li><a href="#{ url }" title="#{ title }" strategy="#{ strategy }">#{ title }</a></li>';if(e=$.extend({index:"",appendTo:"",query:"",tmpl:n,from:0,size:6,fields:["title","url"],token:"search_js_dkuyqthzbajmncbsb_token",render:render},e),e.index&&e.query){var r={};if("recommend"==e.url){var i=$.cookie("UserName")||"fake_userId",o=$.cookie("uuid_tt_dd")||"fake_uuid",s=/(\d+)$/,a=window.location.href,l=s.test(a)?RegExp.$1:"";r={userId:i,size:10,his:e.his+":"+l,client:e.client||"download_cf_enhance",query:e.query,cid:o},$.ajax({type:"GET",url:"http://recdm.csdn.net/getRecommendList.html",data:r,dataType:"jsonp",jsonp:"jsonp",success:function(n){var r=e.appendTo,i=e.tmpl;if(null===n||n.ok===!1&&n.message){var o=null!==n?n.message:"请求失败";r&&$(r).append(render('<div class="search-error">#{ item }</div>',o)),"function"==typeof t&&t(o,n,e)}else n.length>0&&(r&&($(r).append($.map(n,function(t){return e.render(i,t,n)}).join("")),trackingAd(r)),"function"==typeof t&&t(null,n,e))}})}else"search"==e.url&&($.map(["query","from","size","filter","sort","fields"],function(t){e.hasOwnProperty(t)&&(r[t]=e[t])}),ajaxProxy("http://search.api.csdn.net/proxy.html",{type:"POST",url:"http://search.api.csdn.net/"+e.index+"/csdn/_search",data:JSON.stringify(r),dataType:"json",headers:{"X-ACL-TOKEN":e.token},success:function(n){var r=e.appendTo,i=e.tmpl;if(null===n||n.ok===!1&&n.message){var o=null!==n?n.message:"请求失败";r&&$(r).append(render('<div class="search-error">#{ item }</div>',o)),"function"==typeof t&&t(o,n,e)}else n.hits&&(r&&($(r).append($.map(n.hits,function(t){return e.render(i,t,n)}).join("")),trackingAd(r)),"function"==typeof t&&t(null,n,e))}}))}};global.JSON===undefined?$.getScript("http://csdnimg.cn/rabbit/search-service/json2.js",function(){searchServiceReady=!0;for(var e;e=searchArgs.shift();)searchService.apply(null,e)}):searchServiceReady=!0}),function(){var e,t,n,r;e={SERVER_PV_URL:window.location.protocol+"//pv.csdn.net/csdnbi",SERVER_RE_URL:window.location.protocol+"//re.csdn.net/csdnbi"},r={headers:{component:"enter",datatype:"pv",version:"v1"},body:{}},n={buildReqParam:function(e,t){var n={re:t};return"["+JSON.stringify($.extend(r,{headers:{component:"enterprise",datatype:e,version:"v1"},body:JSON.stringify(n)}))+"]"},serverUrl:function(t){return"track"==t?e.SERVER_PV_URL:e.SERVER_RE_URL}},t={trackReport:function(e,t){var r=n.buildReqParam(e,t);$.ajax({url:n.serverUrl(e),type:"POST",async:!0,crossDomain:!0,xhrFields:{withCredentials:!0},contentType:"text/plain;charset=UTF-8",data:r,success:function(){},error:function(){}})}},void 0===window.csdn&&(window.csdn={});for(i in t)window.csdn[i]=t[i]}(),function(e){e.fn.iframeTracker=function(t){var n=this.get();if(null===t||t===!1)e.iframeTracker.untrack(n);else{if("object"!=typeof t)throw new Error("Wrong handler type (must be an object, or null|false to untrack)");e.iframeTracker.track(n,t)}},e.iframeTracker={focusRetriever:null,focusRetrieved:!1,handlersList:[],isIE8AndOlder:!1,init:function(){try{1==e.browser.msie&&e.browser.version<9&&(this.isIE8AndOlder=!0)}catch(t){try{var n=navigator.userAgent.match(/(msie) ([\w.]+)/i);n[2]<9&&(this.isIE8AndOlder=!0)}catch(r){}}if(e(window).focus(),e(window).blur(function(t){e.iframeTracker.windowLoseFocus(t)}),e("body").append('<div style="position:fixed; top:0; left:0; overflow:hidden;"><input style="position:absolute; left:-300px;" type="text" value="" id="focus_retriever" readonly="true" /></div>'),this.focusRetriever=e("#focus_retriever"),this.focusRetrieved=!1,e(document).mousemove(function(t){document.activeElement&&"IFRAME"==document.activeElement.tagName&&(e.iframeTracker.focusRetriever.focus(),e.iframeTracker.focusRetrieved=!0)}),this.isIE8AndOlder){this.focusRetriever.blur(function(t){t.stopPropagation(),t.preventDefault(),e.iframeTracker.windowLoseFocus(t)}),e("body").click(function(t){e(window).focus()}),e("form").click(function(e){e.stopPropagation()});try{e("body").on("click","form",function(e){e.stopPropagation()})}catch(t){console.log("[iframeTracker] Please update jQuery to 1.7 or newer. (exception: "+t.message+")")}}},track:function(t,n){n.target=t,e.iframeTracker.handlersList.push(n),e(t).bind("mouseover",{handler:n},e.iframeTracker.mouseoverListener).bind("mouseout",{handler:n},e.iframeTracker.mouseoutListener)},untrack:function(t){if("function"!=typeof Array.prototype.filter)return void console.log("Your browser doesn't support Array filter, untrack disabled");e(t).each(function(t){e(this).unbind("mouseover",e.iframeTracker.mouseoverListener).unbind("mouseout",e.iframeTracker.mouseoutListener)});var n=function(e){return null!==e};for(var r in this.handlersList){for(var i in this.handlersList[r].target)e.inArray(this.handlersList[r].target[i],t)!==-1&&(this.handlersList[r].target[i]=null);this.handlersList[r].target=this.handlersList[r].target.filter(n),0==this.handlersList[r].target.length&&(this.handlersList[r]=null)}this.handlersList=this.handlersList.filter(n)},mouseoverListener:function(e){e.data.handler.over=!0;try{e.data.handler.overCallback(this)}catch(t){}},mouseoutListener:function(t){t.data.handler.over=!1,e.iframeTracker.focusRetriever.focus();try{t.data.handler.outCallback(this)}catch(n){}},windowLoseFocus:function(e){for(var t in this.handlersList)if(1==this.handlersList[t].over)try{this.handlersList[t].blurCallback()}catch(n){}}},e(document).ready(function(){})}(jQuery),feedListGet=function(e){var t=location.host;t=t.split(".")[0];var n=feedlist.attr("data-pid")||$("body").attr("data-pid")||t,r=feedlist.attr("data-mod"),o=feedlist.attr("data-dsm"),s=feedlist.attr("data-mtp")||($("a img",feedlist)[0]?3:2),a=window.location.href,l=$(document).find(feedlist[i]),c=l.find("a").text(),u=l.find("a").attr("href");"http"!==u.substr(0,4)&&"/"===u.substr(0,1)&&(u=window.location.protocol+"//"+window.location.host+u);var d=(l.find("li.user_name a").text()||"",l.find("li.user_name a").attr("href")||"",l.find("a").attr("strategy")||""),f=c+","+u+","+d+";";global=this;var h=global.document.referrer||"-",p=getCookie("dc_session_id");feedlist.data=function(){var e;return{uid:(null!=(e=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(global.document.cookie))?e[3]:void 0)||"-",ref:h,pid:n,mod:r,dsm:o,mtp:s,con:f,ck:"-",curl:a,session_id:p}}},feedlistScroll=function(){var e,t,n,r,o,s,a;for(t=$(document).height(),r=$(window).height(),o=e,n=$(document).scrollTop(),s=n+r,viewedHeight=e,feedlist=$(document).find('.csdn-tracking-statistics[data-poputype$="feed"],.tracking-ad[data-poputype$="feed"]'),i=0;i<feedlist.length;i++){a=feedlist[i];var l=$(feedlist[i]).offset().top;feedListGet(),"false"===$(feedlist[i]).attr("data-feed-show")&&s>=l&&!$(feedlist[i]).is(".tracking-click")&&($(feedlist[i]).attr({"data-feed-show":"true"}),$(a).data["x-acl-token"]="status_js_dkuyqthzbajmncbsb_token",csdn.trackReport("re",$.param(feedlist.data())))}},$(".center_main").scroll(function(){feedlistScroll()}),function(){!function(e,t){var n,r,i,o;i=this,n=i.jQuery,r={},e(i,r,n),i.csdn===t&&(i.csdn=r);for(o in r)i[o]=i.csdn[o]=r[o]}(function(e,t,n,r){function i(e){for(var t=document.cookie.split("; "),n=0;n<t.length;n++){var r=t[n].split("=");if(e==r[0])return r[1]}return null}var o,s,a,l,c,u,d,f,h,p,m,g,v,y,b,k;f="http"===e.location.protocol.substr(0,4)?"":"http:",h=e.document.referrer||"-",o=[],s=[],g=0,v=window.location.hostname,k=i("dc_session_id"),b=function(){var e,t,r,i,s,l,c,u,d;for(s=n(document).height(),c=n(window).height(),t=(y.scrollTop()||document.body.scrollTop||document.documentElement.scrollTop)+y.height(),u=t,l=n(document).scrollTop(),d=l+c,g=t,feedlistScroll(),r=0,i=o.length;r<i;r++)e=o[r],!e.viewed&&d>e.top&&e.top>=l&&!e.ele.is(".tracking-click")&&(a(e.data(),!0),e.viewed=!0)},l=function(){var t,r,i,s,a,l,c,u,d;for(s=0,y=n(e).scroll(function(){if(o[0])return e.clearTimeout(s),s=e.setTimeout(b,100)}),r={},u=n(document).find(".tracking-ad,.csdn-tracking-statistics"),l=0,c=u.length;l<c;l++)t=u[l],i=n(document).find(t).attr("data-mod"),(null!=(d=r[i])?d.push(t):void 0)||(r[i]=[t]);for(i in r)a=r[i],m(n(a));return n.iframeTracker.init(),y.triggerHandler("scroll")},m=t.trackingAd=function(t,r){var i,s,l,c,f,p,m,v;return null==r&&(r={}),("string"==typeof t||!t instanceof n)&&(t=n(t)),c=r.pid||t.attr("data-pid")||e.document.body.getAttribute("data-pid")||(null!=(p=/(\w+)\.\w+\.\w+$/.exec(e.location.host))?p[1]:void 0),s=r.mod||t.attr("data-mod"),blk=r.blk||t.attr("chg-blk"),l=r.mtp||t.attr("data-mtp")||(n("a img",t)[0]?3:2),f=r.trim||t.attr("data-trim"),m="string"==typeof(m=r.dsm||t.attr("data-dsm")||"get")?m.toLowerCase():"get","string"==typeof f&&"/"===f.charAt(0)&&(f=f.split("/"),f=new RegExp(f.slice(1,-1),f.slice(-1))),i=r.filter||t.attr("data-filter")||"",v=window.location.href,u(t,i,function(r){var i,u;u=d(l,f,r),i={top:t.offset().top,ele:t,viewed:!1,data:function(){var t;return{uid:(null!=(t=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(e.document.cookie))?t[3]:void 0)||"-",ref:h,pid:c,mod:s,dsm:m,mtp:l,con:u,ck:"-",curl:v,session_id:k}}};i.data();o.push(i),g>i.top&&n(e).triggerHandler("scroll"),r.each(function(){"0"!==blk&&""===this.target&&(this.target="_blank")}),n(i.ele).on("click","a",function(){var e;"feed"!==n(i.ele).attr("data-poputype")&&(e=i.data(),e.ck=d(l,f,n(this)),a(e))})})},u=function(t,r,i){var o,s,l,c;return l=n("a"+r,t),s=n("iframe",t),s[0]?(o=s.length,s.each(function(){var t,s;return t=n(this),s=function(){if(null!==t)return t.attr("src").split("?")[0].indexOf(v)==-1?t.iframeTracker({blurCallback:function(){a(this.data)},overCallback:function(t){var r,i,o=n(t).parents(".tracking-ad");this.data={con:"-",curl:window.location.href,mod:o.attr("data-mod"),mtp:o.attr("data-mtp")||(n("a img",o)[0]?3:2),pid:o.attr("data-pid")||e.document.body.getAttribute("data-pid")||(null!=(r=/(\w+)\.\w+\.\w+$/.exec(e.location.host))?r[1]:void 0),ref:h,uid:(null!=(i=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(e.document.cookie))?i[3]:void 0)||"-",ck:n(t).attr("src"),dsm:"post",session_id:k}},outCallback:function(e){this.ifr_src=null},data:null}):l=l.add(t.contents().find("a"+r)),t=null,o--,0===o?(c&&clearTimeout(c),b(),i(l)):void 0},t.load(s)})):i(l)},d=function(e,t,r){return r.map(function(){var r,i;return 3===e&&(r=n("img",this)[0],r&&(i=r.title||r.alt||r.src)),i||(i=this.innerHTML.replace(/<[^>]+>/g,"").replace(/^\s+|\s+$/g,"")||this.title||this.alt||this.innerHTML.replace(/^\s+|\s+$/g,"")),t&&(i=(i+"").replace(t,"")),this.attributes.strategy?i+","+this.href+","+this.attributes.strategy.nodeValue:i+","+this.href}).get().join(";")},a=function(e,t){e["x-acl-token"]="status_js_dkuyqthzbajmncbsb_token",csdn.trackReport("re",n.param(e))},feedlistClick=function(){var t=n(this).parents(".csdn-tracking-statistics,.tracking-ad"),r=t.attr("data-pid")||n("body").attr("data-pid")||(null!=(_ref=/(\w+)\.\w+\.\w+$/.exec(e.location.host))?_ref[1]:void 0),i=t.attr("data-mod"),o=t.attr("data-dsm"),s=t.attr("data-mtp")||(n("a img",t)[0]?3:2),a=window.location.href,l=t.find("a").text(),c=t.find("a").attr("href"),u="";u="http"!==c.substr(0,4)&&"/"===c.substr(0,1)?window.location.protocol+"//"+window.location.host+c:c;var d=(t.find("li.user_name a").text()||"",t.find("li.user_name a").attr("href")||"",t.find("a").attr("strategy")||""),f=l+","+u+","+d+";",p=f||"-",m=l+","+u+","+d+";";t.data=function(){var t;return{uid:(null!=(t=/(; )?(UserName|_javaeye_cookie_id_)=([^;]+)/.exec(e.document.cookie))?t[3]:void 0)||"-",ref:h,pid:r,mod:i,dsm:o,mtp:s,con:m,ck:p,curl:a,session_id:k}},n(t).data["x-acl-token"]="status_js_dkuyqthzbajmncbsb_token",csdn.trackReport("re",n.param(t.data()))},n===r?(c=!1,p=document.createElement("script"),p.type="text/javascript",p.charset="utf-8",current_protocol=location.protocol,p.src=current_protocol+"//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js",p.onload=p.onreadystatechange=function(){if(!(c||this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState))return c=!0,e.jQuery.noConflict(),n=e.jQuery,window.navigator.appVersion.match(/MSIE (\d)*/i)&&Number(window.navigator.appVersion.match(/MSIE (\d)*/i)[1],10)<=9&&(n.support.cors=!0),n(l),p.onload=p.onreadystatechange=null},document.getElementsByTagName("head")[0].insertBefore(p,null)):n(l),n(document).on("click",'.tracking-ad[data-poputype="feed"] a',feedlistClick),n(document).on("click",'.csdn-tracking-statistics[data-poputype="feed"] a',feedlistClick)})}.call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
